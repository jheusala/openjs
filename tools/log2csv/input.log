0.00062200 0101 [debug] js.cc:160: Setting locale
0.00082300 0101 [debug] js.cc:164: locale=`en_US.UTF8'
0.00084400 0003 [info ] js.cc:176: Preparing v8
0.03571900 0003 [info ] js.cc:191: Preparing CLI arguments
0.03577800 0101 [debug] js.cc:194: Setup command line arguments for the script
0.03580600 0101 [debug] js.cc:197: argv[0] = `main.js'
0.03596800 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#1 convert<Glib::ustring, std::string> (value) at 0x805e0cf in main from js
0.03615000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#2 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03629400 0103 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`main.js'
0.03632400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#2 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03634000 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#1 convert<Glib::ustring, std::string> at 0x805e0cf in main from js
0.03637000 0101 [debug] js.cc:201: tmp = `main.js'
0.03638900 0101 [debug] js.cc:197: argv[1] = `example.html'
0.03650500 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#3 convert<Glib::ustring, std::string> (value) at 0x805e0cf in main from js
0.03664400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#4 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03667900 0103 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`example.html'
0.03669600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#4 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03671200 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#3 convert<Glib::ustring, std::string> at 0x805e0cf in main from js
0.03673000 0101 [debug] js.cc:201: tmp = `example.html'
0.03674800 0101 [debug] js.cc:197: argv[2] = `content'
0.03686100 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#5 convert<Glib::ustring, std::string> (value) at 0x805e0cf in main from js
0.03699800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#6 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03703200 0103 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`content'
0.03705000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#6 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03706600 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#5 convert<Glib::ustring, std::string> at 0x805e0cf in main from js
0.03707700 0101 [debug] js.cc:201: tmp = `content'
0.03708800 0101 [debug] js.cc:197: argv[3] = `out.html'
0.03720100 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#7 convert<Glib::ustring, std::string> (value) at 0x805e0cf in main from js
0.03733800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#8 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03737100 0103 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`out.html'
0.03741600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#8 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03743300 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#7 convert<Glib::ustring, std::string> at 0x805e0cf in main from js
0.03745100 0101 [debug] js.cc:201: tmp = `out.html'
0.03746800 0003 [info ] js.cc:206: Preparing ENV
0.03758600 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:36: SOF#9 parse_environ () at 0x805e834 in main from js
0.03773000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:129: SOF#10 env () at 0x80724b0 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03776300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:129: EOF#10 env at 0x80724b0 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03788800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:134: SOF#11 begin () at 0x80724c8 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03792700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:134: EOF#11 begin at 0x80724c8 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03805200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#12 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03807900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#12 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03809000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=LC_PAPER, i-value=fi_FI.UTF-8
0.03821600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#13 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03836800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#14 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03840200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`LC_PAPER'
0.03842000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#14 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03843600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#13 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03845100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.03846900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=LC_PAPER
0.03860900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#15 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03876100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#16 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03879600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`fi_FI.UTF-8'
0.03884400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#16 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03888500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#15 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03890100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.03892000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=fi_FI.UTF-8
0.03905200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#17 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03908200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#17 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03909200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=SSH_AGENT_PID, i-value=3834
0.03921900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#18 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03939600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#19 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03943200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`SSH_AGENT_PID'
0.03945000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#19 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03946600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#18 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03948800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.03950600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=SSH_AGENT_PID
0.03963300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#20 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03978500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#21 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03983200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`3834'
0.03985000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#21 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.03986600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#20 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.03988100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.03989900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=3834
0.04002800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#22 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04006100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#22 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04007800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=KDE_MULTIHEAD, i-value=false
0.04020400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#23 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04035700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#24 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04039100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`KDE_MULTIHEAD'
0.04040900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#24 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04042400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#23 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04044000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04045800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=KDE_MULTIHEAD
0.04058600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#25 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04073700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#26 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04077100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`false'
0.04078900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#26 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04081900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#25 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04083500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04085300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=false
0.04098100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#27 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04101400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#27 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04103100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=SELINUX_INIT, i-value=YES
0.04115100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#28 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04130200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#29 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04133700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`SELINUX_INIT'
0.04135400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#29 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04137000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#28 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04138500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04140300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=SELINUX_INIT
0.04153000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#30 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04168200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#31 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04171600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`YES'
0.04173400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#31 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04174900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#30 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04179700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04181600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=YES
0.04194500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#32 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04197800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#32 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04199500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=CONSOLE, i-value=/dev/console
0.04211500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#33 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04229100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#34 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04232700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`CONSOLE'
0.04234500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#34 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04236100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#33 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04237600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04239400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=CONSOLE
0.04252200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#35 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04268800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#36 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04272400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/dev/console'
0.04274200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#36 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04275800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#35 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04277400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04279300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/dev/console
0.04294400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#37 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04297700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#37 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04299400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=GPG_AGENT_INFO, i-value=/tmp/gpg-yNHTY6/S.gpg-agent:4864:1
0.04311500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#38 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04326700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#39 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04330100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`GPG_AGENT_INFO'
0.04331900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#39 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04333500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#38 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04335000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04336900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=GPG_AGENT_INFO
0.04349600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#40 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04364700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#41 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04368200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/tmp/gpg-yNHTY6/S.gpg-agent:4864:1'
0.04369900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#41 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04371500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#40 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04373100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04375100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/tmp/gpg-yNHTY6/S.gpg-agent:4864:1
0.04387800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#42 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04392600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#42 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04394300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=SHELL, i-value=/bin/bash
0.04407000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#43 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04422200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#44 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04425600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`SHELL'
0.04427400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#44 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04428900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#43 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04430500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04432300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=SHELL
0.04445000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#45 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04460200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#46 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04463600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/bin/bash'
0.04465300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#46 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04466900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#45 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04468500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04470300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/bin/bash
0.04482900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#47 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04486300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#47 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04488000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=TERM, i-value=screen
0.04501500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#48 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04516100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#49 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04519500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`TERM'
0.04521300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#49 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04522900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#48 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04524400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04526200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=TERM
0.04538900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#50 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04558800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#51 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04562400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`screen'
0.04564200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#51 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04565700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#50 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04567300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04569100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=screen
0.04581800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#52 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04585200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#52 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04586900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=rootmnt, i-value=/root
0.04601700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#53 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04619600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#54 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04623000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`rootmnt'
0.04624800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#54 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04626300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#53 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04627900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04629700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=rootmnt
0.04642400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#55 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04657700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#56 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04661100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/root'
0.04662900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#56 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04664500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#55 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04666000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04667800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/root
0.04680600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#57 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04683900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#57 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04685600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=GTK2_RC_FILES, i-value=/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0
0.04698200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#58 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04712800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#59 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04717700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`GTK2_RC_FILES'
0.04719500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#59 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04721100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#58 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04722600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04724400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=GTK2_RC_FILES
0.04737200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#60 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04752400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#61 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04755900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0'
0.04757700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#61 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04759200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#60 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04760800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04763100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0
0.04776200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#62 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04779700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#62 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04781300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=GS_LIB, i-value=/home/users/jhh/.fonts
0.04794700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#63 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04810300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#64 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04813700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`GS_LIB'
0.04814900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#64 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04817700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#63 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04819300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04821100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=GS_LIB
0.04833900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#65 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04849100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#66 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04852500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/home/users/jhh/.fonts'
0.04854300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#66 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04855900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#65 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04857400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04859300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/home/users/jhh/.fonts
0.04871900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#67 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04875200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#67 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04876900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=GTK_RC_FILES, i-value=/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc
0.04894800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#68 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04909600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#69 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04912400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`GTK_RC_FILES'
0.04913600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#69 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04914600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#68 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04917400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.04919400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=GTK_RC_FILES
0.04934400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#70 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04951000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#71 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04954400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc'
0.04956200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#71 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.04957800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#70 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04959300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.04961600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc
0.04974400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#72 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04977700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#72 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.04979400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=WINDOWID, i-value=46137352
0.04991900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#73 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05007200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#74 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05010000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`WINDOWID'
0.05011200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#74 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05012200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#73 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05014500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05015800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=WINDOWID
0.05028600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#75 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05043800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#76 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05047200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`46137352'
0.05049000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#76 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05050500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#75 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05052100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05053800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=46137352
0.05066500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#77 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05069800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#77 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05071600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=KDE_FULL_SESSION, i-value=true
0.05084200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#78 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05099400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#79 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05102900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`KDE_FULL_SESSION'
0.05104600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#79 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05106200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#78 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05107800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05109000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=KDE_FULL_SESSION
0.05121700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#80 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05138200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#81 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05141600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`true'
0.05143400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#81 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05145000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#80 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05146500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05148300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=true
0.05161000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#82 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05164300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#82 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05166000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=USER, i-value=jhh
0.05178700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#83 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05193900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#84 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05197400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`USER'
0.05199100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#84 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05200700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#83 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05202300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05204000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=USER
0.05218900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#85 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05234400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#86 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05239200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`jhh'
0.05241000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#86 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05242600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#85 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05244100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05245900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=jhh
0.05259300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#87 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05262400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#87 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05264200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=LS_COLORS, i-value=no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:
0.05278800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#88 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05294700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#89 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05298200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`LS_COLORS'
0.05300000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#89 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05301600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#88 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05303100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05306600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=LS_COLORS
0.05319400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#90 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05334700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#91 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05338600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
0.05341500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#91 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05343100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#90 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05344600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05352600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:
0.05366600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#92 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05371300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#92 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05373100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=INIT_VERSION, i-value=sysvinit-2.86
0.05385700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#93 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05400900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#94 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05404300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`INIT_VERSION'
0.05406100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#94 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05407700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#93 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05408600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05409800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=INIT_VERSION
0.05422500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#95 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05437700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#96 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05441100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`sysvinit-2.86'
0.05442900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#96 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05444400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#95 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05446000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05447800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=sysvinit-2.86
0.05460800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#97 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05464100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#97 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05465800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=DEBEMAIL, i-value=jheusala@sendanor.fi
0.05480100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#98 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05495300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#99 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05498700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`DEBEMAIL'
0.05500500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#99 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05502100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#98 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05503600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05505400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=DEBEMAIL
0.05518100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#100 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05533400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#101 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05536800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`jheusala@sendanor.fi'
0.05538600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#101 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05540200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#100 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05541700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05543600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=jheusala@sendanor.fi
0.05560400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#102 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05563900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#102 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05565600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=SSH_AUTH_SOCK, i-value=/tmp/ssh-OeCxbD3805/agent.3805
0.05578200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#103 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05596200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#104 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05599800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`SSH_AUTH_SOCK'
0.05601700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#104 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05603300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#103 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05604900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05606800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=SSH_AUTH_SOCK
0.05620600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#105 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05635700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#106 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05639100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/tmp/ssh-OeCxbD3805/agent.3805'
0.05640900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#106 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05642500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#105 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05644000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05646000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/tmp/ssh-OeCxbD3805/agent.3805
0.05658700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#107 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05662000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#107 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05663700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=init, i-value=/sbin/init
0.05676300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#108 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05691500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#109 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05696200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`init'
0.05698000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#109 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05699500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#108 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05701100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05702900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=init
0.05715000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#110 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05730300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#111 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05733600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/sbin/init'
0.05735400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#111 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05737000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#110 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05738500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05740300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/sbin/init
0.05753200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#112 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05756500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#112 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05758200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=TERMCAP, i-value=SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:
0.05772700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#113 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05787900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#114 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05791400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`TERMCAP'
0.05793200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#114 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05794800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#113 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05796300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05798100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=TERMCAP
0.05810200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#115 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05825300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#116 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05829300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:'
0.05832200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#116 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05833800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#115 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05837500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05846700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:
0.05860800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#117 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05864100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#117 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05865800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=USERNAME, i-value=jhh
0.05878400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#118 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05898800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#119 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05902400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`USERNAME'
0.05904200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#119 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05905800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#118 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05907300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.05908500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=USERNAME
0.05921200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#120 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05939400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#121 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05943000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`jhh'
0.05944900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#121 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05946500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#120 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05948700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.05950400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=jhh
0.05963100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#122 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05966400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#122 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05968100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=SESSION_MANAGER, i-value=local/zeta1:/tmp/.ICE-unix/4730
0.05980700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#123 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.05995900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#124 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.05999300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`SESSION_MANAGER'
0.06001100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#124 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06002700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#123 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06004200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06006100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=SESSION_MANAGER
0.06018700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#125 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06034000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#126 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06038900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`local/zeta1:/tmp/.ICE-unix/4730'
0.06040700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#126 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06042300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#125 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06043800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06045800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=local/zeta1:/tmp/.ICE-unix/4730
0.06058500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#127 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06061800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#127 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06063500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=MOZ_DISABLE_PANGO, i-value=1
0.06076000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#128 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06194000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#129 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06198700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`MOZ_DISABLE_PANGO'
0.06200600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#129 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06202100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#128 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06203700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06205600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=MOZ_DISABLE_PANGO
0.06221500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#130 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06237000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#131 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06240500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`1'
0.06242200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#131 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06245400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#130 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06247000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06248800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=1
0.06263000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#132 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06266600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#132 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06268400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=XPSERVERLIST, i-value=:64 
0.06281800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#133 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06297700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#134 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06301100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`XPSERVERLIST'
0.06302900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#134 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06304400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#133 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06306000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06307800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=XPSERVERLIST
0.06320500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#135 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06335600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#136 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06339000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`:64 '
0.06340800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#136 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06342300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#135 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06345100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06347000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=:64 
0.06359700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#137 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06363000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#137 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06364700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=KONSOLE_DCOP, i-value=DCOPRef(konsole-23941,konsole)
0.06377300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#138 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06392500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#139 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06395900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`KONSOLE_DCOP'
0.06397700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#139 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06399200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#138 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06400800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06402600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=KONSOLE_DCOP
0.06414600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#140 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06429800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#141 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06433200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`DCOPRef(konsole-23941,konsole)'
0.06435000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#141 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06436600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#140 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06438100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06440000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=DCOPRef(konsole-23941,konsole)
0.06454000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#142 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06457400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#142 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06459100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=PATH, i-value=/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games
0.06471600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#143 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06486800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#144 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06490200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`PATH'
0.06492000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#144 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06493500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#143 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06495100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06496900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=PATH
0.06508900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#145 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06524100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#146 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06527500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games'
0.06529300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#146 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06530900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#145 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06532400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06534600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games
0.06550200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#147 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06556800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#147 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06558600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=STY, i-value=25082.pts-8.zeta1
0.06571300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#148 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06586500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#149 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06589900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`STY'
0.06592100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#149 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06593200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#148 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06594500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06595700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=STY
0.06608600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#150 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06624700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#151 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06628100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`25082.pts-8.zeta1'
0.06629800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#151 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06631400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#150 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06632900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06634800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=25082.pts-8.zeta1
0.06647500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#152 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06650800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#152 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06653700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=RUNLEVEL, i-value=2
0.06666400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#153 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06681600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#154 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06685000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`RUNLEVEL'
0.06686800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#154 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06688400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#153 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06689900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06691700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=RUNLEVEL
0.06704400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#155 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06719500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#156 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06723000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`2'
0.06724700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#156 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06726300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#155 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06727800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06729600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=2
0.06742200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#157 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06745500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#157 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06747200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=runlevel, i-value=2
0.06759700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#158 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06776300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#159 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06779700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`runlevel'
0.06781500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#159 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06783000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#158 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06784600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06786400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=runlevel
0.06799100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#160 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06813700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#161 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06816400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`2'
0.06818200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#161 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06819700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#160 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06821300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06823000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=2
0.06835700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#162 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06839000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#162 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06840600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=JOBS, i-value=-j3
0.06853200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#163 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06868400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#164 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06873100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`JOBS'
0.06874900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#164 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06876400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#163 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06878000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06879700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=JOBS
0.06897700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#165 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06912400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#166 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06915200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`-j3'
0.06916400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#166 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06918000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#165 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06919500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.06921300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=-j3
0.06936300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#167 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06939800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#167 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06941600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=PWD, i-value=/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome
0.06955100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#168 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06970300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#169 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06973700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`PWD'
0.06975400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#169 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.06978200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#168 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.06979800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.06981600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=PWD
0.06994300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#170 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07008900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#171 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07011700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome'
0.07012900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#171 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07013900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#170 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07014900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07016400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome
0.07029100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#172 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07032400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#172 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07034100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=KONSOLE_DCOP_SESSION, i-value=DCOPRef(konsole-23941,session-1)
0.07046700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#173 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07061800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#174 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07065300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`KONSOLE_DCOP_SESSION'
0.07067000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#174 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07068600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#173 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07071400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07073400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=KONSOLE_DCOP_SESSION
0.07086100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#175 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07101200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#176 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07104700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`DCOPRef(konsole-23941,session-1)'
0.07106500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#176 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07108000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#175 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07109000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07110400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=DCOPRef(konsole-23941,session-1)
0.07123500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#177 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07126800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#177 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07128500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=VERBOSE, i-value=no
0.07141000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#178 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07156100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#179 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07159500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`VERBOSE'
0.07161300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#179 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07162800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#178 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07164400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07167400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=VERBOSE
0.07180200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#180 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07195400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#181 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07198800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`no'
0.07200500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#181 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07202100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#180 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07203600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07205400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=no
0.07220200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#182 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07223700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#182 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07225400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=KDE_SESSION_UID, i-value=1000
0.07238400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#183 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07254500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#184 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07257700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`KDE_SESSION_UID'
0.07259000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#184 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07260600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#183 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07262200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07264100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=KDE_SESSION_UID
0.07277700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#185 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07294600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#186 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07298000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`1000'
0.07299800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#186 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07301400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#185 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07302900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07304600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=1000
0.07316600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#187 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07320000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#187 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07321700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=LANG, i-value=en_US.UTF-8
0.07334200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#188 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07349300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#189 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07352700 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`LANG'
0.07354500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#189 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07356100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#188 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07357600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07359300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=LANG
0.07372000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#190 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07387200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#191 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07391800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`en_US.UTF-8'
0.07393600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#191 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07395200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#190 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07396800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07398600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=en_US.UTF-8
0.07410700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#192 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07413400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#192 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07414500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=PREVLEVEL, i-value=N
0.07427100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#193 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07442200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#194 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07445600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`PREVLEVEL'
0.07447300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#194 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07448900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#193 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07450400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07452200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=PREVLEVEL
0.07464900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#195 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07480000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#196 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07483300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`N'
0.07485100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#196 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07487900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#195 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07489500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07491200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=N
0.07504000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#197 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07507300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#197 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07508400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=previous, i-value=N
0.07520900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#198 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07536000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#199 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07539400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`previous'
0.07541100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#199 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07542700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#198 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07544300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07546100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=previous
0.07562800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#200 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07578100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#201 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07581600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`N'
0.07583300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#201 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07584900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#200 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07587700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07589600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=N
0.07604700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#202 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07608200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#202 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07609400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=HISTCONTROL, i-value=ignoredups
0.07622700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#203 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07637800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#204 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07641200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`HISTCONTROL'
0.07643000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#204 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07644600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#203 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07646100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07647900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=HISTCONTROL
0.07660600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#205 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07675700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#206 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07679100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`ignoredups'
0.07680800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#206 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07682400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#205 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07683900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07685700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=ignoredups
0.07698400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#207 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07702900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#207 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07704700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=NODM_FIRST_VT, i-value=7
0.07716700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#208 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07731800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#209 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07735200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`NODM_FIRST_VT'
0.07737000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#209 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07738500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#208 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07740100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07741900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=NODM_FIRST_VT
0.07754500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#210 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07769700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#211 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07773100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`7'
0.07774800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#211 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07776400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#210 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07777900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07779600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=7
0.07792300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#212 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07795700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#212 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07799600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=GPG_TTY, i-value=/dev/pts/14
0.07811800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#213 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07827000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#214 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07830400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`GPG_TTY'
0.07832200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#214 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07833800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#213 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07835300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07837100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=GPG_TTY
0.07849800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#215 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07865000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#216 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07868400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/dev/pts/14'
0.07870200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#216 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07871800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#215 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07873300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07875100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/dev/pts/14
0.07893000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#217 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07896500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#217 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07898200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=HOME, i-value=/home/users/jhh
0.07910200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#218 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07927600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#219 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07931200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`HOME'
0.07933100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#219 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07934700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#218 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07936300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.07938100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=HOME
0.07951900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#220 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07967000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#221 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07970500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/home/users/jhh'
0.07972200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#221 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.07973800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#220 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07975400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.07977200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/home/users/jhh
0.07989800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#222 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07993100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#222 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.07994900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=SHLVL, i-value=6
0.08007400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#223 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08022500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#224 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08027200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`SHLVL'
0.08029000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#224 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08030600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#223 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08032200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08034000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=SHLVL
0.08046700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#225 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08061800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#226 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08065200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`6'
0.08067000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#226 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08068600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#225 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08070100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08071800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=6
0.08084500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#227 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08087800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#227 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08089500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=XCURSOR_THEME, i-value=default
0.08102000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#228 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08116500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#229 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08119900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`XCURSOR_THEME'
0.08121700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#229 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08124400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#228 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08126100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08127900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=XCURSOR_THEME
0.08140600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#230 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08155800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#231 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08159200 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`default'
0.08161000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#231 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08162600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#230 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08164100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08165900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=default
0.08178500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#232 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08181900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#232 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08183600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=LOGNAME, i-value=jhh
0.08196100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#233 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08210700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#234 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08213500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`LOGNAME'
0.08216700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#234 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08218500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#233 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08221400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08223300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=LOGNAME
0.08236200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#235 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08251500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#236 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08254800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`jhh'
0.08256600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#236 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08259700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#235 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08260700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08261900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=jhh
0.08275400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#237 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08278900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#237 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08280700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=WINDOW, i-value=3
0.08293800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#238 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08308300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#239 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08311100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`WINDOW'
0.08312300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#239 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08313300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#238 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08314300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08315500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=WINDOW
0.08328100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#240 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08344600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#241 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08348000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`3'
0.08349800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#241 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08351400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#240 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08352900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08354600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=3
0.08367300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#242 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08370600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#242 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08372300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=DBUS_SESSION_BUS_ADDRESS, i-value=unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70
0.08384900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#243 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08400100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#244 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08403500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`DBUS_SESSION_BUS_ADDRESS'
0.08405300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#244 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08406900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#243 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08408400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08409800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=DBUS_SESSION_BUS_ADDRESS
0.08422400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#245 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08437600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#246 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08441900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70'
0.08443800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#246 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08445300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#245 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08446900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08449100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70
0.08461800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#247 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08465100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#247 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08466800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=LESSOPEN, i-value=| /usr/bin/lesspipe %s
0.08479300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#248 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08494400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#249 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08497800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`LESSOPEN'
0.08499600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#249 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08501200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#248 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08502700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08504500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=LESSOPEN
0.08516600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#250 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08531700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#251 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08536800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`| /usr/bin/lesspipe %s'
0.08538600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#251 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08540200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#250 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08541700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08543600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=| /usr/bin/lesspipe %s
0.08560400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#252 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08563900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#252 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08565600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=DEBFULLNAME, i-value=Jaakko-Heikki Heusala
0.08578300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#253 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08593800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#254 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08596800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`DEBFULLNAME'
0.08598600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#254 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08600300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#253 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08601900 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08603800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=DEBFULLNAME
0.08617700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#255 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08632800 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#256 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08636300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`Jaakko-Heikki Heusala'
0.08638100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#256 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08641200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#255 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08642800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08644700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=Jaakko-Heikki Heusala
0.08657500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#257 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08660800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#257 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08662500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=WINDOWPATH, i-value=7
0.08675000 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#258 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08690200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#259 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08693600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`WINDOWPATH'
0.08695400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#259 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08696900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#258 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08698500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08700300 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=WINDOWPATH
0.08712300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#260 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08727500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#261 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08730900 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`7'
0.08732600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#261 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08734200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#260 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08737000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08738800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=7
0.08751500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#262 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08754800 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#262 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08756500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=DISPLAY, i-value=:0.0
0.08769100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#263 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08784200 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#264 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08787600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`DISPLAY'
0.08789300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#264 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08790900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#263 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08792500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08794200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=DISPLAY
0.08806900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#265 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08822000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#266 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08825300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`:0.0'
0.08827100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#266 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08828700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#265 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08830200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08832000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=:0.0
0.08844700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#267 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08849300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#267 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08851000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=LESSCLOSE, i-value=/usr/bin/lesspipe %s %s
0.08863600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#268 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08878700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#269 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08887100 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`LESSCLOSE'
0.08889100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#269 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08890700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#268 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08892200 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08894100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=LESSCLOSE
0.08906900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#270 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08922100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#271 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08926800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/usr/bin/lesspipe %s %s'
0.08928100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#271 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08929100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#270 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08930100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.08932100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/usr/bin/lesspipe %s %s
0.08945500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#272 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08949600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#272 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08952500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=COLORTERM, i-value=
0.08965200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#273 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08980400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#274 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08983800 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`COLORTERM'
0.08985600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#274 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.08987100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#273 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.08988700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.08990500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=COLORTERM
0.09003100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#275 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09018300 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#276 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09021600 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`'
0.09023400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#276 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09024900 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#275 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09026500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.09028100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=
0.09040700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#277 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09044100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#277 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09045800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=OLDPWD, i-value=/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk
0.09060500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#278 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09075700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#279 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09079000 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`OLDPWD'
0.09080700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#279 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09082300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#278 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09083800 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.09085500 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=OLDPWD
0.09098100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#280 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09112600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#281 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09115400 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk'
0.09116600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#281 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09118100 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#280 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09119600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.09121600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk
0.09134200 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#282 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09137500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#282 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09139100 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:39: i->key=_, i-value=/usr/bin/js
0.09151600 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#283 convert<Glib::ustring, std::string> (value) at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09167900 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#284 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09171300 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`_'
0.09173000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#284 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09174500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#283 convert<Glib::ustring, std::string> at 0x80727c5 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09176000 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:41: normalizing key...
0.09177700 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:43: key=_
0.09190300 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: SOF#285 convert<Glib::ustring, std::string> (value) at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09205400 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: SOF#286 do_string_convert_to_ustring (value) at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09208500 0104 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:258: buf=`/usr/bin/js'
0.09209600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:254: EOF#286 do_string_convert_to_ustring at 0x807151d in Glib::ustring sendanor::convert<Glib::ustring, std::string>(std::string const&) from js
0.09210500 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:82: EOF#285 convert<Glib::ustring, std::string> at 0x8072b57 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09211400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:45: normalizing value...
0.09212600 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:47: value=/usr/bin/js
0.09227400 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: SOF#287 end () at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09230700 0102 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/env.h:140: EOF#287 end at 0x8072513 in openjs::core::parse_environ(char**, std::vector<std::pair<Glib::ustring, Glib::ustring>, std::allocator<std::pair<Glib::ustring, Glib::ustring> > >&) from js
0.09232400 0102 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:50: env_vector.size() = 55
0.09234000 0101 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/openjs/core/env.h:36: EOF#9 parse_environ at 0x805e834 in main from js
0.09235500 0003 [info ] js.cc:210: Preparing extensions
0.09299700 0101 [funct] ../../core/extension.h:60: SOF#288 extension () at 0xb4290fed in openjs::extensions::loader::loader(openjs::configuration const&) from /usr/lib/openjs/loader.so
0.09305500 0101 [funct] ../../core/extension.h:60: EOF#288 extension at 0xb4290fed in openjs::extensions::loader::loader(openjs::configuration const&) from /usr/lib/openjs/loader.so
0.09322500 0101 [funct] loader.cc:215: SOF#289 loader () at 0xb42a8034 in Modular::DLHandshake<openjs::extensions::loader>::DLHandshake() from /usr/lib/openjs/loader.so
0.09327200 0101 [funct] loader.cc:215: EOF#289 loader at 0xb42a8034 in Modular::DLHandshake<openjs::extensions::loader>::DLHandshake() from /usr/lib/openjs/loader.so
0.09338900 0101 [funct] loader.cc:221: SOF#290 init () at 0x805ea94 in main from js
0.09353300 0102 [funct] ../../core/v8_util.h:78: SOF#291 v8_init_object_template() () at 0xb4293a69 in openjs::extensions::loader::init(openjs::core::extension_context&) from /usr/lib/openjs/loader.so
0.09369300 0103 [funct] ../../core/v8_util.h:66: SOF#292 v8_init_function_template() () at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.09374900 0103 [funct] ../../core/v8_util.h:66: EOF#292 v8_init_function_template() at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.09377800 0102 [funct] ../../core/v8_util.h:78: EOF#291 v8_init_object_template() at 0xb4293a69 in openjs::extensions::loader::init(openjs::core::extension_context&) from /usr/lib/openjs/loader.so
0.09410400 0102 [funct] ../../core/v8_util.h:91: SOF#293 v8_init_object () at 0xb4293da4 in openjs::extensions::loader::init(openjs::core::extension_context&) from /usr/lib/openjs/loader.so
0.09413400 0103 [debug] ../../core/v8_util.h:92: 1
0.09414600 0103 [debug] ../../core/v8_util.h:94: 2
0.09416100 0103 [debug] ../../core/v8_util.h:96: 3
0.10147000 0103 [debug] ../../core/v8_util.h:98: 4
0.10149500 0103 [debug] ../../core/v8_util.h:100: 5
0.10151300 0103 [debug] ../../core/v8_util.h:102: 6
0.10152800 0102 [funct] ../../core/v8_util.h:91: EOF#293 v8_init_object at 0xb4293da4 in openjs::extensions::loader::init(openjs::core::extension_context&) from /usr/lib/openjs/loader.so
0.10210100 0102 [funct] ../../core/pointer_helpers.h:28: SOF#294 ptr_to_v8 (address=3217125712, type='openjs::core::extension_context*') at 0xb42942d3 in openjs::extensions::loader::init(openjs::core::extension_context&) from /usr/lib/openjs/loader.so
0.10235500 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#295 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.10252000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#296 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.10256100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#296 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.10258700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#295 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.10267100 0102 [funct] ../../core/pointer_helpers.h:28: EOF#294 ptr_to_v8 at 0xb42942d3 in openjs::extensions::loader::init(openjs::core::extension_context&) from /usr/lib/openjs/loader.so
0.10289100 0101 [funct] loader.cc:221: EOF#290 init at 0x805ea94 in main from js
0.10290900 0003 [info ] js.cc:223: Running /usr/lib/openjs/loader.js
0.10302500 0101 [funct] js.cc:67: SOF#297 run_script (source_file=`/usr/lib/openjs/loader.js') at 0x805ec14 in main from js
0.10315400 0102 [funct] js.cc:35: SOF#298 parse_source_code (source_file=`/usr/lib/openjs/loader.js') at 0x805c2df in openjs::core::run_script(Glib::ustring const&) from js
0.10331900 0102 [funct] js.cc:35: EOF#298 parse_source_code at 0x805c2df in openjs::core::run_script(Glib::ustring const&) from js
0.10345700 0102 [funct] js.cc:48: SOF#299 run_script (source_code=`/**
 * JavaScript part of the Loader extension
 */

/** */
function BinaryExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		this.ptr = Loader.extension_load_dl(Loader.extension_context, file);
		if(!this.ptr) throw "Failed to load: " + file;
	} else {
		return new BinaryExtension(file);
	}
}

/** Get extension ID */
BinaryExtension.prototype.id = function() {
	return Loader.extension_id(this.ptr);
}

/** Get extension name */
BinaryExtension.prototype.name = function() {
	return Loader.extension_name(this.ptr);
}

/** Get extension version */
BinaryExtension.prototype.version = function() {
	return Loader.extension_version(this.ptr);
}


/** */
function SourceExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		Loader.load_js(file);
	} else {
		return new SourceExtension(file);
	}
}

/** Get extension ID */
SourceExtension.prototype.id = function() {
}

/** Get extension name */
SourceExtension.prototype.name = function() {
}

/** Get extension version */
SourceExtension.prototype.version = function() {
}


/** */
function Extension(raw) {
	if(this instanceof arguments.callee) {
		this.raw = raw;
	} else {
		return new Extension(raw);
	}
}

/** Get extension name */
Extension.prototype.file = function() {
	return this.raw.file;
}

/** Get extension name */
Extension.prototype.id = function() {
	return this.raw.id();
}

/** Get extension name */
Extension.prototype.name = function() {
	return this.raw.name();
}

/** Get extension version */
Extension.prototype.version = function() {
	return this.raw.version();
}

/** Load extension from file */
Extension.load = function(name) {
	
	if(!Extension.cache) Extension.cache = {};
	
	if(Extension.cache[name]) return Extension.cache[name];
	
	// Helper functions
	function ifexists(f) { return Loader.file_exists(f) ? f : undefined; }
	
	// Check files
	var file = Loader.EXTENSION_PATH + "/" + name;
	var dep_file = ifexists(file + ".dep");
	var dl_file = ifexists(file + Loader.EXTENSION_SUFFIX);
	var js_file = ifexists(file + ".js");
	if(! (dl_file || js_file )) throw "No extension found: " + name;
	
	// Load all dependencies
	var deps = dep_file ? Loader.read_dep_file(dep_file) : [];
	for(i in deps) if(deps.hasOwnProperty(i)) {
		var dep_name = deps[i];
		Extension.load(dep_name);
	}
	
	// Load the extension itself
	var failed = [];
	var dl_ext, js_ext;
	if(dl_file) {
		dl_ext = new Extension( new BinaryExtension(dl_file) );
		if(!dl_ext) failed.push(dl_file);
	}
	
	if(js_file) {
		js_ext = new Extension( new SourceExtension(js_file) );
		if(!js_ext) failed.push(js_file);
	}
	
	if(failed.length != 0) throw "Failed to load: " + failed.join(", ");
	if(js_ext && dl_ext) {
		Extension.cache[name] = [js_ext, dl_ext];
	} else {
		Extension.cache[name] = js_ext || dl_ext;
	}
	return Extension.cache[name];
}

/* Load configured extensions */
Extension.start = function() {
	for(i in Loader.config.libraries) if(Loader.config.libraries.hasOwnProperty(i)) {
		Extension.load(Loader.config.libraries[i]);
	}
}

Extension.start();

/* EOF */
', source_file=`/usr/lib/openjs/loader.js') at 0x805c305 in openjs::core::run_script(Glib::ustring const&) from js
0.10363000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#300 convert<v8::Handle<v8::Value>,std::string> (value) at 0x805bc61 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.10378800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#301 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.10395900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#302 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10401300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/**
 * JavaScript part of the Loader extension
 */

/** */
function BinaryExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		this.ptr = Loader.extension_load_dl(Loader.extension_context, file);
		if(!this.ptr) throw "Failed to load: " + file;
	} else {
		return new BinaryExtension(file);
	}
}

/** Get extension ID */
BinaryExtension.prototype.id = function() {
	return Loader.extension_id(this.ptr);
}

/** Get extension name */
BinaryExtension.prototype.name = function() {
	return Loader.extension_name(this.ptr);
}

/** Get extension version */
BinaryExtension.prototype.version = function() {
	return Loader.extension_version(this.ptr);
}


/** */
function SourceExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		Loader.load_js(file);
	} else {
		return new SourceExtension(file);
	}
}

/** Get extension ID */
SourceExtension.prototype.id = function() {
}

/** Get extension name */
SourceExtension.prototype.name = function() {
}

/** Get extension version */
SourceExtension.prototype.version = function() {
}


/** */
function Extension(raw) {
	if(this instanceof arguments.callee) {
		this.raw = raw;
	} else {
		return new Extension(raw);
	}
}

/** Get extension name */
Extension.prototype.file = function() {
	return this.raw.file;
}

/** Get extension name */
Extension.prototype.id = function() {
	return this.raw.id();
}

/** Get extension name */
Extension.prototype.name = function() {
	return this.raw.name();
}

/** Get extension version */
Extension.prototype.version = function() {
	return this.raw.version();
}

/** Load extension from file */
Extension.load = function(name) {
	
	if(!Extension.cache) Extension.cache = {};
	
	if(Extension.cache[name]) return Extension.cache[name];
	
	// Helper functions
	function ifexists(f) { return Loader.file_exists(f) ? f : undefined; }
	
	// Check files
	var file = Loader.EXTENSION_PATH + "/" + name;
	var dep_file = ifexists(file + ".dep");
	var dl_file = ifexists(file + Loader.EXTENSION_SUFFIX);
	var js_file = ifexists(file + ".js");
	if(! (dl_file || js_file )) throw "No extension found: " + name;
	
	// Load all dependencies
	var deps = dep_file ? Loader.read_dep_file(dep_file) : [];
	for(i in deps) if(deps.hasOwnProperty(i)) {
		var dep_name = deps[i];
		Extension.load(dep_name);
	}
	
	// Load the extension itself
	var failed = [];
	var dl_ext, js_ext;
	if(dl_file) {
		dl_ext = new Extension( new BinaryExtension(dl_file) );
		if(!dl_ext) failed.push(dl_file);
	}
	
	if(js_file) {
		js_ext = new Extension( new SourceExtension(js_file) );
		if(!js_ext) failed.push(js_file);
	}
	
	if(failed.length != 0) throw "Failed to load: " + failed.join(", ");
	if(js_ext && dl_ext) {
		Extension.cache[name] = [js_ext, dl_ext];
	} else {
		Extension.cache[name] = js_ext || dl_ext;
	}
	return Extension.cache[name];
}

/* Load configured extensions */
Extension.start = function() {
	for(i in Loader.config.libraries) if(Loader.config.libraries.hasOwnProperty(i)) {
		Extension.load(Loader.config.libraries[i]);
	}
}

Extension.start();

/* EOF */
'
0.10404800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#302 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10406400 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/**
 * JavaScript part of the Loader extension
 */

/** */
function BinaryExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		this.ptr = Loader.extension_load_dl(Loader.extension_context, file);
		if(!this.ptr) throw "Failed to load: " + file;
	} else {
		return new BinaryExtension(file);
	}
}

/** Get extension ID */
BinaryExtension.prototype.id = function() {
	return Loader.extension_id(this.ptr);
}

/** Get extension name */
BinaryExtension.prototype.name = function() {
	return Loader.extension_name(this.ptr);
}

/** Get extension version */
BinaryExtension.prototype.version = function() {
	return Loader.extension_version(this.ptr);
}


/** */
function SourceExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		Loader.load_js(file);
	} else {
		return new SourceExtension(file);
	}
}

/** Get extension ID */
SourceExtension.prototype.id = function() {
}

/** Get extension name */
SourceExtension.prototype.name = function() {
}

/** Get extension version */
SourceExtension.prototype.version = function() {
}


/** */
function Extension(raw) {
	if(this instanceof arguments.callee) {
		this.raw = raw;
	} else {
		return new Extension(raw);
	}
}

/** Get extension name */
Extension.prototype.file = function() {
	return this.raw.file;
}

/** Get extension name */
Extension.prototype.id = function() {
	return this.raw.id();
}

/** Get extension name */
Extension.prototype.name = function() {
	return this.raw.name();
}

/** Get extension version */
Extension.prototype.version = function() {
	return this.raw.version();
}

/** Load extension from file */
Extension.load = function(name) {
	
	if(!Extension.cache) Extension.cache = {};
	
	if(Extension.cache[name]) return Extension.cache[name];
	
	// Helper functions
	function ifexists(f) { return Loader.file_exists(f) ? f : undefined; }
	
	// Check files
	var file = Loader.EXTENSION_PATH + "/" + name;
	var dep_file = ifexists(file + ".dep");
	var dl_file = ifexists(file + Loader.EXTENSION_SUFFIX);
	var js_file = ifexists(file + ".js");
	if(! (dl_file || js_file )) throw "No extension found: " + name;
	
	// Load all dependencies
	var deps = dep_file ? Loader.read_dep_file(dep_file) : [];
	for(i in deps) if(deps.hasOwnProperty(i)) {
		var dep_name = deps[i];
		Extension.load(dep_name);
	}
	
	// Load the extension itself
	var failed = [];
	var dl_ext, js_ext;
	if(dl_file) {
		dl_ext = new Extension( new BinaryExtension(dl_file) );
		if(!dl_ext) failed.push(dl_file);
	}
	
	if(js_file) {
		js_ext = new Extension( new SourceExtension(js_file) );
		if(!js_ext) failed.push(js_file);
	}
	
	if(failed.length != 0) throw "Failed to load: " + failed.join(", ");
	if(js_ext && dl_ext) {
		Extension.cache[name] = [js_ext, dl_ext];
	} else {
		Extension.cache[name] = js_ext || dl_ext;
	}
	return Extension.cache[name];
}

/* Load configured extensions */
Extension.start = function() {
	for(i in Loader.config.libraries) if(Loader.config.libraries.hasOwnProperty(i)) {
		Extension.load(Loader.config.libraries[i]);
	}
}

Extension.start();

/* EOF */
'
0.10424800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#303 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10448400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#303 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10464100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#304 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10476500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/**
 * JavaScript part of the Loader extension
 */

/** */
function BinaryExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		this.ptr = Loader.extension_load_dl(Loader.extension_context, file);
		if(!this.ptr) throw "Failed to load: " + file;
	} else {
		return new BinaryExtension(file);
	}
}

/** Get extension ID */
BinaryExtension.prototype.id = function() {
	return Loader.extension_id(this.ptr);
}

/** Get extension name */
BinaryExtension.prototype.name = function() {
	return Loader.extension_name(this.ptr);
}

/** Get extension version */
BinaryExtension.prototype.version = function() {
	return Loader.extension_version(this.ptr);
}


/** */
function SourceExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		Loader.load_js(file);
	} else {
		return new SourceExtension(file);
	}
}

/** Get extension ID */
SourceExtension.prototype.id = function() {
}

/** Get extension name */
SourceExtension.prototype.name = function() {
}

/** Get extension version */
SourceExtension.prototype.version = function() {
}


/** */
function Extension(raw) {
	if(this instanceof arguments.callee) {
		this.raw = raw;
	} else {
		return new Extension(raw);
	}
}

/** Get extension name */
Extension.prototype.file = function() {
	return this.raw.file;
}

/** Get extension name */
Extension.prototype.id = function() {
	return this.raw.id();
}

/** Get extension name */
Extension.prototype.name = function() {
	return this.raw.name();
}

/** Get extension version */
Extension.prototype.version = function() {
	return this.raw.version();
}

/** Load extension from file */
Extension.load = function(name) {
	
	if(!Extension.cache) Extension.cache = {};
	
	if(Extension.cache[name]) return Extension.cache[name];
	
	// Helper functions
	function ifexists(f) { return Loader.file_exists(f) ? f : undefined; }
	
	// Check files
	var file = Loader.EXTENSION_PATH + "/" + name;
	var dep_file = ifexists(file + ".dep");
	var dl_file = ifexists(file + Loader.EXTENSION_SUFFIX);
	var js_file = ifexists(file + ".js");
	if(! (dl_file || js_file )) throw "No extension found: " + name;
	
	// Load all dependencies
	var deps = dep_file ? Loader.read_dep_file(dep_file) : [];
	for(i in deps) if(deps.hasOwnProperty(i)) {
		var dep_name = deps[i];
		Extension.load(dep_name);
	}
	
	// Load the extension itself
	var failed = [];
	var dl_ext, js_ext;
	if(dl_file) {
		dl_ext = new Extension( new BinaryExtension(dl_file) );
		if(!dl_ext) failed.push(dl_file);
	}
	
	if(js_file) {
		js_ext = new Extension( new SourceExtension(js_file) );
		if(!js_ext) failed.push(js_file);
	}
	
	if(failed.length != 0) throw "Failed to load: " + failed.join(", ");
	if(js_ext && dl_ext) {
		Extension.cache[name] = [js_ext, dl_ext];
	} else {
		Extension.cache[name] = js_ext || dl_ext;
	}
	return Extension.cache[name];
}

/* Load configured extensions */
Extension.start = function() {
	for(i in Loader.config.libraries) if(Loader.config.libraries.hasOwnProperty(i)) {
		Extension.load(Loader.config.libraries[i]);
	}
}

Extension.start();

/* EOF */
'
0.10480300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#304 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10482000 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/**
 * JavaScript part of the Loader extension
 */

/** */
function BinaryExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		this.ptr = Loader.extension_load_dl(Loader.extension_context, file);
		if(!this.ptr) throw "Failed to load: " + file;
	} else {
		return new BinaryExtension(file);
	}
}

/** Get extension ID */
BinaryExtension.prototype.id = function() {
	return Loader.extension_id(this.ptr);
}

/** Get extension name */
BinaryExtension.prototype.name = function() {
	return Loader.extension_name(this.ptr);
}

/** Get extension version */
BinaryExtension.prototype.version = function() {
	return Loader.extension_version(this.ptr);
}


/** */
function SourceExtension(file) {
	if(this instanceof arguments.callee) {
		this.file = file;
		Loader.load_js(file);
	} else {
		return new SourceExtension(file);
	}
}

/** Get extension ID */
SourceExtension.prototype.id = function() {
}

/** Get extension name */
SourceExtension.prototype.name = function() {
}

/** Get extension version */
SourceExtension.prototype.version = function() {
}


/** */
function Extension(raw) {
	if(this instanceof arguments.callee) {
		this.raw = raw;
	} else {
		return new Extension(raw);
	}
}

/** Get extension name */
Extension.prototype.file = function() {
	return this.raw.file;
}

/** Get extension name */
Extension.prototype.id = function() {
	return this.raw.id();
}

/** Get extension name */
Extension.prototype.name = function() {
	return this.raw.name();
}

/** Get extension version */
Extension.prototype.version = function() {
	return this.raw.version();
}

/** Load extension from file */
Extension.load = function(name) {
	
	if(!Extension.cache) Extension.cache = {};
	
	if(Extension.cache[name]) return Extension.cache[name];
	
	// Helper functions
	function ifexists(f) { return Loader.file_exists(f) ? f : undefined; }
	
	// Check files
	var file = Loader.EXTENSION_PATH + "/" + name;
	var dep_file = ifexists(file + ".dep");
	var dl_file = ifexists(file + Loader.EXTENSION_SUFFIX);
	var js_file = ifexists(file + ".js");
	if(! (dl_file || js_file )) throw "No extension found: " + name;
	
	// Load all dependencies
	var deps = dep_file ? Loader.read_dep_file(dep_file) : [];
	for(i in deps) if(deps.hasOwnProperty(i)) {
		var dep_name = deps[i];
		Extension.load(dep_name);
	}
	
	// Load the extension itself
	var failed = [];
	var dl_ext, js_ext;
	if(dl_file) {
		dl_ext = new Extension( new BinaryExtension(dl_file) );
		if(!dl_ext) failed.push(dl_file);
	}
	
	if(js_file) {
		js_ext = new Extension( new SourceExtension(js_file) );
		if(!js_ext) failed.push(js_file);
	}
	
	if(failed.length != 0) throw "Failed to load: " + failed.join(", ");
	if(js_ext && dl_ext) {
		Extension.cache[name] = [js_ext, dl_ext];
	} else {
		Extension.cache[name] = js_ext || dl_ext;
	}
	return Extension.cache[name];
}

/* Load configured extensions */
Extension.start = function() {
	for(i in Loader.config.libraries) if(Loader.config.libraries.hasOwnProperty(i)) {
		Extension.load(Loader.config.libraries[i]);
	}
}

Extension.start();

/* EOF */
'
0.10486000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#301 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.10487600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#300 convert<v8::Handle<v8::Value>,std::string> at 0x805bc61 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.10501100 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#305 convert<v8::Handle<v8::Value>,std::string> (value) at 0x805bcc3 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.10516300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#306 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.10533300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#307 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10536800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/usr/lib/openjs/loader.js'
0.10538500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#307 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10540100 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/usr/lib/openjs/loader.js'
0.10560400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#308 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10564400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#308 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10580000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#309 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10584100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/loader.js'
0.10587100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#309 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.10588800 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/usr/lib/openjs/loader.js'
0.10590400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#306 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.10592600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#305 convert<v8::Handle<v8::Value>,std::string> at 0x805bcc3 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.10999600 0102 [funct] js.cc:48: EOF#299 run_script at 0x805c305 in openjs::core::run_script(Glib::ustring const&) from js
0.11002200 0101 [funct] js.cc:67: EOF#297 run_script at 0x805ec14 in main from js
0.11003900 0003 [info ] js.cc:231: Running main.js
0.11015400 0101 [funct] js.cc:67: SOF#310 run_script (source_file=`main.js') at 0x805f0cf in main from js
0.11028900 0102 [funct] js.cc:35: SOF#311 parse_source_code (source_file=`main.js') at 0x805c2df in openjs::core::run_script(Glib::ustring const&) from js
0.11039000 0102 [funct] js.cc:35: EOF#311 parse_source_code at 0x805c2df in openjs::core::run_script(Glib::ustring const&) from js
0.11051100 0102 [funct] js.cc:48: SOF#312 run_script (source_code=`/* Example for gdome C API module for OpenJS
 * Copyright Jaakko Heusala <jheusala@sendanor.fi>
 */

Extension.load("system");
Extension.load("gdome");

function mysample(file, id, outfile) {
	/*  */
	system.stdout.writeln("Creating di");
	var di = GDOME.createDOMImplementation();
	
	/* I load a new document from the file name "exampleb.xml */
	system.stdout.writeln("Creating doc");
	var doc = di.createDocFromURI(file, CGDOME.GDOME_LOAD_COMPLETE_ATTRS);
	
	/* I get reference to the root element by id */
	system.stdout.writeln("getElementById");
	var root = doc.getElementById(id);
	if (root == 0) {
		system.stderr.writeln("No element found.");
		return 1;
	}
	
	/* Remove existing child nodes */
	system.stdout.writeln("Removing all existing child nodes...");
	while(root.hasChildNodes()) {
		var child = root.lastChild();
		root.removeChild(child);
	};
	
	/* Create new text node */
	system.stdout.writeln("Creating new text node");
	system.stdout.writeln("1/2");
	var el = doc.createTextNode("Input");
	system.stdout.writeln("2/2");
	
	root.appendChild(GdomeNode(el));
	
	/* Free? */
	system.stdout.writeln("Freeing");
	el.unref();
	root.unref();
	
	/* I save the modified document to a file named "exampleb_out.xml */
	system.stdout.writeln("Saving to file: " + outfile);
	di.saveDocToFile(doc, outfile, CGDOME.GDOME_SAVE_STANDARD);
		
	system.stdout.writeln("Freeing more");
	doc.unref();
	di.unref();
}

/** Test main */
function main(args) {
	
	if(3>=args.length) {
		system.stderr.writeln("USAGE: ./main.js FILE ID OUTFILE COUNTS");
		return 1;
	}
	
	var file = args[1];
	var id = args[2];
	var outfile = args[3];
	var counts = parseInt(counts, 10) || 1;
	
	system.stdout.writeln("file: "+file);
	system.stdout.writeln("id:   "+id);
	system.stdout.writeln("outfile: "+outfile);
	system.stdout.writeln("counts: "+counts);
	
	try {
		for(var i=0; i<counts; ++i) {
			mysample(file, id, outfile);
		}
		return 0;
	} catch(e) {
		system.stderr.writeln("Error: " + e);
		return 1;
	}
}

system.exit(main(system.args));

/* EOF */
', source_file=`main.js') at 0x805c305 in openjs::core::run_script(Glib::ustring const&) from js
0.11067700 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#313 convert<v8::Handle<v8::Value>,std::string> (value) at 0x805bc61 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.11083700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#314 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.11102200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#315 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11106600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/* Example for gdome C API module for OpenJS
 * Copyright Jaakko Heusala <jheusala@sendanor.fi>
 */

Extension.load("system");
Extension.load("gdome");

function mysample(file, id, outfile) {
	/*  */
	system.stdout.writeln("Creating di");
	var di = GDOME.createDOMImplementation();
	
	/* I load a new document from the file name "exampleb.xml */
	system.stdout.writeln("Creating doc");
	var doc = di.createDocFromURI(file, CGDOME.GDOME_LOAD_COMPLETE_ATTRS);
	
	/* I get reference to the root element by id */
	system.stdout.writeln("getElementById");
	var root = doc.getElementById(id);
	if (root == 0) {
		system.stderr.writeln("No element found.");
		return 1;
	}
	
	/* Remove existing child nodes */
	system.stdout.writeln("Removing all existing child nodes...");
	while(root.hasChildNodes()) {
		var child = root.lastChild();
		root.removeChild(child);
	};
	
	/* Create new text node */
	system.stdout.writeln("Creating new text node");
	system.stdout.writeln("1/2");
	var el = doc.createTextNode("Input");
	system.stdout.writeln("2/2");
	
	root.appendChild(GdomeNode(el));
	
	/* Free? */
	system.stdout.writeln("Freeing");
	el.unref();
	root.unref();
	
	/* I save the modified document to a file named "exampleb_out.xml */
	system.stdout.writeln("Saving to file: " + outfile);
	di.saveDocToFile(doc, outfile, CGDOME.GDOME_SAVE_STANDARD);
		
	system.stdout.writeln("Freeing more");
	doc.unref();
	di.unref();
}

/** Test main */
function main(args) {
	
	if(3>=args.length) {
		system.stderr.writeln("USAGE: ./main.js FILE ID OUTFILE COUNTS");
		return 1;
	}
	
	var file = args[1];
	var id = args[2];
	var outfile = args[3];
	var counts = parseInt(counts, 10) || 1;
	
	system.stdout.writeln("file: "+file);
	system.stdout.writeln("id:   "+id);
	system.stdout.writeln("outfile: "+outfile);
	system.stdout.writeln("counts: "+counts);
	
	try {
		for(var i=0; i<counts; ++i) {
			mysample(file, id, outfile);
		}
		return 0;
	} catch(e) {
		system.stderr.writeln("Error: " + e);
		return 1;
	}
}

system.exit(main(system.args));

/* EOF */
'
0.11108400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#315 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11109300 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/* Example for gdome C API module for OpenJS
 * Copyright Jaakko Heusala <jheusala@sendanor.fi>
 */

Extension.load("system");
Extension.load("gdome");

function mysample(file, id, outfile) {
	/*  */
	system.stdout.writeln("Creating di");
	var di = GDOME.createDOMImplementation();
	
	/* I load a new document from the file name "exampleb.xml */
	system.stdout.writeln("Creating doc");
	var doc = di.createDocFromURI(file, CGDOME.GDOME_LOAD_COMPLETE_ATTRS);
	
	/* I get reference to the root element by id */
	system.stdout.writeln("getElementById");
	var root = doc.getElementById(id);
	if (root == 0) {
		system.stderr.writeln("No element found.");
		return 1;
	}
	
	/* Remove existing child nodes */
	system.stdout.writeln("Removing all existing child nodes...");
	while(root.hasChildNodes()) {
		var child = root.lastChild();
		root.removeChild(child);
	};
	
	/* Create new text node */
	system.stdout.writeln("Creating new text node");
	system.stdout.writeln("1/2");
	var el = doc.createTextNode("Input");
	system.stdout.writeln("2/2");
	
	root.appendChild(GdomeNode(el));
	
	/* Free? */
	system.stdout.writeln("Freeing");
	el.unref();
	root.unref();
	
	/* I save the modified document to a file named "exampleb_out.xml */
	system.stdout.writeln("Saving to file: " + outfile);
	di.saveDocToFile(doc, outfile, CGDOME.GDOME_SAVE_STANDARD);
		
	system.stdout.writeln("Freeing more");
	doc.unref();
	di.unref();
}

/** Test main */
function main(args) {
	
	if(3>=args.length) {
		system.stderr.writeln("USAGE: ./main.js FILE ID OUTFILE COUNTS");
		return 1;
	}
	
	var file = args[1];
	var id = args[2];
	var outfile = args[3];
	var counts = parseInt(counts, 10) || 1;
	
	system.stdout.writeln("file: "+file);
	system.stdout.writeln("id:   "+id);
	system.stdout.writeln("outfile: "+outfile);
	system.stdout.writeln("counts: "+counts);
	
	try {
		for(var i=0; i<counts; ++i) {
			mysample(file, id, outfile);
		}
		return 0;
	} catch(e) {
		system.stderr.writeln("Error: " + e);
		return 1;
	}
}

system.exit(main(system.args));

/* EOF */
'
0.11126800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#316 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11148100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#316 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11164100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#317 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11173100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/* Example for gdome C API module for OpenJS
 * Copyright Jaakko Heusala <jheusala@sendanor.fi>
 */

Extension.load("system");
Extension.load("gdome");

function mysample(file, id, outfile) {
	/*  */
	system.stdout.writeln("Creating di");
	var di = GDOME.createDOMImplementation();
	
	/* I load a new document from the file name "exampleb.xml */
	system.stdout.writeln("Creating doc");
	var doc = di.createDocFromURI(file, CGDOME.GDOME_LOAD_COMPLETE_ATTRS);
	
	/* I get reference to the root element by id */
	system.stdout.writeln("getElementById");
	var root = doc.getElementById(id);
	if (root == 0) {
		system.stderr.writeln("No element found.");
		return 1;
	}
	
	/* Remove existing child nodes */
	system.stdout.writeln("Removing all existing child nodes...");
	while(root.hasChildNodes()) {
		var child = root.lastChild();
		root.removeChild(child);
	};
	
	/* Create new text node */
	system.stdout.writeln("Creating new text node");
	system.stdout.writeln("1/2");
	var el = doc.createTextNode("Input");
	system.stdout.writeln("2/2");
	
	root.appendChild(GdomeNode(el));
	
	/* Free? */
	system.stdout.writeln("Freeing");
	el.unref();
	root.unref();
	
	/* I save the modified document to a file named "exampleb_out.xml */
	system.stdout.writeln("Saving to file: " + outfile);
	di.saveDocToFile(doc, outfile, CGDOME.GDOME_SAVE_STANDARD);
		
	system.stdout.writeln("Freeing more");
	doc.unref();
	di.unref();
}

/** Test main */
function main(args) {
	
	if(3>=args.length) {
		system.stderr.writeln("USAGE: ./main.js FILE ID OUTFILE COUNTS");
		return 1;
	}
	
	var file = args[1];
	var id = args[2];
	var outfile = args[3];
	var counts = parseInt(counts, 10) || 1;
	
	system.stdout.writeln("file: "+file);
	system.stdout.writeln("id:   "+id);
	system.stdout.writeln("outfile: "+outfile);
	system.stdout.writeln("counts: "+counts);
	
	try {
		for(var i=0; i<counts; ++i) {
			mysample(file, id, outfile);
		}
		return 0;
	} catch(e) {
		system.stderr.writeln("Error: " + e);
		return 1;
	}
}

system.exit(main(system.args));

/* EOF */
'
0.11175500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#317 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11177100 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/* Example for gdome C API module for OpenJS
 * Copyright Jaakko Heusala <jheusala@sendanor.fi>
 */

Extension.load("system");
Extension.load("gdome");

function mysample(file, id, outfile) {
	/*  */
	system.stdout.writeln("Creating di");
	var di = GDOME.createDOMImplementation();
	
	/* I load a new document from the file name "exampleb.xml */
	system.stdout.writeln("Creating doc");
	var doc = di.createDocFromURI(file, CGDOME.GDOME_LOAD_COMPLETE_ATTRS);
	
	/* I get reference to the root element by id */
	system.stdout.writeln("getElementById");
	var root = doc.getElementById(id);
	if (root == 0) {
		system.stderr.writeln("No element found.");
		return 1;
	}
	
	/* Remove existing child nodes */
	system.stdout.writeln("Removing all existing child nodes...");
	while(root.hasChildNodes()) {
		var child = root.lastChild();
		root.removeChild(child);
	};
	
	/* Create new text node */
	system.stdout.writeln("Creating new text node");
	system.stdout.writeln("1/2");
	var el = doc.createTextNode("Input");
	system.stdout.writeln("2/2");
	
	root.appendChild(GdomeNode(el));
	
	/* Free? */
	system.stdout.writeln("Freeing");
	el.unref();
	root.unref();
	
	/* I save the modified document to a file named "exampleb_out.xml */
	system.stdout.writeln("Saving to file: " + outfile);
	di.saveDocToFile(doc, outfile, CGDOME.GDOME_SAVE_STANDARD);
		
	system.stdout.writeln("Freeing more");
	doc.unref();
	di.unref();
}

/** Test main */
function main(args) {
	
	if(3>=args.length) {
		system.stderr.writeln("USAGE: ./main.js FILE ID OUTFILE COUNTS");
		return 1;
	}
	
	var file = args[1];
	var id = args[2];
	var outfile = args[3];
	var counts = parseInt(counts, 10) || 1;
	
	system.stdout.writeln("file: "+file);
	system.stdout.writeln("id:   "+id);
	system.stdout.writeln("outfile: "+outfile);
	system.stdout.writeln("counts: "+counts);
	
	try {
		for(var i=0; i<counts; ++i) {
			mysample(file, id, outfile);
		}
		return 0;
	} catch(e) {
		system.stderr.writeln("Error: " + e);
		return 1;
	}
}

system.exit(main(system.args));

/* EOF */
'
0.11181000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#314 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.11182600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#313 convert<v8::Handle<v8::Value>,std::string> at 0x805bc61 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.11299600 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#318 convert<v8::Handle<v8::Value>,std::string> (value) at 0x805bcc3 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.11316200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#319 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.11333400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#320 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11337000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`main.js'
0.11338800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#320 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11340400 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`main.js'
0.11355800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#321 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11359800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#321 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11377100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#322 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11381500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`main.js'
0.11383300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#322 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.11384900 0105 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`main.js'
0.11386500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#319 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.11388000 0103 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#318 convert<v8::Handle<v8::Value>,std::string> at 0x805bcc3 in openjs::core::run_script(Glib::ustring const&, Glib::ustring const&) from js
0.11980100 0103 [funct] loader.cc:155: SOF#323 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12001800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#324 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12023100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#325 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12027700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/system.dep'
0.12029500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#325 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12031100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#324 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12036800 0103 [funct] loader.cc:155: EOF#323 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.12071800 0103 [funct] loader.cc:155: SOF#326 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12091900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#327 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12112400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#328 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12116200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/system.so'
0.12118100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#328 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12119700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#327 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12123300 0103 [funct] loader.cc:155: EOF#326 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.12144900 0103 [funct] loader.cc:155: SOF#329 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12165000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#330 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12186000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#331 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12190400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/system.js'
0.12192300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#331 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12193900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#330 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12197400 0103 [funct] loader.cc:155: EOF#329 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.12221400 0103 [funct] loader.cc:131: SOF#332 do_v8_readfile (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12241500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#333 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12264600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#334 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12269200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/system.dep'
0.12271200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#334 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12272800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#333 convert<std::string,v8::Local<v8::Value>> at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12297100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#335 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12318100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#336 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.12322000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#336 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.12323700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#335 convert<v8::Handle<v8::Value>,std::string> at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12343700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#337 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12366300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#338 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.12370200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#338 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.12371900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#337 convert<v8::Handle<v8::Value>,std::string> at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12376300 0103 [funct] loader.cc:131: EOF#332 do_v8_readfile at 0xb74f574d from /usr/lib/libv8_g.so
0.12459800 0103 [funct] loader.cc:155: SOF#339 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12480100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#340 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12501400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#341 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12505900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicsys.dep'
0.12507700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#341 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12508700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#340 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12511600 0103 [funct] loader.cc:155: EOF#339 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.12536100 0103 [funct] loader.cc:155: SOF#342 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12562100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#343 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12583400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#344 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12587900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicsys.so'
0.12589800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#344 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12592000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#343 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12595700 0103 [funct] loader.cc:155: EOF#342 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.12614400 0103 [funct] loader.cc:155: SOF#345 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12637000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#346 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12660600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#347 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12665000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicsys.js'
0.12666800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#347 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12668400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#346 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12671200 0103 [funct] loader.cc:155: EOF#345 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.12701300 0103 [funct] loader.cc:131: SOF#348 do_v8_readfile (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12721300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#349 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12742300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#350 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12746600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicsys.dep'
0.12748500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#350 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12750000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#349 convert<std::string,v8::Local<v8::Value>> at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12770900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#351 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12791900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#352 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.12795800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#352 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.12797500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#351 convert<v8::Handle<v8::Value>,std::string> at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12801400 0103 [funct] loader.cc:131: EOF#348 do_v8_readfile at 0xb74f574d from /usr/lib/libv8_g.so
0.12862500 0103 [funct] loader.cc:155: SOF#353 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12889100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#354 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12910100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#355 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12916500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicstream.dep'
0.12918300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#355 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12919900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#354 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12922700 0103 [funct] loader.cc:155: EOF#353 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.12942200 0103 [funct] loader.cc:155: SOF#356 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.12963100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#357 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12984300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#358 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12988600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicstream.so'
0.12990400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#358 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.12991900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#357 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.12995500 0103 [funct] loader.cc:155: EOF#356 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.13012500 0103 [funct] loader.cc:155: SOF#359 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.13032500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#360 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13053700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#361 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.13058000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicstream.js'
0.13059800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#361 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.13061300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#360 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13064000 0103 [funct] loader.cc:155: EOF#359 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.13313000 0103 [funct] loader.cc:27: SOF#362 v8_openjs_extension_load_dl (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.13334100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#363 ptr_from_v8 (a, a_type='openjs::core::extension_context*') at 0xb429b361 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13360900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#364 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.13383600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#365 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.13387900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`openjs::core::extension_context*'
0.13389700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#365 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.13391200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#364 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.13437600 0105 [debug] ../../core/pointer_helpers.h:51: type='openjs::core::extension_context*', address='3217125712'
0.13440100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#363 ptr_from_v8 at 0xb429b361 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13459100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#366 convert<std::string,v8::Local<v8::Value>> (value) at 0xb429b3af in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13480500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#367 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.13485000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicstream.so'
0.13486800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#367 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.13488300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#366 convert<std::string,v8::Local<v8::Value>> at 0xb429b3af in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13554700 0104 [funct] ../../core/extension.h:60: SOF#368 extension () at 0xb4253ced in openjs::extensions::basicstream::basicstream(openjs::configuration const&) from /usr/lib/openjs/basicstream.so
0.13558600 0104 [funct] ../../core/extension.h:60: EOF#368 extension at 0xb4253ced in openjs::extensions::basicstream::basicstream(openjs::configuration const&) from /usr/lib/openjs/basicstream.so
0.13582900 0104 [funct] basicstream.cc:31: SOF#369 basicstream () at 0xb426a954 in Modular::DLHandshake<openjs::extensions::basicstream>::DLHandshake() from /usr/lib/openjs/basicstream.so
0.13588600 0104 [funct] basicstream.cc:31: EOF#369 basicstream at 0xb426a954 in Modular::DLHandshake<openjs::extensions::basicstream>::DLHandshake() from /usr/lib/openjs/basicstream.so
0.13608800 0104 [funct] basicstream.cc:232: SOF#370 init () at 0xb429b406 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13631600 0105 [funct] ../../core/v8_util.h:78: SOF#371 v8_init_object_template() () at 0xb42568b3 in openjs::extensions::basicstream::init(openjs::core::extension_context&) from /usr/lib/openjs/basicstream.so
0.13654400 0106 [funct] ../../core/v8_util.h:66: SOF#372 v8_init_function_template() () at 0xb426bef3 in void openjs::v8_init_object_template<v8::Persistent<v8::FunctionTemplate>, v8::Persistent<v8::ObjectTemplate> >(v8::Persistent<v8::FunctionTemplate>&, v8::Persistent<v8::ObjectTemplate>&) from /usr/lib/openjs/basicstream.so
0.13660300 0106 [funct] ../../core/v8_util.h:66: EOF#372 v8_init_function_template() at 0xb426bef3 in void openjs::v8_init_object_template<v8::Persistent<v8::FunctionTemplate>, v8::Persistent<v8::ObjectTemplate> >(v8::Persistent<v8::FunctionTemplate>&, v8::Persistent<v8::ObjectTemplate>&) from /usr/lib/openjs/basicstream.so
0.13662700 0105 [funct] ../../core/v8_util.h:78: EOF#371 v8_init_object_template() at 0xb42568b3 in openjs::extensions::basicstream::init(openjs::core::extension_context&) from /usr/lib/openjs/basicstream.so
0.13692900 0105 [funct] ../../core/v8_util.h:91: SOF#373 v8_init_object () at 0xb4256ab3 in openjs::extensions::basicstream::init(openjs::core::extension_context&) from /usr/lib/openjs/basicstream.so
0.13696400 0106 [debug] ../../core/v8_util.h:92: 1
0.13698200 0106 [debug] ../../core/v8_util.h:94: 2
0.13700300 0106 [debug] ../../core/v8_util.h:96: 3
0.13767000 0106 [debug] ../../core/v8_util.h:98: 4
0.13769000 0106 [debug] ../../core/v8_util.h:100: 5
0.13770600 0106 [debug] ../../core/v8_util.h:102: 6
0.13772200 0105 [funct] ../../core/v8_util.h:91: EOF#373 v8_init_object at 0xb4256ab3 in openjs::extensions::basicstream::init(openjs::core::extension_context&) from /usr/lib/openjs/basicstream.so
0.13777800 0104 [funct] basicstream.cc:232: EOF#370 init at 0xb429b406 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13779600 0006 [info ] loader.cc:41: /usr/lib/openjs/basicstream.so: Dynamic library loaded
0.13798300 0104 [funct] ../../core/pointer_helpers.h:28: SOF#374 ptr_to_v8 (address=135157480, type='openjs::core::LoadedExtension*') at 0xb429b6a0 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13823200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#375 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.13845600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#376 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.13849600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#376 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.13851300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#375 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.13855500 0104 [funct] ../../core/pointer_helpers.h:28: EOF#374 ptr_to_v8 at 0xb429b6a0 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.13857600 0103 [funct] loader.cc:27: EOF#362 v8_openjs_extension_load_dl at 0xb74f574d from /usr/lib/libv8_g.so
0.13990900 0103 [funct] loader.cc:27: SOF#377 v8_openjs_extension_load_dl (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.14010600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#378 ptr_from_v8 (a, a_type='openjs::core::extension_context*') at 0xb429b361 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.14035100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#379 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.14057700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#380 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.14063300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`openjs::core::extension_context*'
0.14065100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#380 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.14066700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#379 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.14078100 0105 [debug] ../../core/pointer_helpers.h:51: type='openjs::core::extension_context*', address='3217125712'
0.14080100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#378 ptr_from_v8 at 0xb429b361 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.14098900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#381 convert<std::string,v8::Local<v8::Value>> (value) at 0xb429b3af in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.14120200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#382 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.14124600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/basicsys.so'
0.14126300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#382 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.14127800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#381 convert<std::string,v8::Local<v8::Value>> at 0xb429b3af in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.14186000 0104 [funct] ../../core/extension.h:60: SOF#383 extension () at 0xb421cedd in openjs::extensions::basicsys::basicsys(openjs::configuration const&) from /usr/lib/openjs/basicsys.so
0.14189800 0104 [funct] ../../core/extension.h:60: EOF#383 extension at 0xb421cedd in openjs::extensions::basicsys::basicsys(openjs::configuration const&) from /usr/lib/openjs/basicsys.so
0.14213300 0104 [funct] basicsys.cc:28: SOF#384 basicsys () at 0xb4237c64 in Modular::DLHandshake<openjs::extensions::basicsys>::DLHandshake() from /usr/lib/openjs/basicsys.so
0.14222400 0104 [funct] basicsys.cc:28: EOF#384 basicsys at 0xb4237c64 in Modular::DLHandshake<openjs::extensions::basicsys>::DLHandshake() from /usr/lib/openjs/basicsys.so
0.14241300 0104 [funct] basicsys.cc:197: SOF#385 init () at 0xb429b406 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.14264800 0105 [funct] ../../core/v8_util.h:78: SOF#386 v8_init_object_template() () at 0xb421da2b in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14288900 0106 [funct] ../../core/v8_util.h:66: SOF#387 v8_init_function_template() () at 0xb426bef3 in void openjs::v8_init_object_template<v8::Persistent<v8::FunctionTemplate>, v8::Persistent<v8::ObjectTemplate> >(v8::Persistent<v8::FunctionTemplate>&, v8::Persistent<v8::ObjectTemplate>&) from /usr/lib/openjs/basicstream.so
0.14292900 0106 [funct] ../../core/v8_util.h:66: EOF#387 v8_init_function_template() at 0xb426bef3 in void openjs::v8_init_object_template<v8::Persistent<v8::FunctionTemplate>, v8::Persistent<v8::ObjectTemplate> >(v8::Persistent<v8::FunctionTemplate>&, v8::Persistent<v8::ObjectTemplate>&) from /usr/lib/openjs/basicstream.so
0.14295200 0105 [funct] ../../core/v8_util.h:78: EOF#386 v8_init_object_template() at 0xb421da2b in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14332100 0105 [funct] ../../core/v8_util.h:91: SOF#388 v8_init_object () at 0xb421dd0f in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14335700 0106 [debug] ../../core/v8_util.h:92: 1
0.14337300 0106 [debug] ../../core/v8_util.h:94: 2
0.14338900 0106 [debug] ../../core/v8_util.h:96: 3
0.14438900 0106 [debug] ../../core/v8_util.h:98: 4
0.14440900 0106 [debug] ../../core/v8_util.h:100: 5
0.14442500 0106 [debug] ../../core/v8_util.h:102: 6
0.14444200 0105 [funct] ../../core/v8_util.h:91: EOF#388 v8_init_object at 0xb421dd0f in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14449900 0105 [debug] basicsys.cc:242: a_context.m_args.size() == 4
0.14452700 0105 [debug] basicsys.cc:248: a_context.m_args[0] == main.js
0.14473600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#389 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14496000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#390 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.14519400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#391 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14522900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`main.js'
0.14524600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#391 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14526100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`main.js'
0.14550100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#392 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14557000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#392 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14579000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#393 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14583000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`main.js'
0.14584800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#393 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14586300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`main.js'
0.14587900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#390 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.14589400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#389 convert<v8::Handle<v8::Value>,std::string> at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14593400 0105 [debug] basicsys.cc:248: a_context.m_args[1] == example.html
0.14614100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#394 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14638200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#395 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.14661500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#396 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14665100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`example.html'
0.14666700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#396 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14668300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`example.html'
0.14689900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#397 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14693700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#397 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14715000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#398 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14719100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`example.html'
0.14720800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#398 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14722400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`example.html'
0.14723900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#395 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.14725400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#394 convert<v8::Handle<v8::Value>,std::string> at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14728000 0105 [debug] basicsys.cc:248: a_context.m_args[2] == content
0.14747900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#399 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14770200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#400 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.14795100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#401 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14798200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`content'
0.14799300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#401 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14800500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`content'
0.14824700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#402 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14828600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#402 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14850300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#403 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14854400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`content'
0.14856100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#403 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14857700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`content'
0.14859200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#400 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.14860700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#399 convert<v8::Handle<v8::Value>,std::string> at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14863300 0105 [debug] basicsys.cc:248: a_context.m_args[3] == out.html
0.14889500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#404 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.14911500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#405 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.14937200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#406 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14940900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`out.html'
0.14942700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#406 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14944200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`out.html'
0.14966600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#407 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14970400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#407 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14992200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#408 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.14996300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`out.html'
0.14998000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#408 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15000700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`out.html'
0.15002300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#405 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15003900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#404 convert<v8::Handle<v8::Value>,std::string> at 0xb421e323 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15016000 0105 [debug] basicsys.cc:257: a_context.m_environ.size() == 55
0.15019000 0105 [debug] basicsys.cc:263: a_context.m_environ[0].first == 'LC_PAPER'
0.15020900 0105 [debug] basicsys.cc:264: a_context.m_environ[0].second == 'fi_FI.UTF-8'
0.15040900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#409 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15063200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#410 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15086700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#411 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15090200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`fi_FI.UTF-8'
0.15091900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#411 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15093400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`fi_FI.UTF-8'
0.15114500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#412 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15118300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#412 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15140100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#413 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15144100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`fi_FI.UTF-8'
0.15145900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#413 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15147400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`fi_FI.UTF-8'
0.15149000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#410 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15150400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#409 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15169900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#414 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15193300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#415 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15219900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#416 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15223600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`LC_PAPER'
0.15225300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#416 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15226800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`LC_PAPER'
0.15248500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#417 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15252300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#417 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15276000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#418 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15280200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`LC_PAPER'
0.15282600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#418 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15284100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`LC_PAPER'
0.15285700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#415 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15287200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#414 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15295000 0105 [debug] basicsys.cc:263: a_context.m_environ[1].first == 'SSH_AGENT_PID'
0.15297000 0105 [debug] basicsys.cc:264: a_context.m_environ[1].second == '3834'
0.15316400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#419 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15338700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#420 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15362000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#421 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15365500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`3834'
0.15367200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#421 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15368700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`3834'
0.15391600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#422 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15395400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#422 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15416600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#423 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15420600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`3834'
0.15422300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#423 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15423900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`3834'
0.15425400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#420 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15426900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#419 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15446400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#424 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15468600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#425 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15491800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#426 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15495300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`SSH_AGENT_PID'
0.15497000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#426 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15498500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`SSH_AGENT_PID'
0.15520100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#427 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15523800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#427 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15545700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#428 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15554800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`SSH_AGENT_PID'
0.15556700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#428 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15558200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`SSH_AGENT_PID'
0.15559800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#425 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15562400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#424 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15571400 0105 [debug] basicsys.cc:263: a_context.m_environ[2].first == 'KDE_MULTIHEAD'
0.15573500 0105 [debug] basicsys.cc:264: a_context.m_environ[2].second == 'false'
0.15594700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#429 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15618800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#430 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15642200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#431 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15645600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`false'
0.15647300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#431 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15648800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`false'
0.15670400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#432 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15674200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#432 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15696000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#433 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15700000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`false'
0.15701800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#433 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15703300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`false'
0.15704900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#430 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15706400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#429 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15725900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#434 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15748100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#435 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15772600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#436 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15776100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`KDE_MULTIHEAD'
0.15777800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#436 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15779300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`KDE_MULTIHEAD'
0.15800900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#437 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15804700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#437 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15826500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#438 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15830500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`KDE_MULTIHEAD'
0.15832300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#438 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15833900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`KDE_MULTIHEAD'
0.15835400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#435 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15836900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#434 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15846500 0105 [debug] basicsys.cc:263: a_context.m_environ[3].first == 'SELINUX_INIT'
0.15848500 0105 [debug] basicsys.cc:264: a_context.m_environ[3].second == 'YES'
0.15876900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#439 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.15905900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#440 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15930000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#441 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15933700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`YES'
0.15935400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#441 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15937000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`YES'
0.15959900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#442 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15965000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#442 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15986900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#443 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15990900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`YES'
0.15992700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#443 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.15994200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`YES'
0.15995800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#440 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.15997300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#439 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16016100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#444 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16038300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#445 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16061600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#446 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16065100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`SELINUX_INIT'
0.16066800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#446 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16068300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`SELINUX_INIT'
0.16089900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#447 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16093700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#447 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16114900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#448 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16118900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`SELINUX_INIT'
0.16120700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#448 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16122200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`SELINUX_INIT'
0.16123800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#445 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16126400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#444 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16137400 0105 [debug] basicsys.cc:263: a_context.m_environ[4].first == 'CONSOLE'
0.16139400 0105 [debug] basicsys.cc:264: a_context.m_environ[4].second == '/dev/console'
0.16159300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#449 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16181600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#450 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16311100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#451 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16315200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/dev/console'
0.16316300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#451 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16317300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/dev/console'
0.16340300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#452 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16344400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#452 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16366300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#453 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16370500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/dev/console'
0.16372300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#453 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16373800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/dev/console'
0.16375300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#450 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16376800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#449 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16396400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#454 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16418600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#455 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16442100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#456 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16447800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`CONSOLE'
0.16449500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#456 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16451000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`CONSOLE'
0.16472700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#457 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16476400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#457 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16498300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#458 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16502300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`CONSOLE'
0.16504100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#458 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16505600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`CONSOLE'
0.16507200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#455 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16508700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#454 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16520900 0105 [debug] basicsys.cc:263: a_context.m_environ[5].first == 'GPG_AGENT_INFO'
0.16523000 0105 [debug] basicsys.cc:264: a_context.m_environ[5].second == '/tmp/gpg-yNHTY6/S.gpg-agent:4864:1'
0.16543000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#459 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16571200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#460 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16595500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#461 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16599300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/tmp/gpg-yNHTY6/S.gpg-agent:4864:1'
0.16601000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#461 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16602600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/tmp/gpg-yNHTY6/S.gpg-agent:4864:1'
0.16625600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#462 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16629600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#462 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16652700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#463 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16656900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/tmp/gpg-yNHTY6/S.gpg-agent:4864:1'
0.16658700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#463 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16660200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/tmp/gpg-yNHTY6/S.gpg-agent:4864:1'
0.16661700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#460 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16663200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#459 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16682700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#464 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16704900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#465 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16728200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#466 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16731700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`GPG_AGENT_INFO'
0.16733400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#466 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16734900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`GPG_AGENT_INFO'
0.16756500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#467 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16760300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#467 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16782100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#468 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16786200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GPG_AGENT_INFO'
0.16788000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#468 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16789500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`GPG_AGENT_INFO'
0.16791000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#465 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16792500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#464 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16806000 0105 [debug] basicsys.cc:263: a_context.m_environ[6].first == 'SHELL'
0.16808100 0105 [debug] basicsys.cc:264: a_context.m_environ[6].second == '/bin/bash'
0.16828000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#469 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16850200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#470 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16873500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#471 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16877000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/bin/bash'
0.16878700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#471 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16880200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/bin/bash'
0.16908400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#472 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16911800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#472 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16936000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#473 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16940300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/bin/bash'
0.16942100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#473 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.16943700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/bin/bash'
0.16945300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#470 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.16946800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#469 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16967000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#474 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.16989200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#475 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17012000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#476 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17016300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`SHELL'
0.17018000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#476 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17019600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`SHELL'
0.17041300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#477 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17045100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#477 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17067000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#478 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17071000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`SHELL'
0.17072700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#478 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17074300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`SHELL'
0.17075800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#475 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17077300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#474 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17090400 0105 [debug] basicsys.cc:263: a_context.m_environ[7].first == 'TERM'
0.17092500 0105 [debug] basicsys.cc:264: a_context.m_environ[7].second == 'screen'
0.17111800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#479 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17134000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#480 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17157300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#481 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17160800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`screen'
0.17162500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#481 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17164000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`screen'
0.17185700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#482 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17189500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#482 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17210700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#483 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17219600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`screen'
0.17221600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#483 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17223100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`screen'
0.17224700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#480 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17226100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#479 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17245800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#484 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17269500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#485 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17294000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#486 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17297700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`TERM'
0.17299400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#486 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17300900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`TERM'
0.17322400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#487 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17326100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#487 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17347900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#488 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17351900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`TERM'
0.17353600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#488 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17355200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`TERM'
0.17356700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#485 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17358200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#484 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17371300 0105 [debug] basicsys.cc:263: a_context.m_environ[8].first == 'rootmnt'
0.17374500 0105 [debug] basicsys.cc:264: a_context.m_environ[8].second == '/root'
0.17394400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#489 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17416100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#490 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17439400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#491 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17442900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/root'
0.17444500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#491 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17446100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/root'
0.17467800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#492 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17471500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#492 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17493300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#493 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17497300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/root'
0.17499000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#493 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17500600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/root'
0.17502100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#490 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17503600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#489 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17523000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#494 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17545200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#495 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17573900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#496 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17577500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`rootmnt'
0.17579200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#496 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17581900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`rootmnt'
0.17606200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#497 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17609600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#497 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17632200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#498 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17636200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`rootmnt'
0.17638000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#498 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17639500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`rootmnt'
0.17641100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#495 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17642600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#494 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17656600 0105 [debug] basicsys.cc:263: a_context.m_environ[9].first == 'GTK2_RC_FILES'
0.17658600 0105 [debug] basicsys.cc:264: a_context.m_environ[9].second == '/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0'
0.17678600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#499 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17700800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#500 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17724200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#501 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17727700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0'
0.17729400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#501 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17730900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0'
0.17752500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#502 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17756800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#502 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17778600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#503 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17784100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0'
0.17785900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#503 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17787400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/etc/gtk-2.0/gtkrc:/home/users/jhh/.gtkrc-2.0:/home/users/jhh/.kde/share/config/gtkrc-2.0'
0.17789000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#500 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17790500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#499 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17809400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#504 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17831700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#505 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17855000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#506 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17858500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`GTK2_RC_FILES'
0.17860200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#506 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17861700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`GTK2_RC_FILES'
0.17889400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#507 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17893400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#507 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17914800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#508 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17918800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GTK2_RC_FILES'
0.17920600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#508 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.17922100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`GTK2_RC_FILES'
0.17923100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#505 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.17925300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#504 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17949800 0105 [debug] basicsys.cc:263: a_context.m_environ[10].first == 'GS_LIB'
0.17951800 0105 [debug] basicsys.cc:264: a_context.m_environ[10].second == '/home/users/jhh/.fonts'
0.17971800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#509 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.17994000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#510 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18016800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#511 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18020400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/home/users/jhh/.fonts'
0.18022100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#511 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18023600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/home/users/jhh/.fonts'
0.18045200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#512 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18049100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#512 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18070900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#513 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18075000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/home/users/jhh/.fonts'
0.18076800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#513 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18078300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/home/users/jhh/.fonts'
0.18079800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#510 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18081400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#509 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18100800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#514 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18122900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#515 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18146200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#516 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18149700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`GS_LIB'
0.18152200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#516 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18153800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`GS_LIB'
0.18175500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#517 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18179200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#517 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18201100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#518 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18205000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GS_LIB'
0.18206800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#518 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18208300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`GS_LIB'
0.18209300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#515 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18210200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#514 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18213600 0105 [debug] basicsys.cc:263: a_context.m_environ[11].first == 'GTK_RC_FILES'
0.18218700 0105 [debug] basicsys.cc:264: a_context.m_environ[11].second == '/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc'
0.18238800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#519 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18262300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#520 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18287400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#521 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18290900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc'
0.18292700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#521 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18294200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc'
0.18315100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#522 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18319400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#522 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18342400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#523 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18346600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc'
0.18348400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#523 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18349900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/etc/gtk/gtkrc:/home/users/jhh/.gtkrc:/home/users/jhh/.kde/share/config/gtkrc'
0.18351500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#520 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18352900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#519 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18372500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#524 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18394900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#525 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18418200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#526 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18421700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`GTK_RC_FILES'
0.18423400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#526 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18424900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`GTK_RC_FILES'
0.18446400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#527 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18450200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#527 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18472000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#528 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18476000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GTK_RC_FILES'
0.18477800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#528 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18479300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`GTK_RC_FILES'
0.18480900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#525 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18483500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#524 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18487700 0105 [debug] basicsys.cc:263: a_context.m_environ[12].first == 'WINDOWID'
0.18489700 0105 [debug] basicsys.cc:264: a_context.m_environ[12].second == '46137352'
0.18508900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#529 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18531200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#530 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18559600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#531 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18563300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`46137352'
0.18565000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#531 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18566500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`46137352'
0.18588200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#532 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18592600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#532 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18615800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#533 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18619900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`46137352'
0.18621600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#533 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18623100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`46137352'
0.18624700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#530 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18626200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#529 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18645600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#534 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18667900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#535 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18691100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#536 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18695900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`WINDOWID'
0.18697600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#536 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18699100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`WINDOWID'
0.18720800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#537 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18724500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#537 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18746300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#538 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18750300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`WINDOWID'
0.18752100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#538 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18753600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`WINDOWID'
0.18755200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#535 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18756700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#534 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18760900 0105 [debug] basicsys.cc:263: a_context.m_environ[13].first == 'KDE_FULL_SESSION'
0.18762800 0105 [debug] basicsys.cc:264: a_context.m_environ[13].second == 'true'
0.18782500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#539 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18804800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#540 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18828100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#541 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18831600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`true'
0.18833300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#541 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18834800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`true'
0.18856400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#542 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18860100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#542 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18889200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#543 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18893400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`true'
0.18895200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#543 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18896700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`true'
0.18898300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#540 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18899800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#539 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18919400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#544 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.18944400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#545 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.18968500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#546 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18972000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`KDE_FULL_SESSION'
0.18973700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#546 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.18975200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`KDE_FULL_SESSION'
0.18996800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#547 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19000600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#547 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19022500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#548 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19026500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`KDE_FULL_SESSION'
0.19028300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#548 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19029800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`KDE_FULL_SESSION'
0.19031400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#545 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19032800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#544 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19038200 0105 [debug] basicsys.cc:263: a_context.m_environ[14].first == 'USER'
0.19040200 0105 [debug] basicsys.cc:264: a_context.m_environ[14].second == 'jhh'
0.19059900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#549 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19082300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#550 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19105600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#551 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19108500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`jhh'
0.19109600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#551 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19110500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`jhh'
0.19132100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#552 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19135800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#552 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19157500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#553 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19161500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`jhh'
0.19163300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#553 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19164800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`jhh'
0.19166400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#550 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19167900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#549 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19187400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#554 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19209000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#555 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19235700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#556 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19239400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`USER'
0.19242400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#556 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19244000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`USER'
0.19267000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#557 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19271000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#557 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19293900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#558 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19298000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`USER'
0.19299700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#558 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19301200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`USER'
0.19302800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#555 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19304300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#554 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19308300 0105 [debug] basicsys.cc:263: a_context.m_environ[15].first == 'LS_COLORS'
0.19309700 0105 [debug] basicsys.cc:264: a_context.m_environ[15].second == 'no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
0.19330700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#559 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19352900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#560 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19376200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#561 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19380200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
0.19383600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#561 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19385100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
0.19407300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#562 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19417400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#562 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19439200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#563 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19445700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
0.19449300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#563 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19450900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.svgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
0.19453100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#560 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19454700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#559 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19474200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#564 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19496400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#565 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19522200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#566 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19525900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`LS_COLORS'
0.19527700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#566 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19529200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`LS_COLORS'
0.19556600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#567 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19560600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#567 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19582500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#568 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19586500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`LS_COLORS'
0.19589500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#568 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19591700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`LS_COLORS'
0.19592800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#565 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19594000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#564 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19598600 0105 [debug] basicsys.cc:263: a_context.m_environ[16].first == 'INIT_VERSION'
0.19600600 0105 [debug] basicsys.cc:264: a_context.m_environ[16].second == 'sysvinit-2.86'
0.19621700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#569 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19644000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#570 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19667200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#571 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19670700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`sysvinit-2.86'
0.19672300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#571 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19673800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`sysvinit-2.86'
0.19695500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#572 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19699300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#572 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19721000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#573 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19725000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`sysvinit-2.86'
0.19726800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#573 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19728300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`sysvinit-2.86'
0.19729900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#570 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19731400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#569 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19752100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#574 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19774300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#575 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19797500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#576 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19801100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`INIT_VERSION'
0.19802700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#576 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19804200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`INIT_VERSION'
0.19825800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#577 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19829600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#577 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19851400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#578 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19855400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`INIT_VERSION'
0.19857200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#578 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19858700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`INIT_VERSION'
0.19860300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#575 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19861800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#574 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19865900 0105 [debug] basicsys.cc:263: a_context.m_environ[17].first == 'DEBEMAIL'
0.19867800 0105 [debug] basicsys.cc:264: a_context.m_environ[17].second == 'jheusala@sendanor.fi'
0.19893800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#579 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.19915700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#580 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.19941700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#581 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19945400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`jheusala@sendanor.fi'
0.19947200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#581 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19950300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`jheusala@sendanor.fi'
0.19972100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#582 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19976000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#582 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.19997800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#583 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20001900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`jheusala@sendanor.fi'
0.20003600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#583 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20005200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`jheusala@sendanor.fi'
0.20006700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#580 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20008200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#579 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20027700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#584 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20049900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#585 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20073200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#586 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20076800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`DEBEMAIL'
0.20078400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#586 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20079900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`DEBEMAIL'
0.20101500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#587 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20105300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#587 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20127100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#588 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20131100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`DEBEMAIL'
0.20132900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#588 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20135500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`DEBEMAIL'
0.20137200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#585 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20138700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#584 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20142900 0105 [debug] basicsys.cc:263: a_context.m_environ[18].first == 'SSH_AUTH_SOCK'
0.20144900 0105 [debug] basicsys.cc:264: a_context.m_environ[18].second == '/tmp/ssh-OeCxbD3805/agent.3805'
0.20164600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#589 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20186800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#590 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20209600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#591 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20212500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/tmp/ssh-OeCxbD3805/agent.3805'
0.20213600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#591 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20218200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/tmp/ssh-OeCxbD3805/agent.3805'
0.20240300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#592 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20244300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#592 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20267400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#593 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20271800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/tmp/ssh-OeCxbD3805/agent.3805'
0.20273700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#593 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20275200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/tmp/ssh-OeCxbD3805/agent.3805'
0.20276900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#590 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20278400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#589 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20298600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#594 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20322000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#595 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20345300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#596 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20348800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`SSH_AUTH_SOCK'
0.20350500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#596 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20352000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`SSH_AUTH_SOCK'
0.20373500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#597 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20377300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#597 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20399100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#598 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20403100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`SSH_AUTH_SOCK'
0.20404900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#598 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20406400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`SSH_AUTH_SOCK'
0.20408000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#595 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20408900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#594 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20412500 0105 [debug] basicsys.cc:263: a_context.m_environ[19].first == 'init'
0.20413800 0105 [debug] basicsys.cc:264: a_context.m_environ[19].second == '/sbin/init'
0.20433600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#599 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20455800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#600 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20479100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#601 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20482600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/sbin/init'
0.20484200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#601 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20486900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/sbin/init'
0.20508600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#602 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20511800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#602 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20533600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#603 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20537600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/sbin/init'
0.20539400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#603 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20540900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/sbin/init'
0.20542500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#600 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20544000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#599 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20568600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#604 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20591900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#605 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20617100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#606 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20620600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`init'
0.20622300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#606 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20623800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`init'
0.20645500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#607 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20649200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#607 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20670900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#608 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20674900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`init'
0.20676700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#608 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20679300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`init'
0.20681000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#605 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20682500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#604 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20686600 0105 [debug] basicsys.cc:263: a_context.m_environ[20].first == 'TERMCAP'
0.20688600 0105 [debug] basicsys.cc:264: a_context.m_environ[20].second == 'SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:'
0.20709000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#609 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20731200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#610 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20754500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#611 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20758500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:'
0.20762500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#611 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20764000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:'
0.20786300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#612 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20797700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#612 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20819600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#613 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20826500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:'
0.20828800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#613 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20830400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`SC|screen|VT 100/ANSI X3.64 virtual terminal:\
	:DO=\E[%dB:LE=\E[%dD:RI=\E[%dC:UP=\E[%dA:bs:bt=\E[Z:\
	:cd=\E[J:ce=\E[K:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[3g:\
	:do=^J:nd=\E[C:pt:rc=\E8:rs=\Ec:sc=\E7:st=\EH:up=\EM:\
	:le=^H:bl=^G:cr=^M:it#8:ho=\E[H:nw=\EE:ta=^I:is=\E)0:\
	:li#36:co#125:am:xn:xv:LP:sr=\EM:al=\E[L:AL=\E[%dL:\
	:cs=\E[%i%d;%dr:dl=\E[M:DL=\E[%dM:dc=\E[P:DC=\E[%dP:\
	:im=\E[4h:ei=\E[4l:mi:IC=\E[%d@:ks=\E[?1h\E=:\
	:ke=\E[?1l\E>:vi=\E[?25l:ve=\E[34h\E[?25h:vs=\E[34l:\
	:ti=\E[?1049h:te=\E[?1049l:us=\E[4m:ue=\E[24m:so=\E[3m:\
	:se=\E[23m:mb=\E[5m:md=\E[1m:mr=\E[7m:me=\E[m:ms:\
	:Co#8:pa#64:AF=\E[3%dm:AB=\E[4%dm:op=\E[39;49m:AX:\
	:vb=\Eg:G0:as=\E(0:ae=\E(B:\
	:ac=\140\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\
	:po=\E[5i:pf=\E[4i:k0=\E[10~:k1=\EOP:k2=\EOQ:k3=\EOR:\
	:k4=\EOS:k5=\E[15~:k6=\E[17~:k7=\E[18~:k8=\E[19~:\
	:k9=\E[20~:k;=\E[21~:F1=\E[23~:F2=\E[24~:F3=\EO2P:\
	:F4=\EO2Q:F5=\EO2R:F6=\EO2S:F7=\E[15;2~:F8=\E[17;2~:\
	:F9=\E[18;2~:FA=\E[19;2~:kb=:K2=\EOE:kB=\E[Z:\
	:*4=\E[3;2~:*7=\E[1;2F:#2=\E[1;2H:#3=\E[2;2~:#4=\E[1;2D:\
	:%c=\E[6;2~:%e=\E[5;2~:%i=\E[1;2C:kh=\E[1~:@1=\E[1~:\
	:kH=\E[4~:@7=\E[4~:kN=\E[6~:kP=\E[5~:kI=\E[2~:kD=\E[3~:\
	:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:km:'
0.20834000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#610 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20835600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#609 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20855100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#614 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20877300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#615 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20907000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#616 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20910200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`TERMCAP'
0.20911300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#616 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20912200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`TERMCAP'
0.20935200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#617 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20939200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#617 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20962000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#618 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20966000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`TERMCAP'
0.20967800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#618 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.20969300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`TERMCAP'
0.20972000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#615 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.20973600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#614 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.20979900 0105 [debug] basicsys.cc:263: a_context.m_environ[21].first == 'USERNAME'
0.20981900 0105 [debug] basicsys.cc:264: a_context.m_environ[21].second == 'jhh'
0.21001700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#619 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21023900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#620 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21047300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#621 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21050700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`jhh'
0.21052400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#621 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21053900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`jhh'
0.21075400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#622 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21079100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#622 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21101000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#623 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21105000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`jhh'
0.21106700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#623 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21108300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`jhh'
0.21109200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#620 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21110100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#619 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21129600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#624 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21151700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#625 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21176300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#626 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21179800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`USERNAME'
0.21181400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#626 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21182900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`USERNAME'
0.21280100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#627 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21285500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#627 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21308300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#628 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21311900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`USERNAME'
0.21313100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#628 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21314000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`USERNAME'
0.21315000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#625 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21315900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#624 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21320300 0105 [debug] basicsys.cc:263: a_context.m_environ[22].first == 'SESSION_MANAGER'
0.21322400 0105 [debug] basicsys.cc:264: a_context.m_environ[22].second == 'local/zeta1:/tmp/.ICE-unix/4730'
0.21342200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#629 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21364500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#630 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21387900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#631 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21391400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`local/zeta1:/tmp/.ICE-unix/4730'
0.21393100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#631 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21394600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`local/zeta1:/tmp/.ICE-unix/4730'
0.21415700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#632 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21421000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#632 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21442900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#633 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21447000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`local/zeta1:/tmp/.ICE-unix/4730'
0.21448800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#633 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21450300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`local/zeta1:/tmp/.ICE-unix/4730'
0.21451900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#630 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21453400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#629 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21472800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#634 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21495000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#635 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21518400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#636 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21521900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`SESSION_MANAGER'
0.21523600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#636 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21525100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`SESSION_MANAGER'
0.21546700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#637 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21556200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#637 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21578400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#638 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21582500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`SESSION_MANAGER'
0.21584200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#638 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21585800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`SESSION_MANAGER'
0.21587300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#635 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21589900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#634 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21595300 0105 [debug] basicsys.cc:263: a_context.m_environ[23].first == 'MOZ_DISABLE_PANGO'
0.21596900 0105 [debug] basicsys.cc:264: a_context.m_environ[23].second == '1'
0.21618400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#639 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21640700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#640 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21664000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#641 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21667500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`1'
0.21669200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#641 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21670700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`1'
0.21692400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#642 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21696100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#642 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21717200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#643 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21721200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`1'
0.21722900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#643 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21724400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`1'
0.21726000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#640 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21727500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#639 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21747000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#644 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21769200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#645 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21793800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#646 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21797400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`MOZ_DISABLE_PANGO'
0.21799100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#646 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21800600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`MOZ_DISABLE_PANGO'
0.21822200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#647 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21826000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#647 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21847800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#648 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21851800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`MOZ_DISABLE_PANGO'
0.21853600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#648 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21855100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`MOZ_DISABLE_PANGO'
0.21856600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#645 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21858100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#644 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21862400 0105 [debug] basicsys.cc:263: a_context.m_environ[24].first == 'XPSERVERLIST'
0.21864300 0105 [debug] basicsys.cc:264: a_context.m_environ[24].second == ':64 '
0.21890400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#649 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.21912400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#650 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.21938200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#651 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21941900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`:64 '
0.21943600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#651 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21945200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`:64 '
0.21967600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#652 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21971300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#652 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21994400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#653 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.21998400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`:64 '
0.22000200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#653 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22001700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`:64 '
0.22003300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#650 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22004800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#649 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22024300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#654 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22046600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#655 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22070000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#656 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22073500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`XPSERVERLIST'
0.22075200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#656 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22076700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`XPSERVERLIST'
0.22098200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#657 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22102000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#657 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22123900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#658 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22127900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`XPSERVERLIST'
0.22129600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#658 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22131200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`XPSERVERLIST'
0.22132700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#655 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22134200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#654 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22139500 0105 [debug] basicsys.cc:263: a_context.m_environ[25].first == 'KONSOLE_DCOP'
0.22141400 0105 [debug] basicsys.cc:264: a_context.m_environ[25].second == 'DCOPRef(konsole-23941,konsole)'
0.22161200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#659 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22183400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#660 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22206700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#661 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22209600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`DCOPRef(konsole-23941,konsole)'
0.22210700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#661 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22211600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`DCOPRef(konsole-23941,konsole)'
0.22236500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#662 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22240700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#662 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22263100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#663 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22267400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`DCOPRef(konsole-23941,konsole)'
0.22269300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#663 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22270900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`DCOPRef(konsole-23941,konsole)'
0.22272500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#660 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22274000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#659 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22294500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#664 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22316200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#665 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22339500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#666 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22344500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`KONSOLE_DCOP'
0.22346200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#666 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22347800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`KONSOLE_DCOP'
0.22369400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#667 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22373200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#667 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22395000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#668 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22399000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`KONSOLE_DCOP'
0.22400700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#668 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22402300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`KONSOLE_DCOP'
0.22403800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#665 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22405300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#664 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22409000 0105 [debug] basicsys.cc:263: a_context.m_environ[26].first == 'PATH'
0.22410300 0105 [debug] basicsys.cc:264: a_context.m_environ[26].second == '/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games'
0.22430200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#669 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22452400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#670 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22475700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#671 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22479300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games'
0.22481000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#671 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22482500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games'
0.22504100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#672 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22509000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#672 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22530800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#673 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22535000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games'
0.22536700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#673 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22538300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/home/users/jhh/bin:/home/users/jhh/bin:/usr/local/bin:/usr/bin:/bin:/usr/games'
0.22539800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#670 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22541300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#669 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22565900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#674 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22588300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#675 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22614100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#676 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22618200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`PATH'
0.22619800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#676 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22621300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`PATH'
0.22642900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#677 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22646700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#677 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22668400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#678 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22672400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`PATH'
0.22674200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#678 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22675700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`PATH'
0.22677300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#675 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22679900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#674 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22684000 0105 [debug] basicsys.cc:263: a_context.m_environ[27].first == 'STY'
0.22686000 0105 [debug] basicsys.cc:264: a_context.m_environ[27].second == '25082.pts-8.zeta1'
0.22705900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#679 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22728100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#680 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22751400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#681 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22754900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`25082.pts-8.zeta1'
0.22756600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#681 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22758100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`25082.pts-8.zeta1'
0.22779700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#682 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22783500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#682 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22805300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#683 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22808800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`25082.pts-8.zeta1'
0.22810000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#683 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22810900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`25082.pts-8.zeta1'
0.22811900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#680 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22812800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#679 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22832200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#684 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22854400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#685 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22878900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#686 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22888500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`STY'
0.22890400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#686 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22892000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`STY'
0.22913200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#687 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22916400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#687 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22939900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#688 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22944200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`STY'
0.22946000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#688 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.22947600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`STY'
0.22949700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#685 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.22951200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#684 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22955300 0105 [debug] basicsys.cc:263: a_context.m_environ[28].first == 'RUNLEVEL'
0.22957300 0105 [debug] basicsys.cc:264: a_context.m_environ[28].second == '2'
0.22977100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#689 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.22999300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#690 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23022500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#691 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23026000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`2'
0.23027700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#691 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23029200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`2'
0.23050700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#692 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23054500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#692 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23077400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#693 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23081400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`2'
0.23083100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#693 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23084600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`2'
0.23086200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#690 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23087700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#689 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23107200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#694 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23129300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#695 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23152600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#696 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23156100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`RUNLEVEL'
0.23157800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#696 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23159200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`RUNLEVEL'
0.23180800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#697 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23184600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#697 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23206400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#698 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23209700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`RUNLEVEL'
0.23210900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#698 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23211800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`RUNLEVEL'
0.23212800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#695 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23213700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#694 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23222200 0105 [debug] basicsys.cc:263: a_context.m_environ[29].first == 'runlevel'
0.23224300 0105 [debug] basicsys.cc:264: a_context.m_environ[29].second == '2'
0.23244200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#699 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23268700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#700 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23293400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#701 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23296900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`2'
0.23298600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#701 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23300100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`2'
0.23321700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#702 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23325500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#702 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23347300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#703 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23351200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`2'
0.23353000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#703 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23354500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`2'
0.23356100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#700 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23357600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#699 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23377000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#704 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23399200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#705 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23422400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#706 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23427100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`runlevel'
0.23428800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#706 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23430300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`runlevel'
0.23452000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#707 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23455700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#707 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23477500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#708 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23481500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`runlevel'
0.23483300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#708 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23484800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`runlevel'
0.23486400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#705 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23487900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#704 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23492100 0105 [debug] basicsys.cc:263: a_context.m_environ[30].first == 'JOBS'
0.23494000 0105 [debug] basicsys.cc:264: a_context.m_environ[30].second == '-j3'
0.23513200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#709 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23535400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#710 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23564000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#711 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23567600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`-j3'
0.23569400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#711 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23570900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`-j3'
0.23592900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#712 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23596800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#712 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23620200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#713 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23625600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`-j3'
0.23627400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#713 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23628900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`-j3'
0.23630400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#710 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23631900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#709 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23651400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#714 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23673700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#715 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23696800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#716 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23700300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`JOBS'
0.23702000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#716 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23703500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`JOBS'
0.23725000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#717 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23728800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#717 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23750600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#718 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23754600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`JOBS'
0.23756300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#718 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23757900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`JOBS'
0.23759400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#715 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23760900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#714 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23765000 0105 [debug] basicsys.cc:263: a_context.m_environ[31].first == 'PWD'
0.23768400 0105 [debug] basicsys.cc:264: a_context.m_environ[31].second == '/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome'
0.23788400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#719 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23810000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#720 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23833200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#721 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23836700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome'
0.23838400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#721 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23839900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome'
0.23861500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#722 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23865700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#722 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23895700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#723 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23900100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome'
0.23901900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#723 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23903400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/examples/gdome'
0.23905000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#720 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23906400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#719 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23927200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#724 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.23951300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#725 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.23974600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#726 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23979300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`PWD'
0.23981000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#726 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.23982500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`PWD'
0.24004100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#727 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24007800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#727 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24029600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#728 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24033600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`PWD'
0.24035400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#728 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24036900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`PWD'
0.24038500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#725 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24040000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#724 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24044000 0105 [debug] basicsys.cc:263: a_context.m_environ[32].first == 'KONSOLE_DCOP_SESSION'
0.24045900 0105 [debug] basicsys.cc:264: a_context.m_environ[32].second == 'DCOPRef(konsole-23941,session-1)'
0.24065800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#729 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24088000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#730 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24110700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#731 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24113600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`DCOPRef(konsole-23941,session-1)'
0.24114700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#731 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24115600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`DCOPRef(konsole-23941,session-1)'
0.24137200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#732 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24141200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#732 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24164200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#733 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24168300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`DCOPRef(konsole-23941,session-1)'
0.24170100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#733 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24171600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`DCOPRef(konsole-23941,session-1)'
0.24173200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#730 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24174700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#729 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24194200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#734 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24219700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#735 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24243300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#736 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24246900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`KONSOLE_DCOP_SESSION'
0.24248600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#736 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24250000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`KONSOLE_DCOP_SESSION'
0.24273400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#737 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24277500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#737 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24300100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#738 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24304100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`KONSOLE_DCOP_SESSION'
0.24305900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#738 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24307400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`KONSOLE_DCOP_SESSION'
0.24309000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#735 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24309900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#734 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24314700 0105 [debug] basicsys.cc:263: a_context.m_environ[33].first == 'VERBOSE'
0.24316100 0105 [debug] basicsys.cc:264: a_context.m_environ[33].second == 'no'
0.24335900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#739 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24358100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#740 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24381400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#741 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24384900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`no'
0.24386500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#741 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24388000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`no'
0.24409000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#742 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24412200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#742 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24434000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#743 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24437900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`no'
0.24439700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#743 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24441200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`no'
0.24442800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#740 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24444300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#739 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24463700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#744 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24485900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#745 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24508800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#746 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24511700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`VERBOSE'
0.24513900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#746 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24514900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`VERBOSE'
0.24536700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#747 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24540500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#747 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24567500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#748 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24571700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`VERBOSE'
0.24573500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#748 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24575000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`VERBOSE'
0.24576500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#745 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24578000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#744 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24582200 0105 [debug] basicsys.cc:263: a_context.m_environ[34].first == 'KDE_SESSION_UID'
0.24584100 0105 [debug] basicsys.cc:264: a_context.m_environ[34].second == '1000'
0.24606400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#749 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24629700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#750 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24653000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#751 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24656500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`1000'
0.24658200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#751 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24659700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`1000'
0.24681300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#752 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24685100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#752 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24706900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#753 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24711500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`1000'
0.24712700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#753 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24713600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`1000'
0.24714600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#750 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24715500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#749 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24735000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#754 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24757200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#755 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24781600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#756 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24785300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`KDE_SESSION_UID'
0.24787100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#756 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24788300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`KDE_SESSION_UID'
0.24810700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#757 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24814900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#757 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24836700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#758 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24840700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`KDE_SESSION_UID'
0.24842500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#758 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24844000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`KDE_SESSION_UID'
0.24845600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#755 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24847100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#754 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24851300 0105 [debug] basicsys.cc:263: a_context.m_environ[35].first == 'LANG'
0.24853200 0105 [debug] basicsys.cc:264: a_context.m_environ[35].second == 'en_US.UTF-8'
0.24873900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#759 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.24904900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#760 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24929800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#761 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24933600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`en_US.UTF-8'
0.24935300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#761 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24936900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`en_US.UTF-8'
0.24959700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#762 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24963500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#762 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24985300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#763 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24989300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`en_US.UTF-8'
0.24991100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#763 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.24992600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`en_US.UTF-8'
0.24994100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#760 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.24995600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#759 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25014500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#764 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25036700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#765 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25059900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#766 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25063400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`LANG'
0.25065100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#766 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25067700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`LANG'
0.25089400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#767 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25093100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#767 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25114300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#768 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25118300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`LANG'
0.25120000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#768 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25121600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`LANG'
0.25123100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#765 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25124600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#764 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25128800 0105 [debug] basicsys.cc:263: a_context.m_environ[36].first == 'PREVLEVEL'
0.25130700 0105 [debug] basicsys.cc:264: a_context.m_environ[36].second == 'N'
0.25150500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#769 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25172700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#770 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25196000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#771 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25199500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`N'
0.25201200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#771 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25202700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`N'
0.25227600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#772 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25231600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#772 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25253400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#773 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25257400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`N'
0.25259600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#773 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25262600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`N'
0.25264300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#770 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25265800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#769 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25286800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#774 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25308800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#775 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25332100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#776 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25335600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`PREVLEVEL'
0.25337300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#776 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25338800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`PREVLEVEL'
0.25360300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#777 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25364100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#777 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25385900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#778 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25389900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`PREVLEVEL'
0.25391600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#778 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25393200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`PREVLEVEL'
0.25394700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#775 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25396200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#774 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25400400 0105 [debug] basicsys.cc:263: a_context.m_environ[37].first == 'previous'
0.25402400 0105 [debug] basicsys.cc:264: a_context.m_environ[37].second == 'N'
0.25422100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#779 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25445500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#780 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25468900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#781 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25472300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`N'
0.25474000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#781 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25475500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`N'
0.25497000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#782 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25500700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#782 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25522500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#783 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25526500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`N'
0.25528200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#783 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25529700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`N'
0.25531300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#780 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25532800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#779 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25557300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#784 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25579700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#785 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25605600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#786 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25608700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`previous'
0.25609900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#786 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25610900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`previous'
0.25633300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#787 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25638300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#787 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25660200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#788 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25664200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`previous'
0.25666000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#788 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25667500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`previous'
0.25669100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#785 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25670600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#784 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25674700 0105 [debug] basicsys.cc:263: a_context.m_environ[38].first == 'HISTCONTROL'
0.25676600 0105 [debug] basicsys.cc:264: a_context.m_environ[38].second == 'ignoredups'
0.25696300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#789 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25718600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#790 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25741900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#791 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25745400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`ignoredups'
0.25747100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#791 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25748600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`ignoredups'
0.25770200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#792 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25774000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#792 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25795700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#793 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25799700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`ignoredups'
0.25801500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#793 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25803000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`ignoredups'
0.25805800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#790 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25807400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#789 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25826900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#794 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25849200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#795 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25872400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#796 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25875900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`HISTCONTROL'
0.25877600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#796 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25879100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`HISTCONTROL'
0.25907000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#797 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25910500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#797 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25933700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#798 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25937900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`HISTCONTROL'
0.25939800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#798 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.25941400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`HISTCONTROL'
0.25943000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#795 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.25944500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#794 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25949500 0105 [debug] basicsys.cc:263: a_context.m_environ[39].first == 'NODM_FIRST_VT'
0.25951400 0105 [debug] basicsys.cc:264: a_context.m_environ[39].second == '7'
0.25971300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#799 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.25993500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#800 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26017400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#801 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26020900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`7'
0.26022600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#801 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26024100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`7'
0.26045800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#802 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26049500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#802 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26071400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#803 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26075300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`7'
0.26077100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#803 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26078600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`7'
0.26080200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#800 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26081700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#799 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26101100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#804 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26123400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#805 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26146700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#806 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26150200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`NODM_FIRST_VT'
0.26151900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#806 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26153400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`NODM_FIRST_VT'
0.26175000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#807 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26178800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#807 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26278800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#808 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26284300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`NODM_FIRST_VT'
0.26286100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#808 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26287600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`NODM_FIRST_VT'
0.26289300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#805 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26290800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#804 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26295200 0105 [debug] basicsys.cc:263: a_context.m_environ[40].first == 'GPG_TTY'
0.26297200 0105 [debug] basicsys.cc:264: a_context.m_environ[40].second == '/dev/pts/14'
0.26316600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#809 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26339000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#810 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26362400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#811 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26365900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/dev/pts/14'
0.26367600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#811 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26369100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/dev/pts/14'
0.26390700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#812 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26394600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#812 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26415800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#813 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26419800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/dev/pts/14'
0.26421600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#813 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26423100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/dev/pts/14'
0.26424700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#810 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26427500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#809 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26447200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#814 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26469500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#815 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26492800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#816 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26496300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`GPG_TTY'
0.26498000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#816 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26499500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`GPG_TTY'
0.26521100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#817 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26524900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#817 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26546700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#818 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26556300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GPG_TTY'
0.26558200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#818 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26559700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`GPG_TTY'
0.26561300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#815 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26562800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#814 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26567100 0105 [debug] basicsys.cc:263: a_context.m_environ[41].first == 'HOME'
0.26569000 0105 [debug] basicsys.cc:264: a_context.m_environ[41].second == '/home/users/jhh'
0.26588900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#819 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26612600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#820 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26636500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#821 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26641300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/home/users/jhh'
0.26643000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#821 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26644500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/home/users/jhh'
0.26666300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#822 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26670100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#822 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26692000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#823 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26696000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/home/users/jhh'
0.26697800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#823 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26699300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/home/users/jhh'
0.26700900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#820 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26702400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#819 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26721800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#824 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26744100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#825 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26767300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#826 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26770900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`HOME'
0.26772500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#826 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26774000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`HOME'
0.26795600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#827 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26799300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#827 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26821100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#828 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26826500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`HOME'
0.26828300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#828 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26829800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`HOME'
0.26831400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#825 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26832900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#824 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26836900 0105 [debug] basicsys.cc:263: a_context.m_environ[42].first == 'SHLVL'
0.26838800 0105 [debug] basicsys.cc:264: a_context.m_environ[42].second == '6'
0.26858600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#829 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26884500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#830 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26911100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#831 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26914000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`6'
0.26915100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#831 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26916000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`6'
0.26940200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#832 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26944100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#832 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26966700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#833 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26970700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`6'
0.26972500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#833 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.26974000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`6'
0.26975500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#830 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.26977000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#829 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.26998300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#834 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27020600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#835 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27043900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#836 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27047400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`SHLVL'
0.27049100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#836 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27050600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`SHLVL'
0.27072200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#837 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27075900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#837 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27097700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#838 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27101700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`SHLVL'
0.27103400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#838 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27105000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`SHLVL'
0.27106500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#835 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27108000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#834 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27115500 0105 [debug] basicsys.cc:263: a_context.m_environ[43].first == 'XCURSOR_THEME'
0.27116800 0105 [debug] basicsys.cc:264: a_context.m_environ[43].second == 'default'
0.27136600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#839 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27158900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#840 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27182200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#841 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27185600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`default'
0.27187300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#841 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27189600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`default'
0.27210900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#842 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27215100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#842 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27239400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#843 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27243500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`default'
0.27245300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#843 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27246800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`default'
0.27248300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#840 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27249800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#839 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27270800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#844 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27294200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#845 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27316900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#846 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27320500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`XCURSOR_THEME'
0.27322200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#846 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27323700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`XCURSOR_THEME'
0.27345300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#847 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27349100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#847 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27371000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#848 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27374900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`XCURSOR_THEME'
0.27376700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#848 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27379400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`XCURSOR_THEME'
0.27381000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#845 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27382500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#844 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27386700 0105 [debug] basicsys.cc:263: a_context.m_environ[44].first == 'LOGNAME'
0.27388700 0105 [debug] basicsys.cc:264: a_context.m_environ[44].second == 'jhh'
0.27408400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#849 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27430700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#850 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27454000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#851 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27457400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`jhh'
0.27459100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#851 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27460600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`jhh'
0.27482200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#852 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27485900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#852 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27507700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#853 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27511100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`jhh'
0.27512200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#853 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27513200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`jhh'
0.27514100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#850 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27515000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#849 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27534500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#854 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27563100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#855 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27586700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#856 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27589800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`LOGNAME'
0.27592800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#856 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27593800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`LOGNAME'
0.27616700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#857 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27620500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#857 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27642300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#858 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27646300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`LOGNAME'
0.27648000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#858 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27649600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`LOGNAME'
0.27651100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#855 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27652600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#854 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27656700 0105 [debug] basicsys.cc:263: a_context.m_environ[45].first == 'WINDOW'
0.27658600 0105 [debug] basicsys.cc:264: a_context.m_environ[45].second == '3'
0.27678300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#859 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27700500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#860 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27723800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#861 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27727200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`3'
0.27728900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#861 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27730400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`3'
0.27753600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#862 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27757400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#862 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27779200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#863 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27783100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`3'
0.27784900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#863 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27786400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`3'
0.27788000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#860 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27789500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#859 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27808900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#864 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27831100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#865 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27854500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#866 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27858000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`WINDOW'
0.27859600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#866 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27861100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`WINDOW'
0.27888900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#867 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27892800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#867 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27914100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#868 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27917600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`WINDOW'
0.27919300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#868 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.27920900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`WINDOW'
0.27923100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#865 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27925300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#864 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27929100 0105 [debug] basicsys.cc:263: a_context.m_environ[46].first == 'DBUS_SESSION_BUS_ADDRESS'
0.27930800 0105 [debug] basicsys.cc:264: a_context.m_environ[46].second == 'unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70'
0.27952300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#869 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.27974500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#870 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.27997800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#871 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28001300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70'
0.28003000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#871 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28004500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70'
0.28026100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#872 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28030300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#872 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28052100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#873 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28056300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70'
0.28058100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#873 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28059600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`unix:abstract=/tmp/dbus-cPImi98chL,guid=654437ba23f6c656f122028f4b4e0f70'
0.28061200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#870 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28062700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#869 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28082000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#874 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28105600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#875 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28128900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#876 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28132400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`DBUS_SESSION_BUS_ADDRESS'
0.28134100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#876 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28135600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`DBUS_SESSION_BUS_ADDRESS'
0.28157200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#877 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28161100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#877 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28182800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#878 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28186900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`DBUS_SESSION_BUS_ADDRESS'
0.28188600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#878 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28190200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`DBUS_SESSION_BUS_ADDRESS'
0.28191700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#875 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28193200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#874 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28197300 0105 [debug] basicsys.cc:263: a_context.m_environ[47].first == 'LESSOPEN'
0.28199300 0105 [debug] basicsys.cc:264: a_context.m_environ[47].second == '| /usr/bin/lesspipe %s'
0.28222200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#879 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28244700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#880 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28270300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#881 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28274100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`| /usr/bin/lesspipe %s'
0.28275800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#881 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28278600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`| /usr/bin/lesspipe %s'
0.28301100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#882 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28304900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#882 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28326700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#883 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28330800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`| /usr/bin/lesspipe %s'
0.28332600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#883 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28334100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`| /usr/bin/lesspipe %s'
0.28335700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#880 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28337100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#879 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28356600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#884 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28378700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#885 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28402000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#886 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28405500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`LESSOPEN'
0.28407200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#886 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28408600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`LESSOPEN'
0.28430200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#887 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28434000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#887 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28455700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#888 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28459600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`LESSOPEN'
0.28461400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#888 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28464000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`LESSOPEN'
0.28465700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#885 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28467200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#884 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28471400 0105 [debug] basicsys.cc:263: a_context.m_environ[48].first == 'DEBFULLNAME'
0.28473300 0105 [debug] basicsys.cc:264: a_context.m_environ[48].second == 'Jaakko-Heikki Heusala'
0.28493200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#889 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28514800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#890 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28538100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#891 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28541600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`Jaakko-Heikki Heusala'
0.28543300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#891 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28544800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`Jaakko-Heikki Heusala'
0.28570900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#892 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28575000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#892 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28597500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#893 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28601800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Jaakko-Heikki Heusala'
0.28603600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#893 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28605200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`Jaakko-Heikki Heusala'
0.28606800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#890 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28608400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#889 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28628700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#894 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28652200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#895 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28675400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#896 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28678900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`DEBFULLNAME'
0.28680600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#896 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28682100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`DEBFULLNAME'
0.28703700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#897 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28707500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#897 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28729300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#898 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28733300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`DEBFULLNAME'
0.28735000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#898 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28736600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`DEBFULLNAME'
0.28738100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#895 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28739600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#894 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28743700 0105 [debug] basicsys.cc:263: a_context.m_environ[49].first == 'WINDOWPATH'
0.28745600 0105 [debug] basicsys.cc:264: a_context.m_environ[49].second == '7'
0.28765300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#899 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28787500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#900 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28810200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#901 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28813100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`7'
0.28814200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#901 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28816300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`7'
0.28837900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#902 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28841700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#902 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28863500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#903 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28867400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`7'
0.28869200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#903 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28870700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`7'
0.28872200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#900 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28873800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#899 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28899400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#904 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.28921900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#905 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.28948200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#906 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28952300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`WINDOWPATH'
0.28954000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#906 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28955500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`WINDOWPATH'
0.28977100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#907 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.28981000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#907 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29002700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#908 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29006800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`WINDOWPATH'
0.29008500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#908 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29009500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`WINDOWPATH'
0.29011700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#905 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29012700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#904 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29016300 0105 [debug] basicsys.cc:263: a_context.m_environ[50].first == 'DISPLAY'
0.29017600 0105 [debug] basicsys.cc:264: a_context.m_environ[50].second == ':0.0'
0.29037300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#909 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29059600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#910 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29082900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#911 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29086300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`:0.0'
0.29088000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#911 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29089500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`:0.0'
0.29110500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#912 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29113700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#912 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29135400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#913 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29139400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`:0.0'
0.29141200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#913 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29142700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`:0.0'
0.29144300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#910 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29145800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#909 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29165200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#914 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29187400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#915 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29211400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#916 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29217400 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`DISPLAY'
0.29219300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#916 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29220800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`DISPLAY'
0.29242600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#917 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29246400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#917 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29269700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#918 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29273900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`DISPLAY'
0.29275800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#918 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29277300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`DISPLAY'
0.29278900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#915 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29280500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#914 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29285100 0105 [debug] basicsys.cc:263: a_context.m_environ[51].first == 'LESSCLOSE'
0.29287100 0105 [debug] basicsys.cc:264: a_context.m_environ[51].second == '/usr/bin/lesspipe %s %s'
0.29306900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#919 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29329100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#920 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29352400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#921 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29355900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/usr/bin/lesspipe %s %s'
0.29357500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#921 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29359100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/usr/bin/lesspipe %s %s'
0.29380700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#922 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29385800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#922 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29407600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#923 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29411100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/bin/lesspipe %s %s'
0.29412200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#923 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29413200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/usr/bin/lesspipe %s %s'
0.29414100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#920 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29415000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#919 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29434500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#924 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29456600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#925 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29479800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#926 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29483300 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`LESSCLOSE'
0.29485000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#926 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29486500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`LESSCLOSE'
0.29508000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#927 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29511200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#927 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29532900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#928 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29536900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`LESSCLOSE'
0.29538700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#928 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29540200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`LESSCLOSE'
0.29541800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#925 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29544300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#924 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29553500 0105 [debug] basicsys.cc:263: a_context.m_environ[52].first == 'COLORTERM'
0.29555500 0105 [debug] basicsys.cc:264: a_context.m_environ[52].second == ''
0.29575400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#929 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29599700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#930 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29624600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#931 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29628000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`'
0.29629700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#931 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29631200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`'
0.29652800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#932 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29656500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#932 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29678200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#933 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29682100 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`'
0.29683800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#933 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29685400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`'
0.29686900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#930 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29688400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#929 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29707800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#934 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29730100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#935 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29753300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#936 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29758000 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`COLORTERM'
0.29759700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#936 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29761200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`COLORTERM'
0.29782900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#937 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29786600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#937 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29808400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#938 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29811800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`COLORTERM'
0.29813000 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#938 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29813900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`COLORTERM'
0.29814900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#935 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29815800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#934 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29820000 0105 [debug] basicsys.cc:263: a_context.m_environ[53].first == 'OLDPWD'
0.29822000 0105 [debug] basicsys.cc:264: a_context.m_environ[53].second == '/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk'
0.29841700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#939 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29864000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#940 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29893500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#941 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29897200 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk'
0.29898900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#941 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29900400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk'
0.29922100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#942 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29928100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#942 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29951700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#943 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29955800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk'
0.29957600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#943 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.29959100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk'
0.29960700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#940 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.29962200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#939 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.29981600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#944 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.30003800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#945 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.30027100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#946 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30030600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`OLDPWD'
0.30032300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#946 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30033800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`OLDPWD'
0.30055300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#947 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30059100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#947 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30080800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#948 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30084700 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`OLDPWD'
0.30086500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#948 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30088000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`OLDPWD'
0.30089600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#945 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.30092500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#944 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.30096600 0105 [debug] basicsys.cc:263: a_context.m_environ[54].first == '_'
0.30098500 0105 [debug] basicsys.cc:264: a_context.m_environ[54].second == '/usr/bin/js'
0.30117800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#949 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.30140000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#950 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.30163300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#951 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30166800 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/usr/bin/js'
0.30168500 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#951 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30170000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/usr/bin/js'
0.30191600 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#952 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30195400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#952 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30220400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#953 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30224600 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/bin/js'
0.30226400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#953 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30228000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/usr/bin/js'
0.30229500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#950 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.30231000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#949 convert<v8::Handle<v8::Value>,std::string> at 0xb421eeec in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.30250600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#954 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.30275500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#955 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.30299800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#956 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30304500 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`_'
0.30306200 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#956 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30307700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`_'
0.30329400 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#957 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30333100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#957 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30354900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#958 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30358900 0108 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`_'
0.30360700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#958 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.30362200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`_'
0.30363700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#955 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.30365200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#954 convert<v8::Handle<v8::Value>,std::string> at 0xb421ef22 in openjs::extensions::basicsys::init(openjs::core::extension_context&) from /usr/lib/openjs/basicsys.so
0.30381300 0104 [funct] basicsys.cc:197: EOF#385 init at 0xb429b406 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30383200 0006 [info ] loader.cc:41: /usr/lib/openjs/basicsys.so: Dynamic library loaded
0.30401900 0104 [funct] ../../core/pointer_helpers.h:28: SOF#959 ptr_to_v8 (address=135021808, type='openjs::core::LoadedExtension*') at 0xb429b6a0 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30427000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#960 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.30449300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#961 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.30453200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#961 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.30455000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#960 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.30459100 0104 [funct] ../../core/pointer_helpers.h:28: EOF#959 ptr_to_v8 at 0xb429b6a0 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30461200 0103 [funct] loader.cc:27: EOF#377 v8_openjs_extension_load_dl at 0xb74f574d from /usr/lib/libv8_g.so
0.30513400 0103 [funct] loader.cc:155: SOF#962 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.30533800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#963 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30560800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#964 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30565500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/stream.dep'
0.30567300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#964 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30568800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#963 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30573500 0103 [funct] loader.cc:155: EOF#962 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.30592000 0103 [funct] loader.cc:155: SOF#965 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.30612700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#966 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30634300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#967 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30638700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/stream.so'
0.30640500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#967 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30642000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#966 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30645300 0103 [funct] loader.cc:155: EOF#965 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.30662900 0103 [funct] loader.cc:155: SOF#968 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.30682900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#969 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30703900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#970 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30708300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/stream.js'
0.30709500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#970 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30710400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#969 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30714600 0103 [funct] loader.cc:155: EOF#968 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.30735700 0103 [funct] loader.cc:131: SOF#971 do_v8_readfile (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.30755800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#972 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30776800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#973 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30781200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/stream.dep'
0.30782900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#973 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.30784500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#972 convert<std::string,v8::Local<v8::Value>> at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30806000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#974 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30827000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#975 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.30830800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#975 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.30832500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#974 convert<v8::Handle<v8::Value>,std::string> at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.30836600 0103 [funct] loader.cc:131: EOF#971 do_v8_readfile at 0xb74f574d from /usr/lib/libv8_g.so
0.30962200 0103 [funct] loader.cc:166: SOF#976 do_v8_fs_load_js (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.30982900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#977 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4298086 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31004200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#978 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.31008700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/stream.js'
0.31009900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#978 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.31010900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#977 convert<std::string,v8::Local<v8::Value>> at 0xb4298086 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31011800 0104 [debug] loader.cc:171: /usr/lib/openjs/stream.js: Loading source library
0.31038700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#979 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb42984f8 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31143300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#980 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.31167300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#981 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31171800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/* Stream library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Add writeln to stream */
function do_stream_writeln (msg) {
	this.write(msg + "\n");
}
	
/* Read all stream contents as a binary */
/*
function do_stream_readall () {
	var data = "";
	var buf = "";
	do {
		buf = this.read(64);
		data += buf;
} while(buf.length != 0);
	return data;
}
*/

/* Read all stream contents as a text */
function do_stream_toString () {
	var data = "";
	for(var buf=""; !(buf===undefined); buf = this.getLine("\n", false) ) { data += buf; }
	return data;
}

/* Container for stream factory function callbacks */
streamFactories = [];

/** Stream factory for standard stream pointers */
streamFactories["stdstream"] = function(stream) {
	stream.internal = {"pointer":stream.arg};
}

/** Stream constructor
 * \FIXME: BasicStream should be renamed to BasicStreamBuilder and there should 
 *         be BasicStream object which has writeln and readall methods.
 */
function Stream (type, mode, arg, data) {
	this.type = type;
	this.mode = mode;
	this.arg = arg;
	this.data = data;
	
	if(!streamFactories.hasOwnProperty(type)) { throw "No factory for type "+ type; }
	
	streamFactories[type](this);
	
	if(this.mode.indexOf("r") >= 0) {
		this.read = BasicStream.read;
		this.getLine = BasicStream.getLine;
		this.toString = do_stream_toString;
	}
	
	if(this.mode.indexOf("w") >= 0) {
		this.write = BasicStream.write;
		this.writeln = do_stream_writeln;
		this.flush = BasicStream.flush;
	}
}

/* EOF */
'
0.31174200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#981 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31175700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/* Stream library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Add writeln to stream */
function do_stream_writeln (msg) {
	this.write(msg + "\n");
}
	
/* Read all stream contents as a binary */
/*
function do_stream_readall () {
	var data = "";
	var buf = "";
	do {
		buf = this.read(64);
		data += buf;
} while(buf.length != 0);
	return data;
}
*/

/* Read all stream contents as a text */
function do_stream_toString () {
	var data = "";
	for(var buf=""; !(buf===undefined); buf = this.getLine("\n", false) ) { data += buf; }
	return data;
}

/* Container for stream factory function callbacks */
streamFactories = [];

/** Stream factory for standard stream pointers */
streamFactories["stdstream"] = function(stream) {
	stream.internal = {"pointer":stream.arg};
}

/** Stream constructor
 * \FIXME: BasicStream should be renamed to BasicStreamBuilder and there should 
 *         be BasicStream object which has writeln and readall methods.
 */
function Stream (type, mode, arg, data) {
	this.type = type;
	this.mode = mode;
	this.arg = arg;
	this.data = data;
	
	if(!streamFactories.hasOwnProperty(type)) { throw "No factory for type "+ type; }
	
	streamFactories[type](this);
	
	if(this.mode.indexOf("r") >= 0) {
		this.read = BasicStream.read;
		this.getLine = BasicStream.getLine;
		this.toString = do_stream_toString;
	}
	
	if(this.mode.indexOf("w") >= 0) {
		this.write = BasicStream.write;
		this.writeln = do_stream_writeln;
		this.flush = BasicStream.flush;
	}
}

/* EOF */
'
0.31198400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#982 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31287300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#982 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31308500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#983 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31325300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/* Stream library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Add writeln to stream */
function do_stream_writeln (msg) {
	this.write(msg + "\n");
}
	
/* Read all stream contents as a binary */
/*
function do_stream_readall () {
	var data = "";
	var buf = "";
	do {
		buf = this.read(64);
		data += buf;
} while(buf.length != 0);
	return data;
}
*/

/* Read all stream contents as a text */
function do_stream_toString () {
	var data = "";
	for(var buf=""; !(buf===undefined); buf = this.getLine("\n", false) ) { data += buf; }
	return data;
}

/* Container for stream factory function callbacks */
streamFactories = [];

/** Stream factory for standard stream pointers */
streamFactories["stdstream"] = function(stream) {
	stream.internal = {"pointer":stream.arg};
}

/** Stream constructor
 * \FIXME: BasicStream should be renamed to BasicStreamBuilder and there should 
 *         be BasicStream object which has writeln and readall methods.
 */
function Stream (type, mode, arg, data) {
	this.type = type;
	this.mode = mode;
	this.arg = arg;
	this.data = data;
	
	if(!streamFactories.hasOwnProperty(type)) { throw "No factory for type "+ type; }
	
	streamFactories[type](this);
	
	if(this.mode.indexOf("r") >= 0) {
		this.read = BasicStream.read;
		this.getLine = BasicStream.getLine;
		this.toString = do_stream_toString;
	}
	
	if(this.mode.indexOf("w") >= 0) {
		this.write = BasicStream.write;
		this.writeln = do_stream_writeln;
		this.flush = BasicStream.flush;
	}
}

/* EOF */
'
0.31327600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#983 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31329100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/* Stream library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Add writeln to stream */
function do_stream_writeln (msg) {
	this.write(msg + "\n");
}
	
/* Read all stream contents as a binary */
/*
function do_stream_readall () {
	var data = "";
	var buf = "";
	do {
		buf = this.read(64);
		data += buf;
} while(buf.length != 0);
	return data;
}
*/

/* Read all stream contents as a text */
function do_stream_toString () {
	var data = "";
	for(var buf=""; !(buf===undefined); buf = this.getLine("\n", false) ) { data += buf; }
	return data;
}

/* Container for stream factory function callbacks */
streamFactories = [];

/** Stream factory for standard stream pointers */
streamFactories["stdstream"] = function(stream) {
	stream.internal = {"pointer":stream.arg};
}

/** Stream constructor
 * \FIXME: BasicStream should be renamed to BasicStreamBuilder and there should 
 *         be BasicStream object which has writeln and readall methods.
 */
function Stream (type, mode, arg, data) {
	this.type = type;
	this.mode = mode;
	this.arg = arg;
	this.data = data;
	
	if(!streamFactories.hasOwnProperty(type)) { throw "No factory for type "+ type; }
	
	streamFactories[type](this);
	
	if(this.mode.indexOf("r") >= 0) {
		this.read = BasicStream.read;
		this.getLine = BasicStream.getLine;
		this.toString = do_stream_toString;
	}
	
	if(this.mode.indexOf("w") >= 0) {
		this.write = BasicStream.write;
		this.writeln = do_stream_writeln;
		this.flush = BasicStream.flush;
	}
}

/* EOF */
'
0.31332700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#980 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.31334300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#979 convert<v8::Handle<v8::Value>,std::string> at 0xb42984f8 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31352900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#984 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4298572 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31374100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#985 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.31378100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#985 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.31379800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#984 convert<v8::Handle<v8::Value>,std::string> at 0xb4298572 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31484100 0006 [info ] loader.cc:201: /usr/lib/openjs/stream.js: Source library loaded
0.31487300 0103 [funct] loader.cc:166: EOF#976 do_v8_fs_load_js at 0xb74f574d from /usr/lib/libv8_g.so
0.31533000 0103 [funct] loader.cc:166: SOF#986 do_v8_fs_load_js (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.31558600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#987 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4298086 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31591700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#988 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.31596900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/system.js'
0.31598800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#988 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.31599800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#987 convert<std::string,v8::Local<v8::Value>> at 0xb4298086 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31601300 0104 [debug] loader.cc:171: /usr/lib/openjs/system.js: Loading source library
0.31627400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#989 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb42984f8 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31648500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#990 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.31670800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#991 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31676700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/* System for JS
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Stream factory for stdout */
streamFactories["stdout"] = function(stream) {
	BasicSys.initStdoutStream(stream);
	stream.mode = "w";
}

/** Stream factory for stdin */
streamFactories["stdin"] = function(stream) {
	BasicSys.initStdinStream(stream);
	stream.mode = "r";
}

/** Stream factory for stderr */
streamFactories["stderr"] = function(stream) {
	BasicSys.initStderrStream(stream);
	stream.mode = "w";
}

/* create sys */
system = {};

/* standard streams */
system.stdout = new Stream("stdout");
system.stdin = new Stream("stdin");
system.stderr = new Stream("stderr");

/** Exit from system with status code */
system.args = BasicSys.args;

/** Exit from system with status code */
system.env = BasicSys.env;

/** Exit from system with status code */
system.exit = BasicSys.exit;

/** Execute program */
system.exec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.exec(system.stdout, system.stderr, args.shift(), args);
}

/** Execute program */
system.getexec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.getexec(system.stderr, args.shift(), args);
}

/* EOF */
'
0.31678900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#991 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31680500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/* System for JS
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Stream factory for stdout */
streamFactories["stdout"] = function(stream) {
	BasicSys.initStdoutStream(stream);
	stream.mode = "w";
}

/** Stream factory for stdin */
streamFactories["stdin"] = function(stream) {
	BasicSys.initStdinStream(stream);
	stream.mode = "r";
}

/** Stream factory for stderr */
streamFactories["stderr"] = function(stream) {
	BasicSys.initStderrStream(stream);
	stream.mode = "w";
}

/* create sys */
system = {};

/* standard streams */
system.stdout = new Stream("stdout");
system.stdin = new Stream("stdin");
system.stderr = new Stream("stderr");

/** Exit from system with status code */
system.args = BasicSys.args;

/** Exit from system with status code */
system.env = BasicSys.env;

/** Exit from system with status code */
system.exit = BasicSys.exit;

/** Execute program */
system.exec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.exec(system.stdout, system.stderr, args.shift(), args);
}

/** Execute program */
system.getexec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.getexec(system.stderr, args.shift(), args);
}

/* EOF */
'
0.31706800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#992 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31718800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#992 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31739500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#993 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31746800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/* System for JS
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Stream factory for stdout */
streamFactories["stdout"] = function(stream) {
	BasicSys.initStdoutStream(stream);
	stream.mode = "w";
}

/** Stream factory for stdin */
streamFactories["stdin"] = function(stream) {
	BasicSys.initStdinStream(stream);
	stream.mode = "r";
}

/** Stream factory for stderr */
streamFactories["stderr"] = function(stream) {
	BasicSys.initStderrStream(stream);
	stream.mode = "w";
}

/* create sys */
system = {};

/* standard streams */
system.stdout = new Stream("stdout");
system.stdin = new Stream("stdin");
system.stderr = new Stream("stderr");

/** Exit from system with status code */
system.args = BasicSys.args;

/** Exit from system with status code */
system.env = BasicSys.env;

/** Exit from system with status code */
system.exit = BasicSys.exit;

/** Execute program */
system.exec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.exec(system.stdout, system.stderr, args.shift(), args);
}

/** Execute program */
system.getexec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.getexec(system.stderr, args.shift(), args);
}

/* EOF */
'
0.31750400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#993 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.31751900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/* System for JS
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Stream factory for stdout */
streamFactories["stdout"] = function(stream) {
	BasicSys.initStdoutStream(stream);
	stream.mode = "w";
}

/** Stream factory for stdin */
streamFactories["stdin"] = function(stream) {
	BasicSys.initStdinStream(stream);
	stream.mode = "r";
}

/** Stream factory for stderr */
streamFactories["stderr"] = function(stream) {
	BasicSys.initStderrStream(stream);
	stream.mode = "w";
}

/* create sys */
system = {};

/* standard streams */
system.stdout = new Stream("stdout");
system.stdin = new Stream("stdin");
system.stderr = new Stream("stderr");

/** Exit from system with status code */
system.args = BasicSys.args;

/** Exit from system with status code */
system.env = BasicSys.env;

/** Exit from system with status code */
system.exit = BasicSys.exit;

/** Execute program */
system.exec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.exec(system.stdout, system.stderr, args.shift(), args);
}

/** Execute program */
system.getexec = function() {
	var args = [];
	for(var i=0; i<arguments.length; i++) { args.push(arguments[i]); }
	return BasicSys.getexec(system.stderr, args.shift(), args);
}

/* EOF */
'
0.31754300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#990 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.31755800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#989 convert<v8::Handle<v8::Value>,std::string> at 0xb42984f8 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31774200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#994 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4298572 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.31795400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#995 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.31799300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#995 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.31801000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#994 convert<v8::Handle<v8::Value>,std::string> at 0xb4298572 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.32187200 0104 [funct] basicsys.cc:37: SOF#996 do_v8_standard_stream_init (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.32213800 0105 [funct] basicstream.cc:76: SOF#997 do_v8_ostream_internal (is=0xb706dd60) at 0xb4233b39 in v8::Handle<v8::Value> do_v8_standard_stream_init<1>(v8::Arguments const&) from /usr/lib/openjs/basicsys.so
0.32246400 0106 [funct] ../../core/v8_util.h:78: SOF#998 v8_init_object_template() () at 0xb425e212 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.32277500 0107 [funct] ../../core/v8_util.h:66: SOF#999 v8_init_function_template() () at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.32282500 0107 [funct] ../../core/v8_util.h:66: EOF#999 v8_init_function_template() at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.32284800 0106 [funct] ../../core/v8_util.h:78: EOF#998 v8_init_object_template() at 0xb425e212 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.32309600 0106 [funct] ../../core/v8_util.h:91: SOF#1000 v8_init_object () at 0xb425e232 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.32312900 0107 [debug] ../../core/v8_util.h:92: 1
0.32314000 0107 [debug] ../../core/v8_util.h:94: 2
0.32314900 0107 [debug] ../../core/v8_util.h:96: 3
0.32330000 0107 [debug] ../../core/v8_util.h:98: 4
0.32331900 0107 [debug] ../../core/v8_util.h:100: 5
0.32333500 0107 [debug] ../../core/v8_util.h:102: 6
0.32335100 0106 [funct] ../../core/v8_util.h:91: EOF#1000 v8_init_object at 0xb425e232 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.32360000 0106 [funct] ../../core/pointer_helpers.h:28: SOF#1001 ptr_to_v8 (address=3070680416, type='std::ostream*') at 0xb425e27e in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.32391800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1002 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.32420600 0108 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1003 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.32424600 0108 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1003 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.32426300 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1002 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.32430300 0106 [funct] ../../core/pointer_helpers.h:28: EOF#1001 ptr_to_v8 at 0xb425e27e in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.32437200 0105 [funct] basicstream.cc:76: EOF#997 do_v8_ostream_internal at 0xb4233b39 in v8::Handle<v8::Value> do_v8_standard_stream_init<1>(v8::Arguments const&) from /usr/lib/openjs/basicsys.so
0.32448100 0104 [funct] basicsys.cc:37: EOF#996 do_v8_standard_stream_init at 0xb74f574d from /usr/lib/libv8_g.so
0.32704000 0104 [funct] basicsys.cc:37: SOF#1004 do_v8_standard_stream_init (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.32731700 0105 [funct] basicstream.cc:56: SOF#1005 do_v8_istream_internal (is=0xb706dcc0) at 0xb4234469 in v8::Handle<v8::Value> do_v8_standard_stream_init<0>(v8::Arguments const&) from /usr/lib/openjs/basicsys.so
0.32758500 0106 [funct] ../../core/v8_util.h:78: SOF#1006 v8_init_object_template() () at 0xb425ecca in openjs::extensions::do_v8_istream_internal(std::istream*) from /usr/lib/openjs/basicstream.so
0.32788500 0107 [funct] ../../core/v8_util.h:66: SOF#1007 v8_init_function_template() () at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.32792900 0107 [funct] ../../core/v8_util.h:66: EOF#1007 v8_init_function_template() at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.32795200 0106 [funct] ../../core/v8_util.h:78: EOF#1006 v8_init_object_template() at 0xb425ecca in openjs::extensions::do_v8_istream_internal(std::istream*) from /usr/lib/openjs/basicstream.so
0.32821100 0106 [funct] ../../core/v8_util.h:91: SOF#1008 v8_init_object () at 0xb425ecea in openjs::extensions::do_v8_istream_internal(std::istream*) from /usr/lib/openjs/basicstream.so
0.32824500 0107 [debug] ../../core/v8_util.h:92: 1
0.32826200 0107 [debug] ../../core/v8_util.h:94: 2
0.32827700 0107 [debug] ../../core/v8_util.h:96: 3
0.32842100 0107 [debug] ../../core/v8_util.h:98: 4
0.32844000 0107 [debug] ../../core/v8_util.h:100: 5
0.32845600 0107 [debug] ../../core/v8_util.h:102: 6
0.32847200 0106 [funct] ../../core/v8_util.h:91: EOF#1008 v8_init_object at 0xb425ecea in openjs::extensions::do_v8_istream_internal(std::istream*) from /usr/lib/openjs/basicstream.so
0.32871700 0106 [funct] ../../core/pointer_helpers.h:28: SOF#1009 ptr_to_v8 (address=3070680256, type='std::istream*') at 0xb425ed36 in openjs::extensions::do_v8_istream_internal(std::istream*) from /usr/lib/openjs/basicstream.so
0.32909700 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1010 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.32940300 0108 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1011 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.32944500 0108 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1011 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.32947100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1010 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.32952800 0106 [funct] ../../core/pointer_helpers.h:28: EOF#1009 ptr_to_v8 at 0xb425ed36 in openjs::extensions::do_v8_istream_internal(std::istream*) from /usr/lib/openjs/basicstream.so
0.32958900 0105 [funct] basicstream.cc:56: EOF#1005 do_v8_istream_internal at 0xb4234469 in v8::Handle<v8::Value> do_v8_standard_stream_init<0>(v8::Arguments const&) from /usr/lib/openjs/basicsys.so
0.32964100 0104 [funct] basicsys.cc:37: EOF#1004 do_v8_standard_stream_init at 0xb74f574d from /usr/lib/libv8_g.so
0.33071000 0104 [funct] basicsys.cc:37: SOF#1012 do_v8_standard_stream_init (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33096500 0105 [funct] basicstream.cc:76: SOF#1013 do_v8_ostream_internal (is=0xb706de00) at 0xb4233299 in v8::Handle<v8::Value> do_v8_standard_stream_init<2>(v8::Arguments const&) from /usr/lib/openjs/basicsys.so
0.33125100 0106 [funct] ../../core/v8_util.h:78: SOF#1014 v8_init_object_template() () at 0xb425e212 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.33153000 0107 [funct] ../../core/v8_util.h:66: SOF#1015 v8_init_function_template() () at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.33157000 0107 [funct] ../../core/v8_util.h:66: EOF#1015 v8_init_function_template() at 0xb42a8d2f in void openjs::v8_init_object_template<v8::Handle<v8::FunctionTemplate>, v8::Handle<v8::ObjectTemplate> >(v8::Handle<v8::FunctionTemplate>&, v8::Handle<v8::ObjectTemplate>&) from /usr/lib/openjs/loader.so
0.33159200 0106 [funct] ../../core/v8_util.h:78: EOF#1014 v8_init_object_template() at 0xb425e212 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.33184100 0106 [funct] ../../core/v8_util.h:91: SOF#1016 v8_init_object () at 0xb425e232 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.33187600 0107 [debug] ../../core/v8_util.h:92: 1
0.33189200 0107 [debug] ../../core/v8_util.h:94: 2
0.33190800 0107 [debug] ../../core/v8_util.h:96: 3
0.33205400 0107 [debug] ../../core/v8_util.h:98: 4
0.33207300 0107 [debug] ../../core/v8_util.h:100: 5
0.33208900 0107 [debug] ../../core/v8_util.h:102: 6
0.33209900 0106 [funct] ../../core/v8_util.h:91: EOF#1016 v8_init_object at 0xb425e232 in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.33241400 0106 [funct] ../../core/pointer_helpers.h:28: SOF#1017 ptr_to_v8 (address=3070680576, type='std::ostream*') at 0xb425e27e in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.33275800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1018 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.33306600 0108 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1019 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.33310000 0108 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1019 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.33311100 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1018 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.33314500 0106 [funct] ../../core/pointer_helpers.h:28: EOF#1017 ptr_to_v8 at 0xb425e27e in openjs::extensions::do_v8_ostream_internal(std::ostream*) from /usr/lib/openjs/basicstream.so
0.33320700 0105 [funct] basicstream.cc:76: EOF#1013 do_v8_ostream_internal at 0xb4233299 in v8::Handle<v8::Value> do_v8_standard_stream_init<2>(v8::Arguments const&) from /usr/lib/openjs/basicsys.so
0.33325800 0104 [funct] basicsys.cc:37: EOF#1012 do_v8_standard_stream_init at 0xb74f574d from /usr/lib/libv8_g.so
0.33406000 0006 [info ] loader.cc:201: /usr/lib/openjs/system.js: Source library loaded
0.33409000 0103 [funct] loader.cc:166: EOF#986 do_v8_fs_load_js at 0xb74f574d from /usr/lib/libv8_g.so
0.33437600 0103 [funct] loader.cc:155: SOF#1020 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33457700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1021 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33480200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1022 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33484600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/gdome.dep'
0.33486400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1022 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33487900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1021 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33492000 0103 [funct] loader.cc:155: EOF#1020 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.33509400 0103 [funct] loader.cc:155: SOF#1023 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33529200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1024 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33557300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1025 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33561800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/gdome.so'
0.33563600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1025 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33565100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1024 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33568200 0103 [funct] loader.cc:155: EOF#1023 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.33586000 0103 [funct] loader.cc:155: SOF#1026 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33607600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1027 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33629500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1028 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33633800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/gdome.js'
0.33635600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1028 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33637100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1027 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33640600 0103 [funct] loader.cc:155: EOF#1026 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.33658100 0103 [funct] loader.cc:131: SOF#1029 do_v8_readfile (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33677800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1030 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33699800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1031 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33704200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/gdome.dep'
0.33706000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1031 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33707500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1030 convert<std::string,v8::Local<v8::Value>> at 0xb4294ee0 in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33728500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1032 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33749400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1033 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.33753100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1033 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.33754800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1032 convert<v8::Handle<v8::Value>,std::string> at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33774600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1034 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33795400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1035 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.33799100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1035 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.33800800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1034 convert<v8::Handle<v8::Value>,std::string> at 0xb429521b in do_v8_read_dep_file(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33804100 0103 [funct] loader.cc:131: EOF#1029 do_v8_readfile at 0xb74f574d from /usr/lib/libv8_g.so
0.33827400 0103 [funct] loader.cc:155: SOF#1036 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33847500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1037 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33868600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1038 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33874200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/mod_cgdome.dep'
0.33876000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1038 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33877500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1037 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33880300 0103 [funct] loader.cc:155: EOF#1036 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.33904700 0103 [funct] loader.cc:155: SOF#1039 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33925700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1040 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33948800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1041 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33953800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/mod_cgdome.so'
0.33955600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1041 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.33957100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1040 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.33960700 0103 [funct] loader.cc:155: EOF#1039 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.33978300 0103 [funct] loader.cc:155: SOF#1042 do_v8_file_exists (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.33998300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1043 convert<std::string,v8::Local<v8::Value>> (value) at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34019400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1044 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34023800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/mod_cgdome.js'
0.34025600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1044 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34027100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1043 convert<std::string,v8::Local<v8::Value>> at 0xb42959ee in do_v8_file_exists(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34029900 0103 [funct] loader.cc:155: EOF#1042 do_v8_file_exists at 0xb74f574d from /usr/lib/libv8_g.so
0.34048600 0103 [funct] loader.cc:27: SOF#1045 v8_openjs_extension_load_dl (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.34068500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1046 ptr_from_v8 (a, a_type='openjs::core::extension_context*') at 0xb429b361 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34092900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1047 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.34115900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1048 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34120100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`openjs::core::extension_context*'
0.34121900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1048 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34123400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1047 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.34129100 0105 [debug] ../../core/pointer_helpers.h:51: type='openjs::core::extension_context*', address='3217125712'
0.34131000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1046 ptr_from_v8 at 0xb429b361 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34149600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1049 convert<std::string,v8::Local<v8::Value>> (value) at 0xb429b3af in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34170900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1050 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34175200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/mod_cgdome.so'
0.34177000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1050 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34178500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1049 convert<std::string,v8::Local<v8::Value>> at 0xb429b3af in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34315300 0104 [funct] ../../core/extension.h:60: SOF#1051 extension () at 0xb3f2820a in openjs::extensions::cgdome::cgdome(openjs::configuration const&) from /usr/lib/openjs/mod_cgdome.so
0.34319200 0104 [funct] ../../core/extension.h:60: EOF#1051 extension at 0xb3f2820a in openjs::extensions::cgdome::cgdome(openjs::configuration const&) from /usr/lib/openjs/mod_cgdome.so
0.34349900 0104 [funct] mod_cgdome.cc:102: SOF#1052 cgdome () at 0xb4199454 in Modular::DLHandshake<openjs::extensions::cgdome>::DLHandshake() from /usr/lib/openjs/mod_cgdome.so
0.34355600 0104 [funct] mod_cgdome.cc:102: EOF#1052 cgdome at 0xb4199454 in Modular::DLHandshake<openjs::extensions::cgdome>::DLHandshake() from /usr/lib/openjs/mod_cgdome.so
0.34375900 0104 [funct] mod_cgdome.cc:108: SOF#1053 init () at 0xb429b406 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34379600 0105 [debug] mod_cgdome.cc:113: 1
0.34401600 0105 [funct] ../../core/v8_util.h:78: SOF#1054 v8_init_object_template() () at 0xb3f2b4c1 in openjs::extensions::cgdome::init(openjs::core::extension_context&) from /usr/lib/openjs/mod_cgdome.so
0.34425600 0106 [funct] ../../core/v8_util.h:66: SOF#1055 v8_init_function_template() () at 0xb426bef3 in void openjs::v8_init_object_template<v8::Persistent<v8::FunctionTemplate>, v8::Persistent<v8::ObjectTemplate> >(v8::Persistent<v8::FunctionTemplate>&, v8::Persistent<v8::ObjectTemplate>&) from /usr/lib/openjs/basicstream.so
0.34431100 0106 [funct] ../../core/v8_util.h:66: EOF#1055 v8_init_function_template() at 0xb426bef3 in void openjs::v8_init_object_template<v8::Persistent<v8::FunctionTemplate>, v8::Persistent<v8::ObjectTemplate> >(v8::Persistent<v8::FunctionTemplate>&, v8::Persistent<v8::ObjectTemplate>&) from /usr/lib/openjs/basicstream.so
0.34433400 0105 [funct] ../../core/v8_util.h:78: EOF#1054 v8_init_object_template() at 0xb3f2b4c1 in openjs::extensions::cgdome::init(openjs::core::extension_context&) from /usr/lib/openjs/mod_cgdome.so
0.34435100 0105 [debug] mod_cgdome.cc:117: 2
0.34436800 0105 [debug] mod_cgdome.cc:120: 3
0.34457900 0105 [funct] ../../core/v8_util.h:91: SOF#1056 v8_init_object () at 0xb3f2b797 in openjs::extensions::cgdome::init(openjs::core::extension_context&) from /usr/lib/openjs/mod_cgdome.so
0.34461300 0106 [debug] ../../core/v8_util.h:92: 1
0.34463000 0106 [debug] ../../core/v8_util.h:94: 2
0.34464500 0106 [debug] ../../core/v8_util.h:96: 3
0.34479400 0106 [debug] ../../core/v8_util.h:98: 4
0.34481300 0106 [debug] ../../core/v8_util.h:100: 5
0.34482900 0106 [debug] ../../core/v8_util.h:102: 6
0.34484400 0105 [funct] ../../core/v8_util.h:91: EOF#1056 v8_init_object at 0xb3f2b797 in openjs::extensions::cgdome::init(openjs::core::extension_context&) from /usr/lib/openjs/mod_cgdome.so
0.34486100 0105 [debug] mod_cgdome.cc:123: 4
0.34487700 0105 [debug] mod_cgdome.cc:126: 5
0.34489900 0105 [debug] mod_cgdome.cc:128: 6
0.34493300 0105 [debug] mod_cgdome.cc:130: 7
0.34507200 0105 [debug] mod_cgdome.cc:132: 8
0.34513300 0105 [debug] mod_cgdome.cc:135: 9
0.34719000 0105 [debug] mod_cgdome.cc:138: 10
0.34721000 0105 [debug] mod_cgdome.cc:141: 11
0.34726300 0104 [funct] mod_cgdome.cc:108: EOF#1053 init at 0xb429b406 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34728100 0006 [info ] loader.cc:41: /usr/lib/openjs/mod_cgdome.so: Dynamic library loaded
0.34746800 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1057 ptr_to_v8 (address=135021536, type='openjs::core::LoadedExtension*') at 0xb429b6a0 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34771700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1058 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.34796100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1059 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.34800100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1059 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.34802000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1058 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.34806400 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1057 ptr_to_v8 at 0xb429b6a0 in v8_openjs_extension_load_dl(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34808500 0103 [funct] loader.cc:27: EOF#1045 v8_openjs_extension_load_dl at 0xb74f574d from /usr/lib/libv8_g.so
0.34842000 0103 [funct] loader.cc:166: SOF#1060 do_v8_fs_load_js (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.34862200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1061 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4298086 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34889600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1062 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34896300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/usr/lib/openjs/gdome.js'
0.34898200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1062 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.34899700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1061 convert<std::string,v8::Local<v8::Value>> at 0xb4298086 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.34901200 0104 [debug] loader.cc:171: /usr/lib/openjs/gdome.js: Loading source library
0.35613500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: SOF#1063 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb42984f8 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.35636100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: SOF#1064 do_ustring_convert_to_v8 (value) at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.35658500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: SOF#1065 do_ustring_convert_to_string (value) at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.35946000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:248: strbuf=`/* Extended JavaScript String library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Define GDOME */
GDOME = {};

/** GdomeException */
function GdomeException(msg) {
	this.pointer = CGDOME.call.gdome_extra_exc_new();
	this.msg = msg;
}

/** Delete GdomeException */
GdomeException.prototype.del = function() {
	CGDOME.call.gdome_extra_exc_del(this.pointer);
}

/** Get/set exception value */
GdomeException.prototype.value = function(v) {
	if(v===undefined) return (CGDOME.call.gdome_extra_exc_getvalue)(this.pointer);
	CGDOME.call.gdome_extra_exc_setvalue(this.pointer, v);
	return v;
}

/** Convert to string */
GdomeException.prototype.toString = function() {
	var id = this.value();
	var msg = "GdomeException: "+this.msg;
	if(id!=0) msg += " (#" + id + ")";
	return msg;
}

/** Our exception data type */
GDOME.exception = new GdomeException();

/** Convert to GdomeNode */
GdomeText.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_text_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Convert to GdomeNode */
GdomeElement.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_element_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Constructor */
function GdomeDOMString(pointer) {
	this.pointer = pointer;
}

/** Create gdome string */
GdomeDOMString.mkref = function(str) {
	var str_ptr = CGDOME.call.gdome_str_mkref_dup(str);
	if (str_ptr == 0) { throw GDOME.exception; }
	return new GdomeDOMString(str_ptr);
}

/** Convert to string */
GdomeDOMString.prototype.toString = function() {
	if(this.pointer.address == 0) return "";
	var str = "";
	for(var i=0; i<this.length(); ++i) { str += this.charAt(i); }
	return str;
}

/** unref */
GdomeDOMString.prototype.unref = function() {
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** Gdome DOM Implementation */
GDOME.createDOMImplementation = function() {
	GDOME.exception.msg = "gdome_di_mkref";
	var di_pointer = CGDOME.call.gdome_di_mkref();
	if (di_pointer == 0) { throw GDOME.exception; }
	return new GdomeDOMImplementation(di_pointer);
}

/* Construct an object (if called with new) or try to convert object to GdomeNode */
/*
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toNode !== undefined) {
			return arg1.toNode();
		}
	}
}
*/

/* EOF */
/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMString(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDOMString) {
			return arg1;
		} else if(arg1.toGdomeDOMString !== undefined) {
			return arg1.toGdomeDOMString();
		} else {
			throw "Could not convert object to GdomeDOMString!";
		}
	}
}

/** GdomeDOMString ref method
 * C header: void gdome_str_ref(GdomeDOMString*)
 */
GdomeDOMString.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_ref(this.pointer);
}

/** GdomeDOMString unref method
 * C header: void gdome_str_unref(GdomeDOMString*)
 */
GdomeDOMString.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** GdomeDOMString length method
 * C header: int gdome_str_length(GdomeDOMString*)
 */
GdomeDOMString.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_length(this.pointer);
	return ret;
}

/** GdomeDOMString isEmpty method
 * C header: GdomeBoolean gdome_str_isEmpty(GdomeDOMString*)
 */
GdomeDOMString.prototype.isEmpty = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_isEmpty(this.pointer);
	return (ret === 1) ? true : false;
}

/** GdomeDOMString charAt method
 * C header: gchar gdome_str_charAt(GdomeDOMString*, int)
 */
GdomeDOMString.prototype.charAt = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_charAt(this.pointer, arg0);
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMImplementation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
	} else {
		if(arg1 instanceof GdomeDOMImplementation) {
			return arg1;
		} else if(arg1.toGdomeDOMImplementation !== undefined) {
			return arg1.toGdomeDOMImplementation();
		} else {
			throw "Could not convert object to GdomeDOMImplementation!";
		}
	}
}

/** GdomeDOMImplementation ref method
 * C header: void gdome_di_ref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.ref";
	CGDOME.call.gdome_di_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation unref method
 * C header: void gdome_di_unref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.unref";
	CGDOME.call.gdome_di_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocumentType method
 * C header: GdomeDocumentType* gdome_di_createDocumentType(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocumentType = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType";
	var ret = CGDOME.call.gdome_di_createDocumentType(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDOMImplementation createDocument method
 * C header: GdomeDocument* gdome_di_createDocument(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDocumentType*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocument = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg2 instanceof GdomeDocumentType)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: argument not instance of GdomeDocumentType";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: !arg2.pointer";
	if(arg2.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument";
	var ret = CGDOME.call.gdome_di_createDocument(this.pointer, gstr0.pointer, gstr1.pointer, arg2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation freeDoc method
 * C header: void gdome_di_freeDoc(GdomeDOMImplementation*, GdomeDocument*, GdomeException*)
 */
GdomeDOMImplementation.prototype.freeDoc = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc";
	CGDOME.call.gdome_di_freeDoc(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocFromURI method
 * C header: GdomeDocument* gdome_di_createDocFromURI(GdomeDOMImplementation*, const char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromURI = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromURI";
	var ret = CGDOME.call.gdome_di_createDocFromURI(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation createDocFromMemory method
 * C header: GdomeDocument* gdome_di_createDocFromMemory(GdomeDOMImplementation*, char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromMemory = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromMemory";
	var ret = CGDOME.call.gdome_di_createDocFromMemory(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation saveDocToFile method
 * C header: GdomeBoolean gdome_di_saveDocToFile(GdomeDOMImplementation*, GdomeDocument*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFile = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile";
	var ret = CGDOME.call.gdome_di_saveDocToFile(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToFileEnc method
 * C header: GdomeBoolean gdome_di_saveDocToFileEnc(GdomeDOMImplementation*, GdomeDocument*, const char*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFileEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc";
	var ret = CGDOME.call.gdome_di_saveDocToFileEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemory method
 * C header: GdomeBoolean gdome_di_saveDocToMemory(GdomeDOMImplementation*, GdomeDocument*, char**, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemory = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory";
	var ret = CGDOME.call.gdome_di_saveDocToMemory(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemoryEnc method
 * C header: GdomeBoolean gdome_di_saveDocToMemoryEnc(GdomeDOMImplementation*, GdomeDocument*, char**, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemoryEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc";
	var ret = CGDOME.call.gdome_di_saveDocToMemoryEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentType(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentType) {
			return arg1;
		} else if(arg1.toGdomeDocumentType !== undefined) {
			return arg1.toGdomeDocumentType();
		} else {
			throw "Could not convert object to GdomeDocumentType!";
		}
	}
}

/** GdomeDocumentType name method
 * C header: GdomeDOMString* gdome_dt_name(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.name";
	var ret = CGDOME.call.gdome_dt_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType entities method
 * C header: GdomeNamedNodeMap* gdome_dt_entities(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.entities = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.entities";
	var ret = CGDOME.call.gdome_dt_entities(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType notations method
 * C header: GdomeNamedNodeMap* gdome_dt_notations(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.notations = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.notations";
	var ret = CGDOME.call.gdome_dt_notations(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType publicId method
 * C header: GdomeDOMString* gdome_dt_publicId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.publicId";
	var ret = CGDOME.call.gdome_dt_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType systemId method
 * C header: GdomeDOMString* gdome_dt_systemId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.systemId";
	var ret = CGDOME.call.gdome_dt_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType internalSubset method
 * C header: GdomeDOMString* gdome_dt_internalSubset(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.internalSubset = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.internalSubset";
	var ret = CGDOME.call.gdome_dt_internalSubset(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType ref method
 * C header: void gdome_dt_ref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ref";
	CGDOME.call.gdome_dt_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType unref method
 * C header: void gdome_dt_unref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.unref";
	CGDOME.call.gdome_dt_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType query_interface method
 * C header: gpointer gdome_dt_query_interface(GdomeDocumentType*, const char*, GdomeException*)
 */
GdomeDocumentType.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.query_interface";
	var ret = CGDOME.call.gdome_dt_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType nodeName method
 * C header: GdomeDOMString* gdome_dt_nodeName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeName";
	var ret = CGDOME.call.gdome_dt_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType nodeValue method
 * C header: GdomeDOMString* gdome_dt_nodeValue(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeValue";
	var ret = CGDOME.call.gdome_dt_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_nodeValue method
 * C header: void gdome_dt_set_nodeValue(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue";
	CGDOME.call.gdome_dt_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType nodeType method
 * C header: unsigned short gdome_dt_nodeType(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeType";
	var ret = CGDOME.call.gdome_dt_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType parentNode method
 * C header: GdomeNode* gdome_dt_parentNode(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.parentNode";
	var ret = CGDOME.call.gdome_dt_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType childNodes method
 * C header: GdomeNodeList* gdome_dt_childNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.childNodes";
	var ret = CGDOME.call.gdome_dt_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentType firstChild method
 * C header: GdomeNode* gdome_dt_firstChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.firstChild";
	var ret = CGDOME.call.gdome_dt_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType lastChild method
 * C header: GdomeNode* gdome_dt_lastChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.lastChild";
	var ret = CGDOME.call.gdome_dt_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType previousSibling method
 * C header: GdomeNode* gdome_dt_previousSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.previousSibling";
	var ret = CGDOME.call.gdome_dt_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType nextSibling method
 * C header: GdomeNode* gdome_dt_nextSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nextSibling";
	var ret = CGDOME.call.gdome_dt_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType attributes method
 * C header: GdomeNamedNodeMap* gdome_dt_attributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.attributes";
	var ret = CGDOME.call.gdome_dt_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType ownerDocument method
 * C header: GdomeDocument* gdome_dt_ownerDocument(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_dt_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentType insertBefore method
 * C header: GdomeNode* gdome_dt_insertBefore(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore";
	var ret = CGDOME.call.gdome_dt_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType replaceChild method
 * C header: GdomeNode* gdome_dt_replaceChild(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild";
	var ret = CGDOME.call.gdome_dt_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType removeChild method
 * C header: GdomeNode* gdome_dt_removeChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild";
	var ret = CGDOME.call.gdome_dt_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType appendChild method
 * C header: GdomeNode* gdome_dt_appendChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild";
	var ret = CGDOME.call.gdome_dt_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType hasChildNodes method
 * C header: GdomeBoolean gdome_dt_hasChildNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_dt_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType cloneNode method
 * C header: GdomeNode* gdome_dt_cloneNode(GdomeDocumentType*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.cloneNode";
	var ret = CGDOME.call.gdome_dt_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType normalize method
 * C header: void gdome_dt_normalize(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.normalize";
	CGDOME.call.gdome_dt_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType isSupported method
 * C header: GdomeBoolean gdome_dt_isSupported(GdomeDocumentType*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported";
	var ret = CGDOME.call.gdome_dt_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType namespaceURI method
 * C header: GdomeDOMString* gdome_dt_namespaceURI(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_dt_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType prefix method
 * C header: GdomeDOMString* gdome_dt_prefix(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.prefix";
	var ret = CGDOME.call.gdome_dt_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_prefix method
 * C header: void gdome_dt_set_prefix(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix";
	CGDOME.call.gdome_dt_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType localName method
 * C header: GdomeDOMString* gdome_dt_localName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.localName";
	var ret = CGDOME.call.gdome_dt_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType hasAttributes method
 * C header: GdomeBoolean gdome_dt_hasAttributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_dt_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType addEventListener method
 * C header: void gdome_dt_addEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener";
	CGDOME.call.gdome_dt_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType removeEventListener method
 * C header: void gdome_dt_removeEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener";
	CGDOME.call.gdome_dt_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType dispatchEvent method
 * C header: GdomeBoolean gdome_dt_dispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_dt_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType subTreeDispatchEvent method
 * C header: void gdome_dt_subTreeDispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_dt_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType canAppend method
 * C header: GdomeBoolean gdome_dt_canAppend(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend";
	var ret = CGDOME.call.gdome_dt_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentFragment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentFragment) {
			return arg1;
		} else if(arg1.toGdomeDocumentFragment !== undefined) {
			return arg1.toGdomeDocumentFragment();
		} else {
			throw "Could not convert object to GdomeDocumentFragment!";
		}
	}
}

/** GdomeDocumentFragment ref method
 * C header: void gdome_df_ref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ref";
	CGDOME.call.gdome_df_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment unref method
 * C header: void gdome_df_unref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.unref";
	CGDOME.call.gdome_df_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment query_interface method
 * C header: gpointer gdome_df_query_interface(GdomeDocumentFragment*, const char*, GdomeException*)
 */
GdomeDocumentFragment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.query_interface";
	var ret = CGDOME.call.gdome_df_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment nodeName method
 * C header: GdomeDOMString* gdome_df_nodeName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeName";
	var ret = CGDOME.call.gdome_df_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment nodeValue method
 * C header: GdomeDOMString* gdome_df_nodeValue(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_df_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_nodeValue method
 * C header: void gdome_df_set_nodeValue(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue";
	CGDOME.call.gdome_df_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment nodeType method
 * C header: unsigned short gdome_df_nodeType(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeType";
	var ret = CGDOME.call.gdome_df_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment parentNode method
 * C header: GdomeNode* gdome_df_parentNode(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.parentNode";
	var ret = CGDOME.call.gdome_df_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment childNodes method
 * C header: GdomeNodeList* gdome_df_childNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.childNodes";
	var ret = CGDOME.call.gdome_df_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentFragment firstChild method
 * C header: GdomeNode* gdome_df_firstChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.firstChild";
	var ret = CGDOME.call.gdome_df_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment lastChild method
 * C header: GdomeNode* gdome_df_lastChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.lastChild";
	var ret = CGDOME.call.gdome_df_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment previousSibling method
 * C header: GdomeNode* gdome_df_previousSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_df_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment nextSibling method
 * C header: GdomeNode* gdome_df_nextSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_df_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment attributes method
 * C header: GdomeNamedNodeMap* gdome_df_attributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.attributes";
	var ret = CGDOME.call.gdome_df_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentFragment ownerDocument method
 * C header: GdomeDocument* gdome_df_ownerDocument(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_df_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentFragment insertBefore method
 * C header: GdomeNode* gdome_df_insertBefore(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_df_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment replaceChild method
 * C header: GdomeNode* gdome_df_replaceChild(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_df_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment removeChild method
 * C header: GdomeNode* gdome_df_removeChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild";
	var ret = CGDOME.call.gdome_df_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment appendChild method
 * C header: GdomeNode* gdome_df_appendChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild";
	var ret = CGDOME.call.gdome_df_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment hasChildNodes method
 * C header: GdomeBoolean gdome_df_hasChildNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_df_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment cloneNode method
 * C header: GdomeNode* gdome_df_cloneNode(GdomeDocumentFragment*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_df_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment normalize method
 * C header: void gdome_df_normalize(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.normalize";
	CGDOME.call.gdome_df_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment isSupported method
 * C header: GdomeBoolean gdome_df_isSupported(GdomeDocumentFragment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported";
	var ret = CGDOME.call.gdome_df_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment namespaceURI method
 * C header: GdomeDOMString* gdome_df_namespaceURI(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_df_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment prefix method
 * C header: GdomeDOMString* gdome_df_prefix(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.prefix";
	var ret = CGDOME.call.gdome_df_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_prefix method
 * C header: void gdome_df_set_prefix(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix";
	CGDOME.call.gdome_df_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment localName method
 * C header: GdomeDOMString* gdome_df_localName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.localName";
	var ret = CGDOME.call.gdome_df_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment hasAttributes method
 * C header: GdomeBoolean gdome_df_hasAttributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_df_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment addEventListener method
 * C header: void gdome_df_addEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener";
	CGDOME.call.gdome_df_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment removeEventListener method
 * C header: void gdome_df_removeEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener";
	CGDOME.call.gdome_df_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment dispatchEvent method
 * C header: GdomeBoolean gdome_df_dispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_df_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment subTreeDispatchEvent method
 * C header: void gdome_df_subTreeDispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_df_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment canAppend method
 * C header: GdomeBoolean gdome_df_canAppend(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend";
	var ret = CGDOME.call.gdome_df_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocument(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocument) {
			return arg1;
		} else if(arg1.toGdomeDocument !== undefined) {
			return arg1.toGdomeDocument();
		} else {
			throw "Could not convert object to GdomeDocument!";
		}
	}
}

/** GdomeDocument doctype method
 * C header: GdomeDocumentType* gdome_doc_doctype(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.doctype = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.doctype";
	var ret = CGDOME.call.gdome_doc_doctype(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDocument implementation method
 * C header: GdomeDOMImplementation* gdome_doc_implementation(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.implementation = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.implementation";
	var ret = CGDOME.call.gdome_doc_implementation(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMImplementation(ret, this.di); }
}

/** GdomeDocument documentElement method
 * C header: GdomeElement* gdome_doc_documentElement(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.documentElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.documentElement";
	var ret = CGDOME.call.gdome_doc_documentElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createElement method
 * C header: GdomeElement* gdome_doc_createElement(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElement = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElement: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElement";
	var ret = CGDOME.call.gdome_doc_createElement(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createDocumentFragment method
 * C header: GdomeDocumentFragment* gdome_doc_createDocumentFragment(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.createDocumentFragment = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.createDocumentFragment";
	var ret = CGDOME.call.gdome_doc_createDocumentFragment(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentFragment(ret, this.di); }
}

/** GdomeDocument createTextNode method
 * C header: GdomeText* gdome_doc_createTextNode(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createTextNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createTextNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createTextNode";
	var ret = CGDOME.call.gdome_doc_createTextNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeDocument createComment method
 * C header: GdomeComment* gdome_doc_createComment(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createComment = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createComment: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createComment";
	var ret = CGDOME.call.gdome_doc_createComment(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeComment(ret, this.di); }
}

/** GdomeDocument createCDATASection method
 * C header: GdomeCDATASection* gdome_doc_createCDATASection(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createCDATASection = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection";
	var ret = CGDOME.call.gdome_doc_createCDATASection(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeCDATASection(ret, this.di); }
}

/** GdomeDocument createProcessingInstruction method
 * C header: GdomeProcessingInstruction* gdome_doc_createProcessingInstruction(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createProcessingInstruction = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction";
	var ret = CGDOME.call.gdome_doc_createProcessingInstruction(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeProcessingInstruction(ret, this.di); }
}

/** GdomeDocument createAttribute method
 * C header: GdomeAttr* gdome_doc_createAttribute(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttribute";
	var ret = CGDOME.call.gdome_doc_createAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument createEntityReference method
 * C header: GdomeEntityReference* gdome_doc_createEntityReference(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEntityReference = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference";
	var ret = CGDOME.call.gdome_doc_createEntityReference(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEntityReference(ret, this.di); }
}

/** GdomeDocument getElementsByTagName method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagName(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_doc_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument importNode method
 * C header: GdomeNode* gdome_doc_importNode(GdomeDocument*, GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.importNode = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.importNode: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.importNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.importNode";
	var ret = CGDOME.call.gdome_doc_importNode(this.pointer, arg0.pointer, (arg1?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument createElementNS method
 * C header: GdomeElement* gdome_doc_createElementNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElementNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElementNS";
	var ret = CGDOME.call.gdome_doc_createElementNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createAttributeNS method
 * C header: GdomeAttr* gdome_doc_createAttributeNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS";
	var ret = CGDOME.call.gdome_doc_createAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagNameNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_doc_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument getElementById method
 * C header: GdomeElement* gdome_doc_getElementById(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementById = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementById: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementById";
	var ret = CGDOME.call.gdome_doc_getElementById(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createEvent method
 * C header: GdomeEvent* gdome_doc_createEvent(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEvent: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEvent";
	var ret = CGDOME.call.gdome_doc_createEvent(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEvent(ret, this.di); }
}

/** GdomeDocument ref method
 * C header: void gdome_doc_ref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ref";
	CGDOME.call.gdome_doc_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument unref method
 * C header: void gdome_doc_unref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.unref";
	CGDOME.call.gdome_doc_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument query_interface method
 * C header: gpointer gdome_doc_query_interface(GdomeDocument*, const char*, GdomeException*)
 */
GdomeDocument.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.query_interface";
	var ret = CGDOME.call.gdome_doc_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument nodeName method
 * C header: GdomeDOMString* gdome_doc_nodeName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeName";
	var ret = CGDOME.call.gdome_doc_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument nodeValue method
 * C header: GdomeDOMString* gdome_doc_nodeValue(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeValue";
	var ret = CGDOME.call.gdome_doc_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_nodeValue method
 * C header: void gdome_doc_set_nodeValue(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue";
	CGDOME.call.gdome_doc_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument nodeType method
 * C header: unsigned short gdome_doc_nodeType(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeType";
	var ret = CGDOME.call.gdome_doc_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument parentNode method
 * C header: GdomeNode* gdome_doc_parentNode(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.parentNode";
	var ret = CGDOME.call.gdome_doc_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument childNodes method
 * C header: GdomeNodeList* gdome_doc_childNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.childNodes";
	var ret = CGDOME.call.gdome_doc_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument firstChild method
 * C header: GdomeNode* gdome_doc_firstChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.firstChild";
	var ret = CGDOME.call.gdome_doc_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument lastChild method
 * C header: GdomeNode* gdome_doc_lastChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.lastChild";
	var ret = CGDOME.call.gdome_doc_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument previousSibling method
 * C header: GdomeNode* gdome_doc_previousSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.previousSibling";
	var ret = CGDOME.call.gdome_doc_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument nextSibling method
 * C header: GdomeNode* gdome_doc_nextSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nextSibling";
	var ret = CGDOME.call.gdome_doc_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument attributes method
 * C header: GdomeNamedNodeMap* gdome_doc_attributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.attributes";
	var ret = CGDOME.call.gdome_doc_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocument ownerDocument method
 * C header: GdomeDocument* gdome_doc_ownerDocument(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_doc_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocument insertBefore method
 * C header: GdomeNode* gdome_doc_insertBefore(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore";
	var ret = CGDOME.call.gdome_doc_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument replaceChild method
 * C header: GdomeNode* gdome_doc_replaceChild(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild";
	var ret = CGDOME.call.gdome_doc_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument removeChild method
 * C header: GdomeNode* gdome_doc_removeChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild";
	var ret = CGDOME.call.gdome_doc_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument appendChild method
 * C header: GdomeNode* gdome_doc_appendChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild";
	var ret = CGDOME.call.gdome_doc_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument hasChildNodes method
 * C header: GdomeBoolean gdome_doc_hasChildNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_doc_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument cloneNode method
 * C header: GdomeNode* gdome_doc_cloneNode(GdomeDocument*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.cloneNode";
	var ret = CGDOME.call.gdome_doc_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument normalize method
 * C header: void gdome_doc_normalize(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.normalize";
	CGDOME.call.gdome_doc_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument isSupported method
 * C header: GdomeBoolean gdome_doc_isSupported(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.isSupported";
	var ret = CGDOME.call.gdome_doc_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument namespaceURI method
 * C header: GdomeDOMString* gdome_doc_namespaceURI(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_doc_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument prefix method
 * C header: GdomeDOMString* gdome_doc_prefix(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.prefix";
	var ret = CGDOME.call.gdome_doc_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_prefix method
 * C header: void gdome_doc_set_prefix(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_prefix";
	CGDOME.call.gdome_doc_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument localName method
 * C header: GdomeDOMString* gdome_doc_localName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.localName";
	var ret = CGDOME.call.gdome_doc_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument hasAttributes method
 * C header: GdomeBoolean gdome_doc_hasAttributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_doc_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument addEventListener method
 * C header: void gdome_doc_addEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener";
	CGDOME.call.gdome_doc_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument removeEventListener method
 * C header: void gdome_doc_removeEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener";
	CGDOME.call.gdome_doc_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument dispatchEvent method
 * C header: GdomeBoolean gdome_doc_dispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_doc_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument subTreeDispatchEvent method
 * C header: void gdome_doc_subTreeDispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_doc_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument canAppend method
 * C header: GdomeBoolean gdome_doc_canAppend(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend";
	var ret = CGDOME.call.gdome_doc_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toGdomeNode !== undefined) {
			return arg1.toGdomeNode();
		} else {
			throw "Could not convert object to GdomeNode!";
		}
	}
}

/** GdomeNode ref method
 * C header: void gdome_n_ref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ref";
	CGDOME.call.gdome_n_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode unref method
 * C header: void gdome_n_unref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.unref";
	CGDOME.call.gdome_n_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode query_interface method
 * C header: gpointer gdome_n_query_interface(GdomeNode*, const char*, GdomeException*)
 */
GdomeNode.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.query_interface";
	var ret = CGDOME.call.gdome_n_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode nodeName method
 * C header: GdomeDOMString* gdome_n_nodeName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeName";
	var ret = CGDOME.call.gdome_n_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode nodeValue method
 * C header: GdomeDOMString* gdome_n_nodeValue(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeValue";
	var ret = CGDOME.call.gdome_n_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_nodeValue method
 * C header: void gdome_n_set_nodeValue(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue";
	CGDOME.call.gdome_n_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode nodeType method
 * C header: unsigned short gdome_n_nodeType(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeType";
	var ret = CGDOME.call.gdome_n_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode parentNode method
 * C header: GdomeNode* gdome_n_parentNode(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.parentNode";
	var ret = CGDOME.call.gdome_n_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode childNodes method
 * C header: GdomeNodeList* gdome_n_childNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.childNodes";
	var ret = CGDOME.call.gdome_n_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNode firstChild method
 * C header: GdomeNode* gdome_n_firstChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.firstChild";
	var ret = CGDOME.call.gdome_n_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode lastChild method
 * C header: GdomeNode* gdome_n_lastChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.lastChild";
	var ret = CGDOME.call.gdome_n_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode previousSibling method
 * C header: GdomeNode* gdome_n_previousSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.previousSibling";
	var ret = CGDOME.call.gdome_n_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode nextSibling method
 * C header: GdomeNode* gdome_n_nextSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nextSibling";
	var ret = CGDOME.call.gdome_n_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode attributes method
 * C header: GdomeNamedNodeMap* gdome_n_attributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.attributes";
	var ret = CGDOME.call.gdome_n_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNode ownerDocument method
 * C header: GdomeDocument* gdome_n_ownerDocument(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_n_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNode insertBefore method
 * C header: GdomeNode* gdome_n_insertBefore(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore";
	var ret = CGDOME.call.gdome_n_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode replaceChild method
 * C header: GdomeNode* gdome_n_replaceChild(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild";
	var ret = CGDOME.call.gdome_n_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode removeChild method
 * C header: GdomeNode* gdome_n_removeChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeChild";
	var ret = CGDOME.call.gdome_n_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode appendChild method
 * C header: GdomeNode* gdome_n_appendChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.appendChild";
	var ret = CGDOME.call.gdome_n_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode hasChildNodes method
 * C header: GdomeBoolean gdome_n_hasChildNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_n_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode cloneNode method
 * C header: GdomeNode* gdome_n_cloneNode(GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.cloneNode";
	var ret = CGDOME.call.gdome_n_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode normalize method
 * C header: void gdome_n_normalize(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.normalize";
	CGDOME.call.gdome_n_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode isSupported method
 * C header: GdomeBoolean gdome_n_isSupported(GdomeNode*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.isSupported";
	var ret = CGDOME.call.gdome_n_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode namespaceURI method
 * C header: GdomeDOMString* gdome_n_namespaceURI(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_n_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode prefix method
 * C header: GdomeDOMString* gdome_n_prefix(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.prefix";
	var ret = CGDOME.call.gdome_n_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_prefix method
 * C header: void gdome_n_set_prefix(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_prefix";
	CGDOME.call.gdome_n_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode localName method
 * C header: GdomeDOMString* gdome_n_localName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.localName";
	var ret = CGDOME.call.gdome_n_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode hasAttributes method
 * C header: GdomeBoolean gdome_n_hasAttributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_n_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode addEventListener method
 * C header: void gdome_n_addEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener";
	CGDOME.call.gdome_n_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode removeEventListener method
 * C header: void gdome_n_removeEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener";
	CGDOME.call.gdome_n_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode dispatchEvent method
 * C header: GdomeBoolean gdome_n_dispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_n_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode subTreeDispatchEvent method
 * C header: void gdome_n_subTreeDispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_n_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode canAppend method
 * C header: GdomeBoolean gdome_n_canAppend(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.canAppend";
	var ret = CGDOME.call.gdome_n_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNodeList(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNodeList) {
			return arg1;
		} else if(arg1.toGdomeNodeList !== undefined) {
			return arg1.toGdomeNodeList();
		} else {
			throw "Could not convert object to GdomeNodeList!";
		}
	}
}

/** GdomeNodeList ref method
 * C header: void gdome_nl_ref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.ref";
	CGDOME.call.gdome_nl_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList unref method
 * C header: void gdome_nl_unref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.unref";
	CGDOME.call.gdome_nl_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList query_interface method
 * C header: gpointer gdome_nl_query_interface(GdomeNodeList*, const char*, GdomeException*)
 */
GdomeNodeList.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.query_interface";
	var ret = CGDOME.call.gdome_nl_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNodeList item method
 * C header: GdomeNode* gdome_nl_item(GdomeNodeList*, gulong, GdomeException*)
 */
GdomeNodeList.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.item";
	var ret = CGDOME.call.gdome_nl_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNodeList length method
 * C header: gulong gdome_nl_length(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.length";
	var ret = CGDOME.call.gdome_nl_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNamedNodeMap(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNamedNodeMap) {
			return arg1;
		} else if(arg1.toGdomeNamedNodeMap !== undefined) {
			return arg1.toGdomeNamedNodeMap();
		} else {
			throw "Could not convert object to GdomeNamedNodeMap!";
		}
	}
}

/** GdomeNamedNodeMap ref method
 * C header: void gdome_nnm_ref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.ref";
	CGDOME.call.gdome_nnm_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap unref method
 * C header: void gdome_nnm_unref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.unref";
	CGDOME.call.gdome_nnm_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap query_interface method
 * C header: gpointer gdome_nnm_query_interface(GdomeNamedNodeMap*, const char*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.query_interface";
	var ret = CGDOME.call.gdome_nnm_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItem method
 * C header: GdomeNode* gdome_nnm_getNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem";
	var ret = CGDOME.call.gdome_nnm_getNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItem method
 * C header: GdomeNode* gdome_nnm_setNamedItem(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem";
	var ret = CGDOME.call.gdome_nnm_setNamedItem(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItem method
 * C header: GdomeNode* gdome_nnm_removeNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem";
	var ret = CGDOME.call.gdome_nnm_removeNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap item method
 * C header: GdomeNode* gdome_nnm_item(GdomeNamedNodeMap*, gulong, GdomeException*)
 */
GdomeNamedNodeMap.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.item";
	var ret = CGDOME.call.gdome_nnm_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap length method
 * C header: gulong gdome_nnm_length(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.length";
	var ret = CGDOME.call.gdome_nnm_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItemNS method
 * C header: GdomeNode* gdome_nnm_getNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_getNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItemNS method
 * C header: GdomeNode* gdome_nnm_setNamedItemNS(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItemNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_setNamedItemNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItemNS method
 * C header: GdomeNode* gdome_nnm_removeNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_removeNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCharacterData(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCharacterData) {
			return arg1;
		} else if(arg1.toGdomeCharacterData !== undefined) {
			return arg1.toGdomeCharacterData();
		} else {
			throw "Could not convert object to GdomeCharacterData!";
		}
	}
}

/** GdomeCharacterData data method
 * C header: GdomeDOMString* gdome_cd_data(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.data";
	var ret = CGDOME.call.gdome_cd_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_data method
 * C header: void gdome_cd_set_data(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_data";
	CGDOME.call.gdome_cd_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData length method
 * C header: gulong gdome_cd_length(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.length";
	var ret = CGDOME.call.gdome_cd_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData substringData method
 * C header: GdomeDOMString* gdome_cd_substringData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.substringData";
	var ret = CGDOME.call.gdome_cd_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData appendData method
 * C header: void gdome_cd_appendData(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendData";
	CGDOME.call.gdome_cd_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData insertData method
 * C header: void gdome_cd_insertData(GdomeCharacterData*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertData";
	CGDOME.call.gdome_cd_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData deleteData method
 * C header: void gdome_cd_deleteData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.deleteData";
	CGDOME.call.gdome_cd_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData replaceData method
 * C header: void gdome_cd_replaceData(GdomeCharacterData*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData";
	CGDOME.call.gdome_cd_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData ref method
 * C header: void gdome_cd_ref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ref";
	CGDOME.call.gdome_cd_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData unref method
 * C header: void gdome_cd_unref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.unref";
	CGDOME.call.gdome_cd_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData query_interface method
 * C header: gpointer gdome_cd_query_interface(GdomeCharacterData*, const char*, GdomeException*)
 */
GdomeCharacterData.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.query_interface";
	var ret = CGDOME.call.gdome_cd_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData nodeName method
 * C header: GdomeDOMString* gdome_cd_nodeName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeName";
	var ret = CGDOME.call.gdome_cd_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData nodeValue method
 * C header: GdomeDOMString* gdome_cd_nodeValue(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cd_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_nodeValue method
 * C header: void gdome_cd_set_nodeValue(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue";
	CGDOME.call.gdome_cd_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData nodeType method
 * C header: unsigned short gdome_cd_nodeType(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeType";
	var ret = CGDOME.call.gdome_cd_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData parentNode method
 * C header: GdomeNode* gdome_cd_parentNode(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.parentNode";
	var ret = CGDOME.call.gdome_cd_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData childNodes method
 * C header: GdomeNodeList* gdome_cd_childNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.childNodes";
	var ret = CGDOME.call.gdome_cd_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCharacterData firstChild method
 * C header: GdomeNode* gdome_cd_firstChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.firstChild";
	var ret = CGDOME.call.gdome_cd_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData lastChild method
 * C header: GdomeNode* gdome_cd_lastChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.lastChild";
	var ret = CGDOME.call.gdome_cd_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData previousSibling method
 * C header: GdomeNode* gdome_cd_previousSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cd_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData nextSibling method
 * C header: GdomeNode* gdome_cd_nextSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cd_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData attributes method
 * C header: GdomeNamedNodeMap* gdome_cd_attributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.attributes";
	var ret = CGDOME.call.gdome_cd_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCharacterData ownerDocument method
 * C header: GdomeDocument* gdome_cd_ownerDocument(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cd_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCharacterData insertBefore method
 * C header: GdomeNode* gdome_cd_insertBefore(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cd_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData replaceChild method
 * C header: GdomeNode* gdome_cd_replaceChild(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cd_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData removeChild method
 * C header: GdomeNode* gdome_cd_removeChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild";
	var ret = CGDOME.call.gdome_cd_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData appendChild method
 * C header: GdomeNode* gdome_cd_appendChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild";
	var ret = CGDOME.call.gdome_cd_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData hasChildNodes method
 * C header: GdomeBoolean gdome_cd_hasChildNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cd_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData cloneNode method
 * C header: GdomeNode* gdome_cd_cloneNode(GdomeCharacterData*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cd_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData normalize method
 * C header: void gdome_cd_normalize(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.normalize";
	CGDOME.call.gdome_cd_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData isSupported method
 * C header: GdomeBoolean gdome_cd_isSupported(GdomeCharacterData*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported";
	var ret = CGDOME.call.gdome_cd_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData namespaceURI method
 * C header: GdomeDOMString* gdome_cd_namespaceURI(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cd_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData prefix method
 * C header: GdomeDOMString* gdome_cd_prefix(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.prefix";
	var ret = CGDOME.call.gdome_cd_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_prefix method
 * C header: void gdome_cd_set_prefix(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix";
	CGDOME.call.gdome_cd_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData localName method
 * C header: GdomeDOMString* gdome_cd_localName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.localName";
	var ret = CGDOME.call.gdome_cd_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData hasAttributes method
 * C header: GdomeBoolean gdome_cd_hasAttributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cd_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData addEventListener method
 * C header: void gdome_cd_addEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener";
	CGDOME.call.gdome_cd_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData removeEventListener method
 * C header: void gdome_cd_removeEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener";
	CGDOME.call.gdome_cd_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData dispatchEvent method
 * C header: GdomeBoolean gdome_cd_dispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cd_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData subTreeDispatchEvent method
 * C header: void gdome_cd_subTreeDispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cd_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData canAppend method
 * C header: GdomeBoolean gdome_cd_canAppend(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend";
	var ret = CGDOME.call.gdome_cd_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeAttr(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeAttr) {
			return arg1;
		} else if(arg1.toGdomeAttr !== undefined) {
			return arg1.toGdomeAttr();
		} else {
			throw "Could not convert object to GdomeAttr!";
		}
	}
}

/** GdomeAttr ref method
 * C header: void gdome_a_ref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ref";
	CGDOME.call.gdome_a_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr unref method
 * C header: void gdome_a_unref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.unref";
	CGDOME.call.gdome_a_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr query_interface method
 * C header: gpointer gdome_a_query_interface(GdomeAttr*, const char*, GdomeException*)
 */
GdomeAttr.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.query_interface";
	var ret = CGDOME.call.gdome_a_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr name method
 * C header: GdomeDOMString* gdome_a_name(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.name";
	var ret = CGDOME.call.gdome_a_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr ownerElement method
 * C header: GdomeElement* gdome_a_ownerElement(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerElement";
	var ret = CGDOME.call.gdome_a_ownerElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeAttr specified method
 * C header: GdomeBoolean gdome_a_specified(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.specified = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.specified";
	var ret = CGDOME.call.gdome_a_specified(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr value method
 * C header: GdomeDOMString* gdome_a_value(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.value = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.value";
	var ret = CGDOME.call.gdome_a_value(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_value method
 * C header: void gdome_a_set_value(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_value = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_value: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_value";
	CGDOME.call.gdome_a_set_value(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeName method
 * C header: GdomeDOMString* gdome_a_nodeName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeName";
	var ret = CGDOME.call.gdome_a_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr nodeValue method
 * C header: GdomeDOMString* gdome_a_nodeValue(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeValue";
	var ret = CGDOME.call.gdome_a_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_nodeValue method
 * C header: void gdome_a_set_nodeValue(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue";
	CGDOME.call.gdome_a_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeType method
 * C header: unsigned short gdome_a_nodeType(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeType";
	var ret = CGDOME.call.gdome_a_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr parentNode method
 * C header: GdomeNode* gdome_a_parentNode(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.parentNode";
	var ret = CGDOME.call.gdome_a_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr childNodes method
 * C header: GdomeNodeList* gdome_a_childNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.childNodes";
	var ret = CGDOME.call.gdome_a_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeAttr firstChild method
 * C header: GdomeNode* gdome_a_firstChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.firstChild";
	var ret = CGDOME.call.gdome_a_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr lastChild method
 * C header: GdomeNode* gdome_a_lastChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.lastChild";
	var ret = CGDOME.call.gdome_a_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr previousSibling method
 * C header: GdomeNode* gdome_a_previousSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.previousSibling";
	var ret = CGDOME.call.gdome_a_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr nextSibling method
 * C header: GdomeNode* gdome_a_nextSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nextSibling";
	var ret = CGDOME.call.gdome_a_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr attributes method
 * C header: GdomeNamedNodeMap* gdome_a_attributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.attributes";
	var ret = CGDOME.call.gdome_a_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeAttr ownerDocument method
 * C header: GdomeDocument* gdome_a_ownerDocument(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_a_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeAttr insertBefore method
 * C header: GdomeNode* gdome_a_insertBefore(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore";
	var ret = CGDOME.call.gdome_a_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr replaceChild method
 * C header: GdomeNode* gdome_a_replaceChild(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild";
	var ret = CGDOME.call.gdome_a_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr removeChild method
 * C header: GdomeNode* gdome_a_removeChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild";
	var ret = CGDOME.call.gdome_a_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr appendChild method
 * C header: GdomeNode* gdome_a_appendChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild";
	var ret = CGDOME.call.gdome_a_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr hasChildNodes method
 * C header: GdomeBoolean gdome_a_hasChildNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_a_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr cloneNode method
 * C header: GdomeNode* gdome_a_cloneNode(GdomeAttr*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.cloneNode";
	var ret = CGDOME.call.gdome_a_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr normalize method
 * C header: void gdome_a_normalize(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.normalize";
	CGDOME.call.gdome_a_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr isSupported method
 * C header: GdomeBoolean gdome_a_isSupported(GdomeAttr*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.isSupported";
	var ret = CGDOME.call.gdome_a_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr namespaceURI method
 * C header: GdomeDOMString* gdome_a_namespaceURI(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_a_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr prefix method
 * C header: GdomeDOMString* gdome_a_prefix(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.prefix";
	var ret = CGDOME.call.gdome_a_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_prefix method
 * C header: void gdome_a_set_prefix(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_prefix";
	CGDOME.call.gdome_a_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr localName method
 * C header: GdomeDOMString* gdome_a_localName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.localName";
	var ret = CGDOME.call.gdome_a_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr hasAttributes method
 * C header: GdomeBoolean gdome_a_hasAttributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_a_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr addEventListener method
 * C header: void gdome_a_addEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener";
	CGDOME.call.gdome_a_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr removeEventListener method
 * C header: void gdome_a_removeEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener";
	CGDOME.call.gdome_a_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr dispatchEvent method
 * C header: GdomeBoolean gdome_a_dispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_a_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr subTreeDispatchEvent method
 * C header: void gdome_a_subTreeDispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_a_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr canAppend method
 * C header: GdomeBoolean gdome_a_canAppend(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend";
	var ret = CGDOME.call.gdome_a_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeElement(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeElement) {
			return arg1;
		} else if(arg1.toGdomeElement !== undefined) {
			return arg1.toGdomeElement();
		} else {
			throw "Could not convert object to GdomeElement!";
		}
	}
}

/** GdomeElement tagName method
 * C header: GdomeDOMString* gdome_el_tagName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.tagName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.tagName";
	var ret = CGDOME.call.gdome_el_tagName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement getAttribute method
 * C header: GdomeDOMString* gdome_el_getAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttribute";
	var ret = CGDOME.call.gdome_el_getAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttribute method
 * C header: void gdome_el_setAttribute(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttribute = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttribute";
	CGDOME.call.gdome_el_setAttribute(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttribute method
 * C header: void gdome_el_removeAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttribute";
	CGDOME.call.gdome_el_removeAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNode method
 * C header: GdomeAttr* gdome_el_getAttributeNode(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode";
	var ret = CGDOME.call.gdome_el_getAttributeNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNode method
 * C header: GdomeAttr* gdome_el_setAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode";
	var ret = CGDOME.call.gdome_el_setAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement removeAttributeNode method
 * C header: GdomeAttr* gdome_el_removeAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode";
	var ret = CGDOME.call.gdome_el_removeAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagName method
 * C header: GdomeNodeList* gdome_el_getElementsByTagName(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_el_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement getAttributeNS method
 * C header: GdomeDOMString* gdome_el_getAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttributeNS method
 * C header: void gdome_el_setAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNS = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS";
	CGDOME.call.gdome_el_setAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttributeNS method
 * C header: void gdome_el_removeAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS";
	CGDOME.call.gdome_el_removeAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_getAttributeNodeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNodeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNodeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_setAttributeNodeNS(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNodeNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_setAttributeNodeNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_el_getElementsByTagNameNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_el_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement hasAttribute method
 * C header: GdomeBoolean gdome_el_hasAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttribute";
	var ret = CGDOME.call.gdome_el_hasAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement hasAttributeNS method
 * C header: GdomeBoolean gdome_el_hasAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS";
	var ret = CGDOME.call.gdome_el_hasAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement ref method
 * C header: void gdome_el_ref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ref";
	CGDOME.call.gdome_el_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement unref method
 * C header: void gdome_el_unref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.unref";
	CGDOME.call.gdome_el_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement query_interface method
 * C header: gpointer gdome_el_query_interface(GdomeElement*, const char*, GdomeException*)
 */
GdomeElement.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.query_interface";
	var ret = CGDOME.call.gdome_el_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement nodeName method
 * C header: GdomeDOMString* gdome_el_nodeName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeName";
	var ret = CGDOME.call.gdome_el_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement nodeValue method
 * C header: GdomeDOMString* gdome_el_nodeValue(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeValue";
	var ret = CGDOME.call.gdome_el_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_nodeValue method
 * C header: void gdome_el_set_nodeValue(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue";
	CGDOME.call.gdome_el_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement nodeType method
 * C header: unsigned short gdome_el_nodeType(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeType";
	var ret = CGDOME.call.gdome_el_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement parentNode method
 * C header: GdomeNode* gdome_el_parentNode(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.parentNode";
	var ret = CGDOME.call.gdome_el_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement childNodes method
 * C header: GdomeNodeList* gdome_el_childNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.childNodes";
	var ret = CGDOME.call.gdome_el_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement firstChild method
 * C header: GdomeNode* gdome_el_firstChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.firstChild";
	var ret = CGDOME.call.gdome_el_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement lastChild method
 * C header: GdomeNode* gdome_el_lastChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.lastChild";
	var ret = CGDOME.call.gdome_el_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement previousSibling method
 * C header: GdomeNode* gdome_el_previousSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.previousSibling";
	var ret = CGDOME.call.gdome_el_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement nextSibling method
 * C header: GdomeNode* gdome_el_nextSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nextSibling";
	var ret = CGDOME.call.gdome_el_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement attributes method
 * C header: GdomeNamedNodeMap* gdome_el_attributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.attributes";
	var ret = CGDOME.call.gdome_el_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeElement ownerDocument method
 * C header: GdomeDocument* gdome_el_ownerDocument(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_el_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeElement insertBefore method
 * C header: GdomeNode* gdome_el_insertBefore(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore";
	var ret = CGDOME.call.gdome_el_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement replaceChild method
 * C header: GdomeNode* gdome_el_replaceChild(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild";
	var ret = CGDOME.call.gdome_el_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement removeChild method
 * C header: GdomeNode* gdome_el_removeChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeChild";
	var ret = CGDOME.call.gdome_el_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement appendChild method
 * C header: GdomeNode* gdome_el_appendChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.appendChild";
	var ret = CGDOME.call.gdome_el_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement hasChildNodes method
 * C header: GdomeBoolean gdome_el_hasChildNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_el_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement cloneNode method
 * C header: GdomeNode* gdome_el_cloneNode(GdomeElement*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.cloneNode";
	var ret = CGDOME.call.gdome_el_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement normalize method
 * C header: void gdome_el_normalize(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.normalize";
	CGDOME.call.gdome_el_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement isSupported method
 * C header: GdomeBoolean gdome_el_isSupported(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.isSupported";
	var ret = CGDOME.call.gdome_el_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement namespaceURI method
 * C header: GdomeDOMString* gdome_el_namespaceURI(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_el_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement prefix method
 * C header: GdomeDOMString* gdome_el_prefix(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.prefix";
	var ret = CGDOME.call.gdome_el_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_prefix method
 * C header: void gdome_el_set_prefix(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_prefix";
	CGDOME.call.gdome_el_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement localName method
 * C header: GdomeDOMString* gdome_el_localName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.localName";
	var ret = CGDOME.call.gdome_el_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement hasAttributes method
 * C header: GdomeBoolean gdome_el_hasAttributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_el_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement addEventListener method
 * C header: void gdome_el_addEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener";
	CGDOME.call.gdome_el_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeEventListener method
 * C header: void gdome_el_removeEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener";
	CGDOME.call.gdome_el_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement dispatchEvent method
 * C header: GdomeBoolean gdome_el_dispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_el_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement subTreeDispatchEvent method
 * C header: void gdome_el_subTreeDispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_el_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement canAppend method
 * C header: GdomeBoolean gdome_el_canAppend(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.canAppend";
	var ret = CGDOME.call.gdome_el_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeText(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeText) {
			return arg1;
		} else if(arg1.toGdomeText !== undefined) {
			return arg1.toGdomeText();
		} else {
			throw "Could not convert object to GdomeText!";
		}
	}
}

/** GdomeText splitText method
 * C header: GdomeText* gdome_t_splitText(GdomeText*, gulong, GdomeException*)
 */
GdomeText.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.splitText";
	var ret = CGDOME.call.gdome_t_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeText data method
 * C header: GdomeDOMString* gdome_t_data(GdomeText*, GdomeException*)
 */
GdomeText.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.data";
	var ret = CGDOME.call.gdome_t_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_data method
 * C header: void gdome_t_set_data(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_data";
	CGDOME.call.gdome_t_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText length method
 * C header: gulong gdome_t_length(GdomeText*, GdomeException*)
 */
GdomeText.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.length";
	var ret = CGDOME.call.gdome_t_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText substringData method
 * C header: GdomeDOMString* gdome_t_substringData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.substringData";
	var ret = CGDOME.call.gdome_t_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText appendData method
 * C header: void gdome_t_appendData(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.appendData";
	CGDOME.call.gdome_t_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText insertData method
 * C header: void gdome_t_insertData(GdomeText*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.insertData";
	CGDOME.call.gdome_t_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText deleteData method
 * C header: void gdome_t_deleteData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.deleteData";
	CGDOME.call.gdome_t_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText replaceData method
 * C header: void gdome_t_replaceData(GdomeText*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceData";
	CGDOME.call.gdome_t_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText ref method
 * C header: void gdome_t_ref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ref";
	CGDOME.call.gdome_t_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText unref method
 * C header: void gdome_t_unref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.unref";
	CGDOME.call.gdome_t_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText query_interface method
 * C header: gpointer gdome_t_query_interface(GdomeText*, const char*, GdomeException*)
 */
GdomeText.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.query_interface";
	var ret = CGDOME.call.gdome_t_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText nodeName method
 * C header: GdomeDOMString* gdome_t_nodeName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeName";
	var ret = CGDOME.call.gdome_t_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText nodeValue method
 * C header: GdomeDOMString* gdome_t_nodeValue(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeValue";
	var ret = CGDOME.call.gdome_t_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_nodeValue method
 * C header: void gdome_t_set_nodeValue(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_nodeValue";
	CGDOME.call.gdome_t_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText nodeType method
 * C header: unsigned short gdome_t_nodeType(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeType";
	var ret = CGDOME.call.gdome_t_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText parentNode method
 * C header: GdomeNode* gdome_t_parentNode(GdomeText*, GdomeException*)
 */
GdomeText.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.parentNode";
	var ret = CGDOME.call.gdome_t_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText childNodes method
 * C header: GdomeNodeList* gdome_t_childNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.childNodes";
	var ret = CGDOME.call.gdome_t_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeText firstChild method
 * C header: GdomeNode* gdome_t_firstChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.firstChild";
	var ret = CGDOME.call.gdome_t_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText lastChild method
 * C header: GdomeNode* gdome_t_lastChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.lastChild";
	var ret = CGDOME.call.gdome_t_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText previousSibling method
 * C header: GdomeNode* gdome_t_previousSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.previousSibling";
	var ret = CGDOME.call.gdome_t_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText nextSibling method
 * C header: GdomeNode* gdome_t_nextSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nextSibling";
	var ret = CGDOME.call.gdome_t_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText attributes method
 * C header: GdomeNamedNodeMap* gdome_t_attributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.attributes";
	var ret = CGDOME.call.gdome_t_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeText ownerDocument method
 * C header: GdomeDocument* gdome_t_ownerDocument(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_t_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeText insertBefore method
 * C header: GdomeNode* gdome_t_insertBefore(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.insertBefore";
	var ret = CGDOME.call.gdome_t_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText replaceChild method
 * C header: GdomeNode* gdome_t_replaceChild(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.replaceChild";
	var ret = CGDOME.call.gdome_t_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText removeChild method
 * C header: GdomeNode* gdome_t_removeChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeChild";
	var ret = CGDOME.call.gdome_t_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText appendChild method
 * C header: GdomeNode* gdome_t_appendChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.appendChild";
	var ret = CGDOME.call.gdome_t_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText hasChildNodes method
 * C header: GdomeBoolean gdome_t_hasChildNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_t_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText cloneNode method
 * C header: GdomeNode* gdome_t_cloneNode(GdomeText*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.cloneNode";
	var ret = CGDOME.call.gdome_t_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText normalize method
 * C header: void gdome_t_normalize(GdomeText*, GdomeException*)
 */
GdomeText.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.normalize";
	CGDOME.call.gdome_t_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText isSupported method
 * C header: GdomeBoolean gdome_t_isSupported(GdomeText*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.isSupported";
	var ret = CGDOME.call.gdome_t_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText namespaceURI method
 * C header: GdomeDOMString* gdome_t_namespaceURI(GdomeText*, GdomeException*)
 */
GdomeText.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_t_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText prefix method
 * C header: GdomeDOMString* gdome_t_prefix(GdomeText*, GdomeException*)
 */
GdomeText.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.prefix";
	var ret = CGDOME.call.gdome_t_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_prefix method
 * C header: void gdome_t_set_prefix(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_prefix";
	CGDOME.call.gdome_t_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText localName method
 * C header: GdomeDOMString* gdome_t_localName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.localName";
	var ret = CGDOME.call.gdome_t_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText hasAttributes method
 * C header: GdomeBoolean gdome_t_hasAttributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_t_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText addEventListener method
 * C header: void gdome_t_addEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.addEventListener";
	CGDOME.call.gdome_t_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText removeEventListener method
 * C header: void gdome_t_removeEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener";
	CGDOME.call.gdome_t_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText dispatchEvent method
 * C header: GdomeBoolean gdome_t_dispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_t_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText subTreeDispatchEvent method
 * C header: void gdome_t_subTreeDispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_t_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText canAppend method
 * C header: GdomeBoolean gdome_t_canAppend(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.canAppend";
	var ret = CGDOME.call.gdome_t_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeComment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeComment) {
			return arg1;
		} else if(arg1.toGdomeComment !== undefined) {
			return arg1.toGdomeComment();
		} else {
			throw "Could not convert object to GdomeComment!";
		}
	}
}

/** GdomeComment data method
 * C header: GdomeDOMString* gdome_c_data(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.data";
	var ret = CGDOME.call.gdome_c_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_data method
 * C header: void gdome_c_set_data(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_data";
	CGDOME.call.gdome_c_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment length method
 * C header: gulong gdome_c_length(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.length";
	var ret = CGDOME.call.gdome_c_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment substringData method
 * C header: GdomeDOMString* gdome_c_substringData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.substringData";
	var ret = CGDOME.call.gdome_c_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment appendData method
 * C header: void gdome_c_appendData(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendData";
	CGDOME.call.gdome_c_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment insertData method
 * C header: void gdome_c_insertData(GdomeComment*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertData";
	CGDOME.call.gdome_c_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment deleteData method
 * C header: void gdome_c_deleteData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.deleteData";
	CGDOME.call.gdome_c_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment replaceData method
 * C header: void gdome_c_replaceData(GdomeComment*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceData";
	CGDOME.call.gdome_c_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment ref method
 * C header: void gdome_c_ref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ref";
	CGDOME.call.gdome_c_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment unref method
 * C header: void gdome_c_unref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.unref";
	CGDOME.call.gdome_c_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment query_interface method
 * C header: gpointer gdome_c_query_interface(GdomeComment*, const char*, GdomeException*)
 */
GdomeComment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.query_interface";
	var ret = CGDOME.call.gdome_c_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment nodeName method
 * C header: GdomeDOMString* gdome_c_nodeName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeName";
	var ret = CGDOME.call.gdome_c_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment nodeValue method
 * C header: GdomeDOMString* gdome_c_nodeValue(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_c_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_nodeValue method
 * C header: void gdome_c_set_nodeValue(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue";
	CGDOME.call.gdome_c_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment nodeType method
 * C header: unsigned short gdome_c_nodeType(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeType";
	var ret = CGDOME.call.gdome_c_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment parentNode method
 * C header: GdomeNode* gdome_c_parentNode(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.parentNode";
	var ret = CGDOME.call.gdome_c_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment childNodes method
 * C header: GdomeNodeList* gdome_c_childNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.childNodes";
	var ret = CGDOME.call.gdome_c_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeComment firstChild method
 * C header: GdomeNode* gdome_c_firstChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.firstChild";
	var ret = CGDOME.call.gdome_c_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment lastChild method
 * C header: GdomeNode* gdome_c_lastChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.lastChild";
	var ret = CGDOME.call.gdome_c_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment previousSibling method
 * C header: GdomeNode* gdome_c_previousSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_c_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment nextSibling method
 * C header: GdomeNode* gdome_c_nextSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_c_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment attributes method
 * C header: GdomeNamedNodeMap* gdome_c_attributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.attributes";
	var ret = CGDOME.call.gdome_c_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeComment ownerDocument method
 * C header: GdomeDocument* gdome_c_ownerDocument(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_c_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeComment insertBefore method
 * C header: GdomeNode* gdome_c_insertBefore(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_c_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment replaceChild method
 * C header: GdomeNode* gdome_c_replaceChild(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_c_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment removeChild method
 * C header: GdomeNode* gdome_c_removeChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeChild";
	var ret = CGDOME.call.gdome_c_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment appendChild method
 * C header: GdomeNode* gdome_c_appendChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.appendChild";
	var ret = CGDOME.call.gdome_c_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment hasChildNodes method
 * C header: GdomeBoolean gdome_c_hasChildNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_c_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment cloneNode method
 * C header: GdomeNode* gdome_c_cloneNode(GdomeComment*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_c_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment normalize method
 * C header: void gdome_c_normalize(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.normalize";
	CGDOME.call.gdome_c_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment isSupported method
 * C header: GdomeBoolean gdome_c_isSupported(GdomeComment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.isSupported";
	var ret = CGDOME.call.gdome_c_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment namespaceURI method
 * C header: GdomeDOMString* gdome_c_namespaceURI(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_c_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment prefix method
 * C header: GdomeDOMString* gdome_c_prefix(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.prefix";
	var ret = CGDOME.call.gdome_c_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_prefix method
 * C header: void gdome_c_set_prefix(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_prefix";
	CGDOME.call.gdome_c_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment localName method
 * C header: GdomeDOMString* gdome_c_localName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.localName";
	var ret = CGDOME.call.gdome_c_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment hasAttributes method
 * C header: GdomeBoolean gdome_c_hasAttributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_c_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment addEventListener method
 * C header: void gdome_c_addEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener";
	CGDOME.call.gdome_c_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment removeEventListener method
 * C header: void gdome_c_removeEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener";
	CGDOME.call.gdome_c_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment dispatchEvent method
 * C header: GdomeBoolean gdome_c_dispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_c_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment subTreeDispatchEvent method
 * C header: void gdome_c_subTreeDispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_c_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment canAppend method
 * C header: GdomeBoolean gdome_c_canAppend(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.canAppend";
	var ret = CGDOME.call.gdome_c_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCDATASection(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCDATASection) {
			return arg1;
		} else if(arg1.toGdomeCDATASection !== undefined) {
			return arg1.toGdomeCDATASection();
		} else {
			throw "Could not convert object to GdomeCDATASection!";
		}
	}
}

/** GdomeCDATASection splitText method
 * C header: GdomeText* gdome_cds_splitText(GdomeCDATASection*, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.splitText";
	var ret = CGDOME.call.gdome_cds_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeCDATASection data method
 * C header: GdomeDOMString* gdome_cds_data(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.data";
	var ret = CGDOME.call.gdome_cds_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_data method
 * C header: void gdome_cds_set_data(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_data";
	CGDOME.call.gdome_cds_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection length method
 * C header: gulong gdome_cds_length(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.length";
	var ret = CGDOME.call.gdome_cds_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection substringData method
 * C header: GdomeDOMString* gdome_cds_substringData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.substringData";
	var ret = CGDOME.call.gdome_cds_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection appendData method
 * C header: void gdome_cds_appendData(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendData";
	CGDOME.call.gdome_cds_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection insertData method
 * C header: void gdome_cds_insertData(GdomeCDATASection*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertData";
	CGDOME.call.gdome_cds_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection deleteData method
 * C header: void gdome_cds_deleteData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.deleteData";
	CGDOME.call.gdome_cds_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection replaceData method
 * C header: void gdome_cds_replaceData(GdomeCDATASection*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData";
	CGDOME.call.gdome_cds_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection ref method
 * C header: void gdome_cds_ref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ref";
	CGDOME.call.gdome_cds_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection unref method
 * C header: void gdome_cds_unref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.unref";
	CGDOME.call.gdome_cds_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection query_interface method
 * C header: gpointer gdome_cds_query_interface(GdomeCDATASection*, const char*, GdomeException*)
 */
GdomeCDATASection.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.query_interface";
	var ret = CGDOME.call.gdome_cds_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection nodeName method
 * C header: GdomeDOMString* gdome_cds_nodeName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeName";
	var ret = CGDOME.call.gdome_cds_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection nodeValue method
 * C header: GdomeDOMString* gdome_cds_nodeValue(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cds_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_nodeValue method
 * C header: void gdome_cds_set_nodeValue(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue";
	CGDOME.call.gdome_cds_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection nodeType method
 * C header: unsigned short gdome_cds_nodeType(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeType";
	var ret = CGDOME.call.gdome_cds_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection parentNode method
 * C header: GdomeNode* gdome_cds_parentNode(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.parentNode";
	var ret = CGDOME.call.gdome_cds_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection childNodes method
 * C header: GdomeNodeList* gdome_cds_childNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.childNodes";
	var ret = CGDOME.call.gdome_cds_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCDATASection firstChild method
 * C header: GdomeNode* gdome_cds_firstChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.firstChild";
	var ret = CGDOME.call.gdome_cds_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection lastChild method
 * C header: GdomeNode* gdome_cds_lastChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.lastChild";
	var ret = CGDOME.call.gdome_cds_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection previousSibling method
 * C header: GdomeNode* gdome_cds_previousSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cds_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection nextSibling method
 * C header: GdomeNode* gdome_cds_nextSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cds_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection attributes method
 * C header: GdomeNamedNodeMap* gdome_cds_attributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.attributes";
	var ret = CGDOME.call.gdome_cds_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCDATASection ownerDocument method
 * C header: GdomeDocument* gdome_cds_ownerDocument(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cds_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCDATASection insertBefore method
 * C header: GdomeNode* gdome_cds_insertBefore(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cds_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection replaceChild method
 * C header: GdomeNode* gdome_cds_replaceChild(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cds_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection removeChild method
 * C header: GdomeNode* gdome_cds_removeChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild";
	var ret = CGDOME.call.gdome_cds_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection appendChild method
 * C header: GdomeNode* gdome_cds_appendChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild";
	var ret = CGDOME.call.gdome_cds_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection hasChildNodes method
 * C header: GdomeBoolean gdome_cds_hasChildNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cds_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection cloneNode method
 * C header: GdomeNode* gdome_cds_cloneNode(GdomeCDATASection*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cds_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection normalize method
 * C header: void gdome_cds_normalize(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.normalize";
	CGDOME.call.gdome_cds_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection isSupported method
 * C header: GdomeBoolean gdome_cds_isSupported(GdomeCDATASection*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported";
	var ret = CGDOME.call.gdome_cds_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection namespaceURI method
 * C header: GdomeDOMString* gdome_cds_namespaceURI(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cds_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection prefix method
 * C header: GdomeDOMString* gdome_cds_prefix(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.prefix";
	var ret = CGDOME.call.gdome_cds_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_prefix method
 * C header: void gdome_cds_set_prefix(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix";
	CGDOME.call.gdome_cds_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection localName method
 * C header: GdomeDOMString* gdome_cds_localName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.localName";
	var ret = CGDOME.call.gdome_cds_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection hasAttributes method
 * C header: GdomeBoolean gdome_cds_hasAttributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cds_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection addEventListener method
 * C header: void gdome_cds_addEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener";
	CGDOME.call.gdome_cds_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection removeEventListener method
 * C header: void gdome_cds_removeEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener";
	CGDOME.call.gdome_cds_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection dispatchEvent method
 * C header: GdomeBoolean gdome_cds_dispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cds_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection subTreeDispatchEvent method
 * C header: void gdome_cds_subTreeDispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cds_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection canAppend method
 * C header: GdomeBoolean gdome_cds_canAppend(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend";
	var ret = CGDOME.call.gdome_cds_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNotation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNotation) {
			return arg1;
		} else if(arg1.toGdomeNotation !== undefined) {
			return arg1.toGdomeNotation();
		} else {
			throw "Could not convert object to GdomeNotation!";
		}
	}
}

/** GdomeNotation publicId method
 * C header: GdomeDOMString* gdome_not_publicId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.publicId";
	var ret = CGDOME.call.gdome_not_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation systemId method
 * C header: GdomeDOMString* gdome_not_systemId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.systemId";
	var ret = CGDOME.call.gdome_not_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation ref method
 * C header: void gdome_not_ref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ref";
	CGDOME.call.gdome_not_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation unref method
 * C header: void gdome_not_unref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.unref";
	CGDOME.call.gdome_not_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation query_interface method
 * C header: gpointer gdome_not_query_interface(GdomeNotation*, const char*, GdomeException*)
 */
GdomeNotation.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.query_interface";
	var ret = CGDOME.call.gdome_not_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation nodeName method
 * C header: GdomeDOMString* gdome_not_nodeName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeName";
	var ret = CGDOME.call.gdome_not_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation nodeValue method
 * C header: GdomeDOMString* gdome_not_nodeValue(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeValue";
	var ret = CGDOME.call.gdome_not_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_nodeValue method
 * C header: void gdome_not_set_nodeValue(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue";
	CGDOME.call.gdome_not_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation nodeType method
 * C header: unsigned short gdome_not_nodeType(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeType";
	var ret = CGDOME.call.gdome_not_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation parentNode method
 * C header: GdomeNode* gdome_not_parentNode(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.parentNode";
	var ret = CGDOME.call.gdome_not_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation childNodes method
 * C header: GdomeNodeList* gdome_not_childNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.childNodes";
	var ret = CGDOME.call.gdome_not_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNotation firstChild method
 * C header: GdomeNode* gdome_not_firstChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.firstChild";
	var ret = CGDOME.call.gdome_not_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation lastChild method
 * C header: GdomeNode* gdome_not_lastChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.lastChild";
	var ret = CGDOME.call.gdome_not_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation previousSibling method
 * C header: GdomeNode* gdome_not_previousSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.previousSibling";
	var ret = CGDOME.call.gdome_not_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation nextSibling method
 * C header: GdomeNode* gdome_not_nextSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nextSibling";
	var ret = CGDOME.call.gdome_not_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation attributes method
 * C header: GdomeNamedNodeMap* gdome_not_attributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.attributes";
	var ret = CGDOME.call.gdome_not_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNotation ownerDocument method
 * C header: GdomeDocument* gdome_not_ownerDocument(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_not_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNotation insertBefore method
 * C header: GdomeNode* gdome_not_insertBefore(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore";
	var ret = CGDOME.call.gdome_not_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation replaceChild method
 * C header: GdomeNode* gdome_not_replaceChild(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild";
	var ret = CGDOME.call.gdome_not_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation removeChild method
 * C header: GdomeNode* gdome_not_removeChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild";
	var ret = CGDOME.call.gdome_not_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation appendChild method
 * C header: GdomeNode* gdome_not_appendChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild";
	var ret = CGDOME.call.gdome_not_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation hasChildNodes method
 * C header: GdomeBoolean gdome_not_hasChildNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_not_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation cloneNode method
 * C header: GdomeNode* gdome_not_cloneNode(GdomeNotation*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.cloneNode";
	var ret = CGDOME.call.gdome_not_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation normalize method
 * C header: void gdome_not_normalize(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.normalize";
	CGDOME.call.gdome_not_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation isSupported method
 * C header: GdomeBoolean gdome_not_isSupported(GdomeNotation*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.isSupported";
	var ret = CGDOME.call.gdome_not_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation namespaceURI method
 * C header: GdomeDOMString* gdome_not_namespaceURI(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_not_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation prefix method
 * C header: GdomeDOMString* gdome_not_prefix(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.prefix";
	var ret = CGDOME.call.gdome_not_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_prefix method
 * C header: void gdome_not_set_prefix(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_prefix";
	CGDOME.call.gdome_not_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation localName method
 * C header: GdomeDOMString* gdome_not_localName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.localName";
	var ret = CGDOME.call.gdome_not_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation hasAttributes method
 * C header: GdomeBoolean gdome_not_hasAttributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_not_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation addEventListener method
 * C header: void gdome_not_addEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener";
	CGDOME.call.gdome_not_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation removeEventListener method
 * C header: void gdome_not_removeEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener";
	CGDOME.call.gdome_not_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation dispatchEvent method
 * C header: GdomeBoolean gdome_not_dispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_not_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation subTreeDispatchEvent method
 * C header: void gdome_not_subTreeDispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_not_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation canAppend method
 * C header: GdomeBoolean gdome_not_canAppend(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend";
	var ret = CGDOME.call.gdome_not_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntity(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntity) {
			return arg1;
		} else if(arg1.toGdomeEntity !== undefined) {
			return arg1.toGdomeEntity();
		} else {
			throw "Could not convert object to GdomeEntity!";
		}
	}
}

/** GdomeEntity publicId method
 * C header: GdomeDOMString* gdome_ent_publicId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.publicId";
	var ret = CGDOME.call.gdome_ent_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity systemId method
 * C header: GdomeDOMString* gdome_ent_systemId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.systemId";
	var ret = CGDOME.call.gdome_ent_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity notationName method
 * C header: GdomeDOMString* gdome_ent_notationName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.notationName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.notationName";
	var ret = CGDOME.call.gdome_ent_notationName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity ref method
 * C header: void gdome_ent_ref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ref";
	CGDOME.call.gdome_ent_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity unref method
 * C header: void gdome_ent_unref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.unref";
	CGDOME.call.gdome_ent_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity query_interface method
 * C header: gpointer gdome_ent_query_interface(GdomeEntity*, const char*, GdomeException*)
 */
GdomeEntity.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.query_interface";
	var ret = CGDOME.call.gdome_ent_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity nodeName method
 * C header: GdomeDOMString* gdome_ent_nodeName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeName";
	var ret = CGDOME.call.gdome_ent_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity nodeValue method
 * C header: GdomeDOMString* gdome_ent_nodeValue(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeValue";
	var ret = CGDOME.call.gdome_ent_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_nodeValue method
 * C header: void gdome_ent_set_nodeValue(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue";
	CGDOME.call.gdome_ent_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity nodeType method
 * C header: unsigned short gdome_ent_nodeType(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeType";
	var ret = CGDOME.call.gdome_ent_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity parentNode method
 * C header: GdomeNode* gdome_ent_parentNode(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.parentNode";
	var ret = CGDOME.call.gdome_ent_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity childNodes method
 * C header: GdomeNodeList* gdome_ent_childNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.childNodes";
	var ret = CGDOME.call.gdome_ent_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntity firstChild method
 * C header: GdomeNode* gdome_ent_firstChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.firstChild";
	var ret = CGDOME.call.gdome_ent_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity lastChild method
 * C header: GdomeNode* gdome_ent_lastChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.lastChild";
	var ret = CGDOME.call.gdome_ent_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity previousSibling method
 * C header: GdomeNode* gdome_ent_previousSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.previousSibling";
	var ret = CGDOME.call.gdome_ent_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity nextSibling method
 * C header: GdomeNode* gdome_ent_nextSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nextSibling";
	var ret = CGDOME.call.gdome_ent_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity attributes method
 * C header: GdomeNamedNodeMap* gdome_ent_attributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.attributes";
	var ret = CGDOME.call.gdome_ent_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntity ownerDocument method
 * C header: GdomeDocument* gdome_ent_ownerDocument(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_ent_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntity insertBefore method
 * C header: GdomeNode* gdome_ent_insertBefore(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore";
	var ret = CGDOME.call.gdome_ent_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity replaceChild method
 * C header: GdomeNode* gdome_ent_replaceChild(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild";
	var ret = CGDOME.call.gdome_ent_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity removeChild method
 * C header: GdomeNode* gdome_ent_removeChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild";
	var ret = CGDOME.call.gdome_ent_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity appendChild method
 * C header: GdomeNode* gdome_ent_appendChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild";
	var ret = CGDOME.call.gdome_ent_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity hasChildNodes method
 * C header: GdomeBoolean gdome_ent_hasChildNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_ent_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity cloneNode method
 * C header: GdomeNode* gdome_ent_cloneNode(GdomeEntity*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.cloneNode";
	var ret = CGDOME.call.gdome_ent_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity normalize method
 * C header: void gdome_ent_normalize(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.normalize";
	CGDOME.call.gdome_ent_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity isSupported method
 * C header: GdomeBoolean gdome_ent_isSupported(GdomeEntity*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.isSupported";
	var ret = CGDOME.call.gdome_ent_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity namespaceURI method
 * C header: GdomeDOMString* gdome_ent_namespaceURI(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_ent_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity prefix method
 * C header: GdomeDOMString* gdome_ent_prefix(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.prefix";
	var ret = CGDOME.call.gdome_ent_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_prefix method
 * C header: void gdome_ent_set_prefix(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_prefix";
	CGDOME.call.gdome_ent_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity localName method
 * C header: GdomeDOMString* gdome_ent_localName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.localName";
	var ret = CGDOME.call.gdome_ent_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity hasAttributes method
 * C header: GdomeBoolean gdome_ent_hasAttributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_ent_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity addEventListener method
 * C header: void gdome_ent_addEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener";
	CGDOME.call.gdome_ent_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity removeEventListener method
 * C header: void gdome_ent_removeEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener";
	CGDOME.call.gdome_ent_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity dispatchEvent method
 * C header: GdomeBoolean gdome_ent_dispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_ent_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity subTreeDispatchEvent method
 * C header: void gdome_ent_subTreeDispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_ent_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity canAppend method
 * C header: GdomeBoolean gdome_ent_canAppend(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend";
	var ret = CGDOME.call.gdome_ent_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntityReference(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntityReference) {
			return arg1;
		} else if(arg1.toGdomeEntityReference !== undefined) {
			return arg1.toGdomeEntityReference();
		} else {
			throw "Could not convert object to GdomeEntityReference!";
		}
	}
}

/** GdomeEntityReference ref method
 * C header: void gdome_er_ref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ref";
	CGDOME.call.gdome_er_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference unref method
 * C header: void gdome_er_unref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.unref";
	CGDOME.call.gdome_er_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference query_interface method
 * C header: gpointer gdome_er_query_interface(GdomeEntityReference*, const char*, GdomeException*)
 */
GdomeEntityReference.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.query_interface";
	var ret = CGDOME.call.gdome_er_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference nodeName method
 * C header: GdomeDOMString* gdome_er_nodeName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeName";
	var ret = CGDOME.call.gdome_er_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference nodeValue method
 * C header: GdomeDOMString* gdome_er_nodeValue(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeValue";
	var ret = CGDOME.call.gdome_er_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_nodeValue method
 * C header: void gdome_er_set_nodeValue(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue";
	CGDOME.call.gdome_er_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference nodeType method
 * C header: unsigned short gdome_er_nodeType(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeType";
	var ret = CGDOME.call.gdome_er_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference parentNode method
 * C header: GdomeNode* gdome_er_parentNode(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.parentNode";
	var ret = CGDOME.call.gdome_er_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference childNodes method
 * C header: GdomeNodeList* gdome_er_childNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.childNodes";
	var ret = CGDOME.call.gdome_er_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntityReference firstChild method
 * C header: GdomeNode* gdome_er_firstChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.firstChild";
	var ret = CGDOME.call.gdome_er_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference lastChild method
 * C header: GdomeNode* gdome_er_lastChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.lastChild";
	var ret = CGDOME.call.gdome_er_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference previousSibling method
 * C header: GdomeNode* gdome_er_previousSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.previousSibling";
	var ret = CGDOME.call.gdome_er_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference nextSibling method
 * C header: GdomeNode* gdome_er_nextSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nextSibling";
	var ret = CGDOME.call.gdome_er_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference attributes method
 * C header: GdomeNamedNodeMap* gdome_er_attributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.attributes";
	var ret = CGDOME.call.gdome_er_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntityReference ownerDocument method
 * C header: GdomeDocument* gdome_er_ownerDocument(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_er_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntityReference insertBefore method
 * C header: GdomeNode* gdome_er_insertBefore(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore";
	var ret = CGDOME.call.gdome_er_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference replaceChild method
 * C header: GdomeNode* gdome_er_replaceChild(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild";
	var ret = CGDOME.call.gdome_er_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference removeChild method
 * C header: GdomeNode* gdome_er_removeChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild";
	var ret = CGDOME.call.gdome_er_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference appendChild method
 * C header: GdomeNode* gdome_er_appendChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild";
	var ret = CGDOME.call.gdome_er_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference hasChildNodes method
 * C header: GdomeBoolean gdome_er_hasChildNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_er_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference cloneNode method
 * C header: GdomeNode* gdome_er_cloneNode(GdomeEntityReference*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.cloneNode";
	var ret = CGDOME.call.gdome_er_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference normalize method
 * C header: void gdome_er_normalize(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.normalize";
	CGDOME.call.gdome_er_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference isSupported method
 * C header: GdomeBoolean gdome_er_isSupported(GdomeEntityReference*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported";
	var ret = CGDOME.call.gdome_er_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference namespaceURI method
 * C header: GdomeDOMString* gdome_er_namespaceURI(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_er_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference prefix method
 * C header: GdomeDOMString* gdome_er_prefix(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.prefix";
	var ret = CGDOME.call.gdome_er_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_prefix method
 * C header: void gdome_er_set_prefix(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix";
	CGDOME.call.gdome_er_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference localName method
 * C header: GdomeDOMString* gdome_er_localName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.localName";
	var ret = CGDOME.call.gdome_er_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference hasAttributes method
 * C header: GdomeBoolean gdome_er_hasAttributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_er_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference addEventListener method
 * C header: void gdome_er_addEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener";
	CGDOME.call.gdome_er_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference removeEventListener method
 * C header: void gdome_er_removeEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener";
	CGDOME.call.gdome_er_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference dispatchEvent method
 * C header: GdomeBoolean gdome_er_dispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_er_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference subTreeDispatchEvent method
 * C header: void gdome_er_subTreeDispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_er_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference canAppend method
 * C header: GdomeBoolean gdome_er_canAppend(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend";
	var ret = CGDOME.call.gdome_er_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeProcessingInstruction(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeProcessingInstruction) {
			return arg1;
		} else if(arg1.toGdomeProcessingInstruction !== undefined) {
			return arg1.toGdomeProcessingInstruction();
		} else {
			throw "Could not convert object to GdomeProcessingInstruction!";
		}
	}
}

/** GdomeProcessingInstruction target method
 * C header: GdomeDOMString* gdome_pi_target(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.target = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.target";
	var ret = CGDOME.call.gdome_pi_target(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction data method
 * C header: GdomeDOMString* gdome_pi_data(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.data";
	var ret = CGDOME.call.gdome_pi_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_data method
 * C header: void gdome_pi_set_data(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data";
	CGDOME.call.gdome_pi_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction ref method
 * C header: void gdome_pi_ref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ref";
	CGDOME.call.gdome_pi_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction unref method
 * C header: void gdome_pi_unref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.unref";
	CGDOME.call.gdome_pi_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction query_interface method
 * C header: gpointer gdome_pi_query_interface(GdomeProcessingInstruction*, const char*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.query_interface";
	var ret = CGDOME.call.gdome_pi_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction nodeName method
 * C header: GdomeDOMString* gdome_pi_nodeName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeName";
	var ret = CGDOME.call.gdome_pi_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction nodeValue method
 * C header: GdomeDOMString* gdome_pi_nodeValue(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeValue";
	var ret = CGDOME.call.gdome_pi_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_nodeValue method
 * C header: void gdome_pi_set_nodeValue(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue";
	CGDOME.call.gdome_pi_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction nodeType method
 * C header: unsigned short gdome_pi_nodeType(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeType";
	var ret = CGDOME.call.gdome_pi_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction parentNode method
 * C header: GdomeNode* gdome_pi_parentNode(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.parentNode";
	var ret = CGDOME.call.gdome_pi_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction childNodes method
 * C header: GdomeNodeList* gdome_pi_childNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.childNodes";
	var ret = CGDOME.call.gdome_pi_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeProcessingInstruction firstChild method
 * C header: GdomeNode* gdome_pi_firstChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.firstChild";
	var ret = CGDOME.call.gdome_pi_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction lastChild method
 * C header: GdomeNode* gdome_pi_lastChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.lastChild";
	var ret = CGDOME.call.gdome_pi_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction previousSibling method
 * C header: GdomeNode* gdome_pi_previousSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.previousSibling";
	var ret = CGDOME.call.gdome_pi_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction nextSibling method
 * C header: GdomeNode* gdome_pi_nextSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nextSibling";
	var ret = CGDOME.call.gdome_pi_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction attributes method
 * C header: GdomeNamedNodeMap* gdome_pi_attributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.attributes";
	var ret = CGDOME.call.gdome_pi_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeProcessingInstruction ownerDocument method
 * C header: GdomeDocument* gdome_pi_ownerDocument(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_pi_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeProcessingInstruction insertBefore method
 * C header: GdomeNode* gdome_pi_insertBefore(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore";
	var ret = CGDOME.call.gdome_pi_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction replaceChild method
 * C header: GdomeNode* gdome_pi_replaceChild(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild";
	var ret = CGDOME.call.gdome_pi_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction removeChild method
 * C header: GdomeNode* gdome_pi_removeChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild";
	var ret = CGDOME.call.gdome_pi_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction appendChild method
 * C header: GdomeNode* gdome_pi_appendChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild";
	var ret = CGDOME.call.gdome_pi_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction hasChildNodes method
 * C header: GdomeBoolean gdome_pi_hasChildNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_pi_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction cloneNode method
 * C header: GdomeNode* gdome_pi_cloneNode(GdomeProcessingInstruction*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.cloneNode";
	var ret = CGDOME.call.gdome_pi_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction normalize method
 * C header: void gdome_pi_normalize(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.normalize";
	CGDOME.call.gdome_pi_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction isSupported method
 * C header: GdomeBoolean gdome_pi_isSupported(GdomeProcessingInstruction*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported";
	var ret = CGDOME.call.gdome_pi_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction namespaceURI method
 * C header: GdomeDOMString* gdome_pi_namespaceURI(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_pi_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction prefix method
 * C header: GdomeDOMString* gdome_pi_prefix(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.prefix";
	var ret = CGDOME.call.gdome_pi_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_prefix method
 * C header: void gdome_pi_set_prefix(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix";
	CGDOME.call.gdome_pi_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction localName method
 * C header: GdomeDOMString* gdome_pi_localName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.localName";
	var ret = CGDOME.call.gdome_pi_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction hasAttributes method
 * C header: GdomeBoolean gdome_pi_hasAttributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_pi_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction addEventListener method
 * C header: void gdome_pi_addEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener";
	CGDOME.call.gdome_pi_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction removeEventListener method
 * C header: void gdome_pi_removeEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener";
	CGDOME.call.gdome_pi_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction dispatchEvent method
 * C header: GdomeBoolean gdome_pi_dispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_pi_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction subTreeDispatchEvent method
 * C header: void gdome_pi_subTreeDispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_pi_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction canAppend method
 * C header: GdomeBoolean gdome_pi_canAppend(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend";
	var ret = CGDOME.call.gdome_pi_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}


'
0.36042200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:243: EOF#1065 do_ustring_convert_to_string at 0x806edda in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.36161900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:284: strbuf=`/* Extended JavaScript String library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Define GDOME */
GDOME = {};

/** GdomeException */
function GdomeException(msg) {
	this.pointer = CGDOME.call.gdome_extra_exc_new();
	this.msg = msg;
}

/** Delete GdomeException */
GdomeException.prototype.del = function() {
	CGDOME.call.gdome_extra_exc_del(this.pointer);
}

/** Get/set exception value */
GdomeException.prototype.value = function(v) {
	if(v===undefined) return (CGDOME.call.gdome_extra_exc_getvalue)(this.pointer);
	CGDOME.call.gdome_extra_exc_setvalue(this.pointer, v);
	return v;
}

/** Convert to string */
GdomeException.prototype.toString = function() {
	var id = this.value();
	var msg = "GdomeException: "+this.msg;
	if(id!=0) msg += " (#" + id + ")";
	return msg;
}

/** Our exception data type */
GDOME.exception = new GdomeException();

/** Convert to GdomeNode */
GdomeText.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_text_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Convert to GdomeNode */
GdomeElement.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_element_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Constructor */
function GdomeDOMString(pointer) {
	this.pointer = pointer;
}

/** Create gdome string */
GdomeDOMString.mkref = function(str) {
	var str_ptr = CGDOME.call.gdome_str_mkref_dup(str);
	if (str_ptr == 0) { throw GDOME.exception; }
	return new GdomeDOMString(str_ptr);
}

/** Convert to string */
GdomeDOMString.prototype.toString = function() {
	if(this.pointer.address == 0) return "";
	var str = "";
	for(var i=0; i<this.length(); ++i) { str += this.charAt(i); }
	return str;
}

/** unref */
GdomeDOMString.prototype.unref = function() {
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** Gdome DOM Implementation */
GDOME.createDOMImplementation = function() {
	GDOME.exception.msg = "gdome_di_mkref";
	var di_pointer = CGDOME.call.gdome_di_mkref();
	if (di_pointer == 0) { throw GDOME.exception; }
	return new GdomeDOMImplementation(di_pointer);
}

/* Construct an object (if called with new) or try to convert object to GdomeNode */
/*
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toNode !== undefined) {
			return arg1.toNode();
		}
	}
}
*/

/* EOF */
/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMString(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDOMString) {
			return arg1;
		} else if(arg1.toGdomeDOMString !== undefined) {
			return arg1.toGdomeDOMString();
		} else {
			throw "Could not convert object to GdomeDOMString!";
		}
	}
}

/** GdomeDOMString ref method
 * C header: void gdome_str_ref(GdomeDOMString*)
 */
GdomeDOMString.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_ref(this.pointer);
}

/** GdomeDOMString unref method
 * C header: void gdome_str_unref(GdomeDOMString*)
 */
GdomeDOMString.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** GdomeDOMString length method
 * C header: int gdome_str_length(GdomeDOMString*)
 */
GdomeDOMString.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_length(this.pointer);
	return ret;
}

/** GdomeDOMString isEmpty method
 * C header: GdomeBoolean gdome_str_isEmpty(GdomeDOMString*)
 */
GdomeDOMString.prototype.isEmpty = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_isEmpty(this.pointer);
	return (ret === 1) ? true : false;
}

/** GdomeDOMString charAt method
 * C header: gchar gdome_str_charAt(GdomeDOMString*, int)
 */
GdomeDOMString.prototype.charAt = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_charAt(this.pointer, arg0);
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMImplementation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
	} else {
		if(arg1 instanceof GdomeDOMImplementation) {
			return arg1;
		} else if(arg1.toGdomeDOMImplementation !== undefined) {
			return arg1.toGdomeDOMImplementation();
		} else {
			throw "Could not convert object to GdomeDOMImplementation!";
		}
	}
}

/** GdomeDOMImplementation ref method
 * C header: void gdome_di_ref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.ref";
	CGDOME.call.gdome_di_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation unref method
 * C header: void gdome_di_unref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.unref";
	CGDOME.call.gdome_di_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocumentType method
 * C header: GdomeDocumentType* gdome_di_createDocumentType(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocumentType = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType";
	var ret = CGDOME.call.gdome_di_createDocumentType(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDOMImplementation createDocument method
 * C header: GdomeDocument* gdome_di_createDocument(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDocumentType*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocument = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg2 instanceof GdomeDocumentType)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: argument not instance of GdomeDocumentType";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: !arg2.pointer";
	if(arg2.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument";
	var ret = CGDOME.call.gdome_di_createDocument(this.pointer, gstr0.pointer, gstr1.pointer, arg2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation freeDoc method
 * C header: void gdome_di_freeDoc(GdomeDOMImplementation*, GdomeDocument*, GdomeException*)
 */
GdomeDOMImplementation.prototype.freeDoc = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc";
	CGDOME.call.gdome_di_freeDoc(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocFromURI method
 * C header: GdomeDocument* gdome_di_createDocFromURI(GdomeDOMImplementation*, const char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromURI = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromURI";
	var ret = CGDOME.call.gdome_di_createDocFromURI(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation createDocFromMemory method
 * C header: GdomeDocument* gdome_di_createDocFromMemory(GdomeDOMImplementation*, char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromMemory = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromMemory";
	var ret = CGDOME.call.gdome_di_createDocFromMemory(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation saveDocToFile method
 * C header: GdomeBoolean gdome_di_saveDocToFile(GdomeDOMImplementation*, GdomeDocument*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFile = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile";
	var ret = CGDOME.call.gdome_di_saveDocToFile(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToFileEnc method
 * C header: GdomeBoolean gdome_di_saveDocToFileEnc(GdomeDOMImplementation*, GdomeDocument*, const char*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFileEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc";
	var ret = CGDOME.call.gdome_di_saveDocToFileEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemory method
 * C header: GdomeBoolean gdome_di_saveDocToMemory(GdomeDOMImplementation*, GdomeDocument*, char**, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemory = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory";
	var ret = CGDOME.call.gdome_di_saveDocToMemory(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemoryEnc method
 * C header: GdomeBoolean gdome_di_saveDocToMemoryEnc(GdomeDOMImplementation*, GdomeDocument*, char**, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemoryEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc";
	var ret = CGDOME.call.gdome_di_saveDocToMemoryEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentType(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentType) {
			return arg1;
		} else if(arg1.toGdomeDocumentType !== undefined) {
			return arg1.toGdomeDocumentType();
		} else {
			throw "Could not convert object to GdomeDocumentType!";
		}
	}
}

/** GdomeDocumentType name method
 * C header: GdomeDOMString* gdome_dt_name(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.name";
	var ret = CGDOME.call.gdome_dt_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType entities method
 * C header: GdomeNamedNodeMap* gdome_dt_entities(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.entities = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.entities";
	var ret = CGDOME.call.gdome_dt_entities(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType notations method
 * C header: GdomeNamedNodeMap* gdome_dt_notations(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.notations = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.notations";
	var ret = CGDOME.call.gdome_dt_notations(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType publicId method
 * C header: GdomeDOMString* gdome_dt_publicId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.publicId";
	var ret = CGDOME.call.gdome_dt_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType systemId method
 * C header: GdomeDOMString* gdome_dt_systemId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.systemId";
	var ret = CGDOME.call.gdome_dt_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType internalSubset method
 * C header: GdomeDOMString* gdome_dt_internalSubset(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.internalSubset = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.internalSubset";
	var ret = CGDOME.call.gdome_dt_internalSubset(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType ref method
 * C header: void gdome_dt_ref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ref";
	CGDOME.call.gdome_dt_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType unref method
 * C header: void gdome_dt_unref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.unref";
	CGDOME.call.gdome_dt_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType query_interface method
 * C header: gpointer gdome_dt_query_interface(GdomeDocumentType*, const char*, GdomeException*)
 */
GdomeDocumentType.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.query_interface";
	var ret = CGDOME.call.gdome_dt_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType nodeName method
 * C header: GdomeDOMString* gdome_dt_nodeName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeName";
	var ret = CGDOME.call.gdome_dt_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType nodeValue method
 * C header: GdomeDOMString* gdome_dt_nodeValue(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeValue";
	var ret = CGDOME.call.gdome_dt_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_nodeValue method
 * C header: void gdome_dt_set_nodeValue(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue";
	CGDOME.call.gdome_dt_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType nodeType method
 * C header: unsigned short gdome_dt_nodeType(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeType";
	var ret = CGDOME.call.gdome_dt_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType parentNode method
 * C header: GdomeNode* gdome_dt_parentNode(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.parentNode";
	var ret = CGDOME.call.gdome_dt_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType childNodes method
 * C header: GdomeNodeList* gdome_dt_childNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.childNodes";
	var ret = CGDOME.call.gdome_dt_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentType firstChild method
 * C header: GdomeNode* gdome_dt_firstChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.firstChild";
	var ret = CGDOME.call.gdome_dt_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType lastChild method
 * C header: GdomeNode* gdome_dt_lastChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.lastChild";
	var ret = CGDOME.call.gdome_dt_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType previousSibling method
 * C header: GdomeNode* gdome_dt_previousSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.previousSibling";
	var ret = CGDOME.call.gdome_dt_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType nextSibling method
 * C header: GdomeNode* gdome_dt_nextSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nextSibling";
	var ret = CGDOME.call.gdome_dt_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType attributes method
 * C header: GdomeNamedNodeMap* gdome_dt_attributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.attributes";
	var ret = CGDOME.call.gdome_dt_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType ownerDocument method
 * C header: GdomeDocument* gdome_dt_ownerDocument(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_dt_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentType insertBefore method
 * C header: GdomeNode* gdome_dt_insertBefore(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore";
	var ret = CGDOME.call.gdome_dt_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType replaceChild method
 * C header: GdomeNode* gdome_dt_replaceChild(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild";
	var ret = CGDOME.call.gdome_dt_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType removeChild method
 * C header: GdomeNode* gdome_dt_removeChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild";
	var ret = CGDOME.call.gdome_dt_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType appendChild method
 * C header: GdomeNode* gdome_dt_appendChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild";
	var ret = CGDOME.call.gdome_dt_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType hasChildNodes method
 * C header: GdomeBoolean gdome_dt_hasChildNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_dt_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType cloneNode method
 * C header: GdomeNode* gdome_dt_cloneNode(GdomeDocumentType*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.cloneNode";
	var ret = CGDOME.call.gdome_dt_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType normalize method
 * C header: void gdome_dt_normalize(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.normalize";
	CGDOME.call.gdome_dt_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType isSupported method
 * C header: GdomeBoolean gdome_dt_isSupported(GdomeDocumentType*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported";
	var ret = CGDOME.call.gdome_dt_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType namespaceURI method
 * C header: GdomeDOMString* gdome_dt_namespaceURI(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_dt_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType prefix method
 * C header: GdomeDOMString* gdome_dt_prefix(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.prefix";
	var ret = CGDOME.call.gdome_dt_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_prefix method
 * C header: void gdome_dt_set_prefix(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix";
	CGDOME.call.gdome_dt_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType localName method
 * C header: GdomeDOMString* gdome_dt_localName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.localName";
	var ret = CGDOME.call.gdome_dt_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType hasAttributes method
 * C header: GdomeBoolean gdome_dt_hasAttributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_dt_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType addEventListener method
 * C header: void gdome_dt_addEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener";
	CGDOME.call.gdome_dt_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType removeEventListener method
 * C header: void gdome_dt_removeEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener";
	CGDOME.call.gdome_dt_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType dispatchEvent method
 * C header: GdomeBoolean gdome_dt_dispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_dt_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType subTreeDispatchEvent method
 * C header: void gdome_dt_subTreeDispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_dt_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType canAppend method
 * C header: GdomeBoolean gdome_dt_canAppend(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend";
	var ret = CGDOME.call.gdome_dt_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentFragment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentFragment) {
			return arg1;
		} else if(arg1.toGdomeDocumentFragment !== undefined) {
			return arg1.toGdomeDocumentFragment();
		} else {
			throw "Could not convert object to GdomeDocumentFragment!";
		}
	}
}

/** GdomeDocumentFragment ref method
 * C header: void gdome_df_ref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ref";
	CGDOME.call.gdome_df_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment unref method
 * C header: void gdome_df_unref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.unref";
	CGDOME.call.gdome_df_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment query_interface method
 * C header: gpointer gdome_df_query_interface(GdomeDocumentFragment*, const char*, GdomeException*)
 */
GdomeDocumentFragment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.query_interface";
	var ret = CGDOME.call.gdome_df_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment nodeName method
 * C header: GdomeDOMString* gdome_df_nodeName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeName";
	var ret = CGDOME.call.gdome_df_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment nodeValue method
 * C header: GdomeDOMString* gdome_df_nodeValue(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_df_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_nodeValue method
 * C header: void gdome_df_set_nodeValue(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue";
	CGDOME.call.gdome_df_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment nodeType method
 * C header: unsigned short gdome_df_nodeType(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeType";
	var ret = CGDOME.call.gdome_df_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment parentNode method
 * C header: GdomeNode* gdome_df_parentNode(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.parentNode";
	var ret = CGDOME.call.gdome_df_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment childNodes method
 * C header: GdomeNodeList* gdome_df_childNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.childNodes";
	var ret = CGDOME.call.gdome_df_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentFragment firstChild method
 * C header: GdomeNode* gdome_df_firstChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.firstChild";
	var ret = CGDOME.call.gdome_df_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment lastChild method
 * C header: GdomeNode* gdome_df_lastChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.lastChild";
	var ret = CGDOME.call.gdome_df_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment previousSibling method
 * C header: GdomeNode* gdome_df_previousSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_df_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment nextSibling method
 * C header: GdomeNode* gdome_df_nextSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_df_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment attributes method
 * C header: GdomeNamedNodeMap* gdome_df_attributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.attributes";
	var ret = CGDOME.call.gdome_df_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentFragment ownerDocument method
 * C header: GdomeDocument* gdome_df_ownerDocument(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_df_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentFragment insertBefore method
 * C header: GdomeNode* gdome_df_insertBefore(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_df_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment replaceChild method
 * C header: GdomeNode* gdome_df_replaceChild(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_df_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment removeChild method
 * C header: GdomeNode* gdome_df_removeChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild";
	var ret = CGDOME.call.gdome_df_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment appendChild method
 * C header: GdomeNode* gdome_df_appendChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild";
	var ret = CGDOME.call.gdome_df_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment hasChildNodes method
 * C header: GdomeBoolean gdome_df_hasChildNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_df_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment cloneNode method
 * C header: GdomeNode* gdome_df_cloneNode(GdomeDocumentFragment*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_df_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment normalize method
 * C header: void gdome_df_normalize(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.normalize";
	CGDOME.call.gdome_df_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment isSupported method
 * C header: GdomeBoolean gdome_df_isSupported(GdomeDocumentFragment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported";
	var ret = CGDOME.call.gdome_df_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment namespaceURI method
 * C header: GdomeDOMString* gdome_df_namespaceURI(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_df_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment prefix method
 * C header: GdomeDOMString* gdome_df_prefix(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.prefix";
	var ret = CGDOME.call.gdome_df_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_prefix method
 * C header: void gdome_df_set_prefix(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix";
	CGDOME.call.gdome_df_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment localName method
 * C header: GdomeDOMString* gdome_df_localName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.localName";
	var ret = CGDOME.call.gdome_df_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment hasAttributes method
 * C header: GdomeBoolean gdome_df_hasAttributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_df_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment addEventListener method
 * C header: void gdome_df_addEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener";
	CGDOME.call.gdome_df_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment removeEventListener method
 * C header: void gdome_df_removeEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener";
	CGDOME.call.gdome_df_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment dispatchEvent method
 * C header: GdomeBoolean gdome_df_dispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_df_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment subTreeDispatchEvent method
 * C header: void gdome_df_subTreeDispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_df_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment canAppend method
 * C header: GdomeBoolean gdome_df_canAppend(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend";
	var ret = CGDOME.call.gdome_df_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocument(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocument) {
			return arg1;
		} else if(arg1.toGdomeDocument !== undefined) {
			return arg1.toGdomeDocument();
		} else {
			throw "Could not convert object to GdomeDocument!";
		}
	}
}

/** GdomeDocument doctype method
 * C header: GdomeDocumentType* gdome_doc_doctype(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.doctype = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.doctype";
	var ret = CGDOME.call.gdome_doc_doctype(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDocument implementation method
 * C header: GdomeDOMImplementation* gdome_doc_implementation(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.implementation = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.implementation";
	var ret = CGDOME.call.gdome_doc_implementation(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMImplementation(ret, this.di); }
}

/** GdomeDocument documentElement method
 * C header: GdomeElement* gdome_doc_documentElement(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.documentElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.documentElement";
	var ret = CGDOME.call.gdome_doc_documentElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createElement method
 * C header: GdomeElement* gdome_doc_createElement(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElement = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElement: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElement";
	var ret = CGDOME.call.gdome_doc_createElement(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createDocumentFragment method
 * C header: GdomeDocumentFragment* gdome_doc_createDocumentFragment(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.createDocumentFragment = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.createDocumentFragment";
	var ret = CGDOME.call.gdome_doc_createDocumentFragment(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentFragment(ret, this.di); }
}

/** GdomeDocument createTextNode method
 * C header: GdomeText* gdome_doc_createTextNode(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createTextNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createTextNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createTextNode";
	var ret = CGDOME.call.gdome_doc_createTextNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeDocument createComment method
 * C header: GdomeComment* gdome_doc_createComment(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createComment = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createComment: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createComment";
	var ret = CGDOME.call.gdome_doc_createComment(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeComment(ret, this.di); }
}

/** GdomeDocument createCDATASection method
 * C header: GdomeCDATASection* gdome_doc_createCDATASection(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createCDATASection = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection";
	var ret = CGDOME.call.gdome_doc_createCDATASection(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeCDATASection(ret, this.di); }
}

/** GdomeDocument createProcessingInstruction method
 * C header: GdomeProcessingInstruction* gdome_doc_createProcessingInstruction(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createProcessingInstruction = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction";
	var ret = CGDOME.call.gdome_doc_createProcessingInstruction(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeProcessingInstruction(ret, this.di); }
}

/** GdomeDocument createAttribute method
 * C header: GdomeAttr* gdome_doc_createAttribute(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttribute";
	var ret = CGDOME.call.gdome_doc_createAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument createEntityReference method
 * C header: GdomeEntityReference* gdome_doc_createEntityReference(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEntityReference = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference";
	var ret = CGDOME.call.gdome_doc_createEntityReference(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEntityReference(ret, this.di); }
}

/** GdomeDocument getElementsByTagName method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagName(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_doc_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument importNode method
 * C header: GdomeNode* gdome_doc_importNode(GdomeDocument*, GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.importNode = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.importNode: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.importNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.importNode";
	var ret = CGDOME.call.gdome_doc_importNode(this.pointer, arg0.pointer, (arg1?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument createElementNS method
 * C header: GdomeElement* gdome_doc_createElementNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElementNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElementNS";
	var ret = CGDOME.call.gdome_doc_createElementNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createAttributeNS method
 * C header: GdomeAttr* gdome_doc_createAttributeNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS";
	var ret = CGDOME.call.gdome_doc_createAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagNameNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_doc_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument getElementById method
 * C header: GdomeElement* gdome_doc_getElementById(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementById = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementById: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementById";
	var ret = CGDOME.call.gdome_doc_getElementById(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createEvent method
 * C header: GdomeEvent* gdome_doc_createEvent(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEvent: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEvent";
	var ret = CGDOME.call.gdome_doc_createEvent(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEvent(ret, this.di); }
}

/** GdomeDocument ref method
 * C header: void gdome_doc_ref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ref";
	CGDOME.call.gdome_doc_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument unref method
 * C header: void gdome_doc_unref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.unref";
	CGDOME.call.gdome_doc_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument query_interface method
 * C header: gpointer gdome_doc_query_interface(GdomeDocument*, const char*, GdomeException*)
 */
GdomeDocument.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.query_interface";
	var ret = CGDOME.call.gdome_doc_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument nodeName method
 * C header: GdomeDOMString* gdome_doc_nodeName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeName";
	var ret = CGDOME.call.gdome_doc_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument nodeValue method
 * C header: GdomeDOMString* gdome_doc_nodeValue(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeValue";
	var ret = CGDOME.call.gdome_doc_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_nodeValue method
 * C header: void gdome_doc_set_nodeValue(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue";
	CGDOME.call.gdome_doc_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument nodeType method
 * C header: unsigned short gdome_doc_nodeType(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeType";
	var ret = CGDOME.call.gdome_doc_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument parentNode method
 * C header: GdomeNode* gdome_doc_parentNode(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.parentNode";
	var ret = CGDOME.call.gdome_doc_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument childNodes method
 * C header: GdomeNodeList* gdome_doc_childNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.childNodes";
	var ret = CGDOME.call.gdome_doc_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument firstChild method
 * C header: GdomeNode* gdome_doc_firstChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.firstChild";
	var ret = CGDOME.call.gdome_doc_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument lastChild method
 * C header: GdomeNode* gdome_doc_lastChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.lastChild";
	var ret = CGDOME.call.gdome_doc_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument previousSibling method
 * C header: GdomeNode* gdome_doc_previousSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.previousSibling";
	var ret = CGDOME.call.gdome_doc_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument nextSibling method
 * C header: GdomeNode* gdome_doc_nextSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nextSibling";
	var ret = CGDOME.call.gdome_doc_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument attributes method
 * C header: GdomeNamedNodeMap* gdome_doc_attributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.attributes";
	var ret = CGDOME.call.gdome_doc_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocument ownerDocument method
 * C header: GdomeDocument* gdome_doc_ownerDocument(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_doc_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocument insertBefore method
 * C header: GdomeNode* gdome_doc_insertBefore(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore";
	var ret = CGDOME.call.gdome_doc_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument replaceChild method
 * C header: GdomeNode* gdome_doc_replaceChild(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild";
	var ret = CGDOME.call.gdome_doc_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument removeChild method
 * C header: GdomeNode* gdome_doc_removeChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild";
	var ret = CGDOME.call.gdome_doc_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument appendChild method
 * C header: GdomeNode* gdome_doc_appendChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild";
	var ret = CGDOME.call.gdome_doc_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument hasChildNodes method
 * C header: GdomeBoolean gdome_doc_hasChildNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_doc_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument cloneNode method
 * C header: GdomeNode* gdome_doc_cloneNode(GdomeDocument*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.cloneNode";
	var ret = CGDOME.call.gdome_doc_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument normalize method
 * C header: void gdome_doc_normalize(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.normalize";
	CGDOME.call.gdome_doc_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument isSupported method
 * C header: GdomeBoolean gdome_doc_isSupported(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.isSupported";
	var ret = CGDOME.call.gdome_doc_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument namespaceURI method
 * C header: GdomeDOMString* gdome_doc_namespaceURI(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_doc_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument prefix method
 * C header: GdomeDOMString* gdome_doc_prefix(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.prefix";
	var ret = CGDOME.call.gdome_doc_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_prefix method
 * C header: void gdome_doc_set_prefix(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_prefix";
	CGDOME.call.gdome_doc_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument localName method
 * C header: GdomeDOMString* gdome_doc_localName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.localName";
	var ret = CGDOME.call.gdome_doc_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument hasAttributes method
 * C header: GdomeBoolean gdome_doc_hasAttributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_doc_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument addEventListener method
 * C header: void gdome_doc_addEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener";
	CGDOME.call.gdome_doc_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument removeEventListener method
 * C header: void gdome_doc_removeEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener";
	CGDOME.call.gdome_doc_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument dispatchEvent method
 * C header: GdomeBoolean gdome_doc_dispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_doc_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument subTreeDispatchEvent method
 * C header: void gdome_doc_subTreeDispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_doc_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument canAppend method
 * C header: GdomeBoolean gdome_doc_canAppend(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend";
	var ret = CGDOME.call.gdome_doc_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toGdomeNode !== undefined) {
			return arg1.toGdomeNode();
		} else {
			throw "Could not convert object to GdomeNode!";
		}
	}
}

/** GdomeNode ref method
 * C header: void gdome_n_ref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ref";
	CGDOME.call.gdome_n_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode unref method
 * C header: void gdome_n_unref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.unref";
	CGDOME.call.gdome_n_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode query_interface method
 * C header: gpointer gdome_n_query_interface(GdomeNode*, const char*, GdomeException*)
 */
GdomeNode.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.query_interface";
	var ret = CGDOME.call.gdome_n_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode nodeName method
 * C header: GdomeDOMString* gdome_n_nodeName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeName";
	var ret = CGDOME.call.gdome_n_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode nodeValue method
 * C header: GdomeDOMString* gdome_n_nodeValue(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeValue";
	var ret = CGDOME.call.gdome_n_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_nodeValue method
 * C header: void gdome_n_set_nodeValue(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue";
	CGDOME.call.gdome_n_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode nodeType method
 * C header: unsigned short gdome_n_nodeType(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeType";
	var ret = CGDOME.call.gdome_n_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode parentNode method
 * C header: GdomeNode* gdome_n_parentNode(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.parentNode";
	var ret = CGDOME.call.gdome_n_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode childNodes method
 * C header: GdomeNodeList* gdome_n_childNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.childNodes";
	var ret = CGDOME.call.gdome_n_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNode firstChild method
 * C header: GdomeNode* gdome_n_firstChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.firstChild";
	var ret = CGDOME.call.gdome_n_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode lastChild method
 * C header: GdomeNode* gdome_n_lastChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.lastChild";
	var ret = CGDOME.call.gdome_n_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode previousSibling method
 * C header: GdomeNode* gdome_n_previousSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.previousSibling";
	var ret = CGDOME.call.gdome_n_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode nextSibling method
 * C header: GdomeNode* gdome_n_nextSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nextSibling";
	var ret = CGDOME.call.gdome_n_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode attributes method
 * C header: GdomeNamedNodeMap* gdome_n_attributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.attributes";
	var ret = CGDOME.call.gdome_n_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNode ownerDocument method
 * C header: GdomeDocument* gdome_n_ownerDocument(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_n_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNode insertBefore method
 * C header: GdomeNode* gdome_n_insertBefore(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore";
	var ret = CGDOME.call.gdome_n_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode replaceChild method
 * C header: GdomeNode* gdome_n_replaceChild(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild";
	var ret = CGDOME.call.gdome_n_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode removeChild method
 * C header: GdomeNode* gdome_n_removeChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeChild";
	var ret = CGDOME.call.gdome_n_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode appendChild method
 * C header: GdomeNode* gdome_n_appendChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.appendChild";
	var ret = CGDOME.call.gdome_n_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode hasChildNodes method
 * C header: GdomeBoolean gdome_n_hasChildNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_n_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode cloneNode method
 * C header: GdomeNode* gdome_n_cloneNode(GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.cloneNode";
	var ret = CGDOME.call.gdome_n_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode normalize method
 * C header: void gdome_n_normalize(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.normalize";
	CGDOME.call.gdome_n_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode isSupported method
 * C header: GdomeBoolean gdome_n_isSupported(GdomeNode*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.isSupported";
	var ret = CGDOME.call.gdome_n_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode namespaceURI method
 * C header: GdomeDOMString* gdome_n_namespaceURI(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_n_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode prefix method
 * C header: GdomeDOMString* gdome_n_prefix(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.prefix";
	var ret = CGDOME.call.gdome_n_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_prefix method
 * C header: void gdome_n_set_prefix(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_prefix";
	CGDOME.call.gdome_n_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode localName method
 * C header: GdomeDOMString* gdome_n_localName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.localName";
	var ret = CGDOME.call.gdome_n_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode hasAttributes method
 * C header: GdomeBoolean gdome_n_hasAttributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_n_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode addEventListener method
 * C header: void gdome_n_addEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener";
	CGDOME.call.gdome_n_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode removeEventListener method
 * C header: void gdome_n_removeEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener";
	CGDOME.call.gdome_n_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode dispatchEvent method
 * C header: GdomeBoolean gdome_n_dispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_n_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode subTreeDispatchEvent method
 * C header: void gdome_n_subTreeDispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_n_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode canAppend method
 * C header: GdomeBoolean gdome_n_canAppend(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.canAppend";
	var ret = CGDOME.call.gdome_n_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNodeList(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNodeList) {
			return arg1;
		} else if(arg1.toGdomeNodeList !== undefined) {
			return arg1.toGdomeNodeList();
		} else {
			throw "Could not convert object to GdomeNodeList!";
		}
	}
}

/** GdomeNodeList ref method
 * C header: void gdome_nl_ref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.ref";
	CGDOME.call.gdome_nl_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList unref method
 * C header: void gdome_nl_unref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.unref";
	CGDOME.call.gdome_nl_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList query_interface method
 * C header: gpointer gdome_nl_query_interface(GdomeNodeList*, const char*, GdomeException*)
 */
GdomeNodeList.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.query_interface";
	var ret = CGDOME.call.gdome_nl_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNodeList item method
 * C header: GdomeNode* gdome_nl_item(GdomeNodeList*, gulong, GdomeException*)
 */
GdomeNodeList.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.item";
	var ret = CGDOME.call.gdome_nl_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNodeList length method
 * C header: gulong gdome_nl_length(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.length";
	var ret = CGDOME.call.gdome_nl_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNamedNodeMap(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNamedNodeMap) {
			return arg1;
		} else if(arg1.toGdomeNamedNodeMap !== undefined) {
			return arg1.toGdomeNamedNodeMap();
		} else {
			throw "Could not convert object to GdomeNamedNodeMap!";
		}
	}
}

/** GdomeNamedNodeMap ref method
 * C header: void gdome_nnm_ref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.ref";
	CGDOME.call.gdome_nnm_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap unref method
 * C header: void gdome_nnm_unref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.unref";
	CGDOME.call.gdome_nnm_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap query_interface method
 * C header: gpointer gdome_nnm_query_interface(GdomeNamedNodeMap*, const char*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.query_interface";
	var ret = CGDOME.call.gdome_nnm_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItem method
 * C header: GdomeNode* gdome_nnm_getNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem";
	var ret = CGDOME.call.gdome_nnm_getNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItem method
 * C header: GdomeNode* gdome_nnm_setNamedItem(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem";
	var ret = CGDOME.call.gdome_nnm_setNamedItem(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItem method
 * C header: GdomeNode* gdome_nnm_removeNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem";
	var ret = CGDOME.call.gdome_nnm_removeNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap item method
 * C header: GdomeNode* gdome_nnm_item(GdomeNamedNodeMap*, gulong, GdomeException*)
 */
GdomeNamedNodeMap.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.item";
	var ret = CGDOME.call.gdome_nnm_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap length method
 * C header: gulong gdome_nnm_length(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.length";
	var ret = CGDOME.call.gdome_nnm_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItemNS method
 * C header: GdomeNode* gdome_nnm_getNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_getNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItemNS method
 * C header: GdomeNode* gdome_nnm_setNamedItemNS(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItemNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_setNamedItemNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItemNS method
 * C header: GdomeNode* gdome_nnm_removeNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_removeNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCharacterData(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCharacterData) {
			return arg1;
		} else if(arg1.toGdomeCharacterData !== undefined) {
			return arg1.toGdomeCharacterData();
		} else {
			throw "Could not convert object to GdomeCharacterData!";
		}
	}
}

/** GdomeCharacterData data method
 * C header: GdomeDOMString* gdome_cd_data(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.data";
	var ret = CGDOME.call.gdome_cd_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_data method
 * C header: void gdome_cd_set_data(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_data";
	CGDOME.call.gdome_cd_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData length method
 * C header: gulong gdome_cd_length(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.length";
	var ret = CGDOME.call.gdome_cd_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData substringData method
 * C header: GdomeDOMString* gdome_cd_substringData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.substringData";
	var ret = CGDOME.call.gdome_cd_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData appendData method
 * C header: void gdome_cd_appendData(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendData";
	CGDOME.call.gdome_cd_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData insertData method
 * C header: void gdome_cd_insertData(GdomeCharacterData*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertData";
	CGDOME.call.gdome_cd_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData deleteData method
 * C header: void gdome_cd_deleteData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.deleteData";
	CGDOME.call.gdome_cd_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData replaceData method
 * C header: void gdome_cd_replaceData(GdomeCharacterData*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData";
	CGDOME.call.gdome_cd_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData ref method
 * C header: void gdome_cd_ref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ref";
	CGDOME.call.gdome_cd_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData unref method
 * C header: void gdome_cd_unref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.unref";
	CGDOME.call.gdome_cd_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData query_interface method
 * C header: gpointer gdome_cd_query_interface(GdomeCharacterData*, const char*, GdomeException*)
 */
GdomeCharacterData.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.query_interface";
	var ret = CGDOME.call.gdome_cd_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData nodeName method
 * C header: GdomeDOMString* gdome_cd_nodeName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeName";
	var ret = CGDOME.call.gdome_cd_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData nodeValue method
 * C header: GdomeDOMString* gdome_cd_nodeValue(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cd_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_nodeValue method
 * C header: void gdome_cd_set_nodeValue(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue";
	CGDOME.call.gdome_cd_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData nodeType method
 * C header: unsigned short gdome_cd_nodeType(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeType";
	var ret = CGDOME.call.gdome_cd_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData parentNode method
 * C header: GdomeNode* gdome_cd_parentNode(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.parentNode";
	var ret = CGDOME.call.gdome_cd_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData childNodes method
 * C header: GdomeNodeList* gdome_cd_childNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.childNodes";
	var ret = CGDOME.call.gdome_cd_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCharacterData firstChild method
 * C header: GdomeNode* gdome_cd_firstChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.firstChild";
	var ret = CGDOME.call.gdome_cd_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData lastChild method
 * C header: GdomeNode* gdome_cd_lastChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.lastChild";
	var ret = CGDOME.call.gdome_cd_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData previousSibling method
 * C header: GdomeNode* gdome_cd_previousSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cd_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData nextSibling method
 * C header: GdomeNode* gdome_cd_nextSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cd_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData attributes method
 * C header: GdomeNamedNodeMap* gdome_cd_attributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.attributes";
	var ret = CGDOME.call.gdome_cd_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCharacterData ownerDocument method
 * C header: GdomeDocument* gdome_cd_ownerDocument(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cd_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCharacterData insertBefore method
 * C header: GdomeNode* gdome_cd_insertBefore(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cd_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData replaceChild method
 * C header: GdomeNode* gdome_cd_replaceChild(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cd_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData removeChild method
 * C header: GdomeNode* gdome_cd_removeChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild";
	var ret = CGDOME.call.gdome_cd_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData appendChild method
 * C header: GdomeNode* gdome_cd_appendChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild";
	var ret = CGDOME.call.gdome_cd_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData hasChildNodes method
 * C header: GdomeBoolean gdome_cd_hasChildNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cd_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData cloneNode method
 * C header: GdomeNode* gdome_cd_cloneNode(GdomeCharacterData*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cd_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData normalize method
 * C header: void gdome_cd_normalize(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.normalize";
	CGDOME.call.gdome_cd_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData isSupported method
 * C header: GdomeBoolean gdome_cd_isSupported(GdomeCharacterData*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported";
	var ret = CGDOME.call.gdome_cd_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData namespaceURI method
 * C header: GdomeDOMString* gdome_cd_namespaceURI(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cd_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData prefix method
 * C header: GdomeDOMString* gdome_cd_prefix(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.prefix";
	var ret = CGDOME.call.gdome_cd_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_prefix method
 * C header: void gdome_cd_set_prefix(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix";
	CGDOME.call.gdome_cd_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData localName method
 * C header: GdomeDOMString* gdome_cd_localName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.localName";
	var ret = CGDOME.call.gdome_cd_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData hasAttributes method
 * C header: GdomeBoolean gdome_cd_hasAttributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cd_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData addEventListener method
 * C header: void gdome_cd_addEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener";
	CGDOME.call.gdome_cd_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData removeEventListener method
 * C header: void gdome_cd_removeEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener";
	CGDOME.call.gdome_cd_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData dispatchEvent method
 * C header: GdomeBoolean gdome_cd_dispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cd_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData subTreeDispatchEvent method
 * C header: void gdome_cd_subTreeDispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cd_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData canAppend method
 * C header: GdomeBoolean gdome_cd_canAppend(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend";
	var ret = CGDOME.call.gdome_cd_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeAttr(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeAttr) {
			return arg1;
		} else if(arg1.toGdomeAttr !== undefined) {
			return arg1.toGdomeAttr();
		} else {
			throw "Could not convert object to GdomeAttr!";
		}
	}
}

/** GdomeAttr ref method
 * C header: void gdome_a_ref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ref";
	CGDOME.call.gdome_a_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr unref method
 * C header: void gdome_a_unref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.unref";
	CGDOME.call.gdome_a_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr query_interface method
 * C header: gpointer gdome_a_query_interface(GdomeAttr*, const char*, GdomeException*)
 */
GdomeAttr.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.query_interface";
	var ret = CGDOME.call.gdome_a_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr name method
 * C header: GdomeDOMString* gdome_a_name(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.name";
	var ret = CGDOME.call.gdome_a_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr ownerElement method
 * C header: GdomeElement* gdome_a_ownerElement(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerElement";
	var ret = CGDOME.call.gdome_a_ownerElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeAttr specified method
 * C header: GdomeBoolean gdome_a_specified(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.specified = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.specified";
	var ret = CGDOME.call.gdome_a_specified(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr value method
 * C header: GdomeDOMString* gdome_a_value(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.value = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.value";
	var ret = CGDOME.call.gdome_a_value(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_value method
 * C header: void gdome_a_set_value(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_value = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_value: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_value";
	CGDOME.call.gdome_a_set_value(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeName method
 * C header: GdomeDOMString* gdome_a_nodeName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeName";
	var ret = CGDOME.call.gdome_a_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr nodeValue method
 * C header: GdomeDOMString* gdome_a_nodeValue(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeValue";
	var ret = CGDOME.call.gdome_a_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_nodeValue method
 * C header: void gdome_a_set_nodeValue(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue";
	CGDOME.call.gdome_a_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeType method
 * C header: unsigned short gdome_a_nodeType(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeType";
	var ret = CGDOME.call.gdome_a_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr parentNode method
 * C header: GdomeNode* gdome_a_parentNode(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.parentNode";
	var ret = CGDOME.call.gdome_a_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr childNodes method
 * C header: GdomeNodeList* gdome_a_childNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.childNodes";
	var ret = CGDOME.call.gdome_a_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeAttr firstChild method
 * C header: GdomeNode* gdome_a_firstChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.firstChild";
	var ret = CGDOME.call.gdome_a_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr lastChild method
 * C header: GdomeNode* gdome_a_lastChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.lastChild";
	var ret = CGDOME.call.gdome_a_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr previousSibling method
 * C header: GdomeNode* gdome_a_previousSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.previousSibling";
	var ret = CGDOME.call.gdome_a_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr nextSibling method
 * C header: GdomeNode* gdome_a_nextSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nextSibling";
	var ret = CGDOME.call.gdome_a_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr attributes method
 * C header: GdomeNamedNodeMap* gdome_a_attributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.attributes";
	var ret = CGDOME.call.gdome_a_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeAttr ownerDocument method
 * C header: GdomeDocument* gdome_a_ownerDocument(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_a_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeAttr insertBefore method
 * C header: GdomeNode* gdome_a_insertBefore(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore";
	var ret = CGDOME.call.gdome_a_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr replaceChild method
 * C header: GdomeNode* gdome_a_replaceChild(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild";
	var ret = CGDOME.call.gdome_a_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr removeChild method
 * C header: GdomeNode* gdome_a_removeChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild";
	var ret = CGDOME.call.gdome_a_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr appendChild method
 * C header: GdomeNode* gdome_a_appendChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild";
	var ret = CGDOME.call.gdome_a_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr hasChildNodes method
 * C header: GdomeBoolean gdome_a_hasChildNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_a_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr cloneNode method
 * C header: GdomeNode* gdome_a_cloneNode(GdomeAttr*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.cloneNode";
	var ret = CGDOME.call.gdome_a_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr normalize method
 * C header: void gdome_a_normalize(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.normalize";
	CGDOME.call.gdome_a_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr isSupported method
 * C header: GdomeBoolean gdome_a_isSupported(GdomeAttr*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.isSupported";
	var ret = CGDOME.call.gdome_a_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr namespaceURI method
 * C header: GdomeDOMString* gdome_a_namespaceURI(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_a_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr prefix method
 * C header: GdomeDOMString* gdome_a_prefix(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.prefix";
	var ret = CGDOME.call.gdome_a_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_prefix method
 * C header: void gdome_a_set_prefix(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_prefix";
	CGDOME.call.gdome_a_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr localName method
 * C header: GdomeDOMString* gdome_a_localName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.localName";
	var ret = CGDOME.call.gdome_a_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr hasAttributes method
 * C header: GdomeBoolean gdome_a_hasAttributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_a_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr addEventListener method
 * C header: void gdome_a_addEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener";
	CGDOME.call.gdome_a_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr removeEventListener method
 * C header: void gdome_a_removeEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener";
	CGDOME.call.gdome_a_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr dispatchEvent method
 * C header: GdomeBoolean gdome_a_dispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_a_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr subTreeDispatchEvent method
 * C header: void gdome_a_subTreeDispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_a_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr canAppend method
 * C header: GdomeBoolean gdome_a_canAppend(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend";
	var ret = CGDOME.call.gdome_a_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeElement(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeElement) {
			return arg1;
		} else if(arg1.toGdomeElement !== undefined) {
			return arg1.toGdomeElement();
		} else {
			throw "Could not convert object to GdomeElement!";
		}
	}
}

/** GdomeElement tagName method
 * C header: GdomeDOMString* gdome_el_tagName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.tagName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.tagName";
	var ret = CGDOME.call.gdome_el_tagName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement getAttribute method
 * C header: GdomeDOMString* gdome_el_getAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttribute";
	var ret = CGDOME.call.gdome_el_getAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttribute method
 * C header: void gdome_el_setAttribute(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttribute = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttribute";
	CGDOME.call.gdome_el_setAttribute(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttribute method
 * C header: void gdome_el_removeAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttribute";
	CGDOME.call.gdome_el_removeAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNode method
 * C header: GdomeAttr* gdome_el_getAttributeNode(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode";
	var ret = CGDOME.call.gdome_el_getAttributeNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNode method
 * C header: GdomeAttr* gdome_el_setAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode";
	var ret = CGDOME.call.gdome_el_setAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement removeAttributeNode method
 * C header: GdomeAttr* gdome_el_removeAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode";
	var ret = CGDOME.call.gdome_el_removeAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagName method
 * C header: GdomeNodeList* gdome_el_getElementsByTagName(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_el_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement getAttributeNS method
 * C header: GdomeDOMString* gdome_el_getAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttributeNS method
 * C header: void gdome_el_setAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNS = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS";
	CGDOME.call.gdome_el_setAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttributeNS method
 * C header: void gdome_el_removeAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS";
	CGDOME.call.gdome_el_removeAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_getAttributeNodeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNodeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNodeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_setAttributeNodeNS(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNodeNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_setAttributeNodeNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_el_getElementsByTagNameNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_el_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement hasAttribute method
 * C header: GdomeBoolean gdome_el_hasAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttribute";
	var ret = CGDOME.call.gdome_el_hasAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement hasAttributeNS method
 * C header: GdomeBoolean gdome_el_hasAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS";
	var ret = CGDOME.call.gdome_el_hasAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement ref method
 * C header: void gdome_el_ref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ref";
	CGDOME.call.gdome_el_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement unref method
 * C header: void gdome_el_unref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.unref";
	CGDOME.call.gdome_el_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement query_interface method
 * C header: gpointer gdome_el_query_interface(GdomeElement*, const char*, GdomeException*)
 */
GdomeElement.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.query_interface";
	var ret = CGDOME.call.gdome_el_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement nodeName method
 * C header: GdomeDOMString* gdome_el_nodeName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeName";
	var ret = CGDOME.call.gdome_el_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement nodeValue method
 * C header: GdomeDOMString* gdome_el_nodeValue(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeValue";
	var ret = CGDOME.call.gdome_el_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_nodeValue method
 * C header: void gdome_el_set_nodeValue(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue";
	CGDOME.call.gdome_el_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement nodeType method
 * C header: unsigned short gdome_el_nodeType(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeType";
	var ret = CGDOME.call.gdome_el_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement parentNode method
 * C header: GdomeNode* gdome_el_parentNode(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.parentNode";
	var ret = CGDOME.call.gdome_el_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement childNodes method
 * C header: GdomeNodeList* gdome_el_childNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.childNodes";
	var ret = CGDOME.call.gdome_el_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement firstChild method
 * C header: GdomeNode* gdome_el_firstChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.firstChild";
	var ret = CGDOME.call.gdome_el_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement lastChild method
 * C header: GdomeNode* gdome_el_lastChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.lastChild";
	var ret = CGDOME.call.gdome_el_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement previousSibling method
 * C header: GdomeNode* gdome_el_previousSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.previousSibling";
	var ret = CGDOME.call.gdome_el_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement nextSibling method
 * C header: GdomeNode* gdome_el_nextSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nextSibling";
	var ret = CGDOME.call.gdome_el_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement attributes method
 * C header: GdomeNamedNodeMap* gdome_el_attributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.attributes";
	var ret = CGDOME.call.gdome_el_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeElement ownerDocument method
 * C header: GdomeDocument* gdome_el_ownerDocument(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_el_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeElement insertBefore method
 * C header: GdomeNode* gdome_el_insertBefore(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore";
	var ret = CGDOME.call.gdome_el_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement replaceChild method
 * C header: GdomeNode* gdome_el_replaceChild(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild";
	var ret = CGDOME.call.gdome_el_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement removeChild method
 * C header: GdomeNode* gdome_el_removeChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeChild";
	var ret = CGDOME.call.gdome_el_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement appendChild method
 * C header: GdomeNode* gdome_el_appendChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.appendChild";
	var ret = CGDOME.call.gdome_el_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement hasChildNodes method
 * C header: GdomeBoolean gdome_el_hasChildNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_el_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement cloneNode method
 * C header: GdomeNode* gdome_el_cloneNode(GdomeElement*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.cloneNode";
	var ret = CGDOME.call.gdome_el_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement normalize method
 * C header: void gdome_el_normalize(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.normalize";
	CGDOME.call.gdome_el_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement isSupported method
 * C header: GdomeBoolean gdome_el_isSupported(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.isSupported";
	var ret = CGDOME.call.gdome_el_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement namespaceURI method
 * C header: GdomeDOMString* gdome_el_namespaceURI(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_el_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement prefix method
 * C header: GdomeDOMString* gdome_el_prefix(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.prefix";
	var ret = CGDOME.call.gdome_el_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_prefix method
 * C header: void gdome_el_set_prefix(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_prefix";
	CGDOME.call.gdome_el_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement localName method
 * C header: GdomeDOMString* gdome_el_localName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.localName";
	var ret = CGDOME.call.gdome_el_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement hasAttributes method
 * C header: GdomeBoolean gdome_el_hasAttributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_el_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement addEventListener method
 * C header: void gdome_el_addEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener";
	CGDOME.call.gdome_el_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeEventListener method
 * C header: void gdome_el_removeEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener";
	CGDOME.call.gdome_el_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement dispatchEvent method
 * C header: GdomeBoolean gdome_el_dispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_el_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement subTreeDispatchEvent method
 * C header: void gdome_el_subTreeDispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_el_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement canAppend method
 * C header: GdomeBoolean gdome_el_canAppend(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.canAppend";
	var ret = CGDOME.call.gdome_el_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeText(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeText) {
			return arg1;
		} else if(arg1.toGdomeText !== undefined) {
			return arg1.toGdomeText();
		} else {
			throw "Could not convert object to GdomeText!";
		}
	}
}

/** GdomeText splitText method
 * C header: GdomeText* gdome_t_splitText(GdomeText*, gulong, GdomeException*)
 */
GdomeText.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.splitText";
	var ret = CGDOME.call.gdome_t_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeText data method
 * C header: GdomeDOMString* gdome_t_data(GdomeText*, GdomeException*)
 */
GdomeText.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.data";
	var ret = CGDOME.call.gdome_t_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_data method
 * C header: void gdome_t_set_data(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_data";
	CGDOME.call.gdome_t_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText length method
 * C header: gulong gdome_t_length(GdomeText*, GdomeException*)
 */
GdomeText.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.length";
	var ret = CGDOME.call.gdome_t_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText substringData method
 * C header: GdomeDOMString* gdome_t_substringData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.substringData";
	var ret = CGDOME.call.gdome_t_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText appendData method
 * C header: void gdome_t_appendData(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.appendData";
	CGDOME.call.gdome_t_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText insertData method
 * C header: void gdome_t_insertData(GdomeText*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.insertData";
	CGDOME.call.gdome_t_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText deleteData method
 * C header: void gdome_t_deleteData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.deleteData";
	CGDOME.call.gdome_t_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText replaceData method
 * C header: void gdome_t_replaceData(GdomeText*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceData";
	CGDOME.call.gdome_t_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText ref method
 * C header: void gdome_t_ref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ref";
	CGDOME.call.gdome_t_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText unref method
 * C header: void gdome_t_unref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.unref";
	CGDOME.call.gdome_t_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText query_interface method
 * C header: gpointer gdome_t_query_interface(GdomeText*, const char*, GdomeException*)
 */
GdomeText.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.query_interface";
	var ret = CGDOME.call.gdome_t_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText nodeName method
 * C header: GdomeDOMString* gdome_t_nodeName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeName";
	var ret = CGDOME.call.gdome_t_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText nodeValue method
 * C header: GdomeDOMString* gdome_t_nodeValue(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeValue";
	var ret = CGDOME.call.gdome_t_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_nodeValue method
 * C header: void gdome_t_set_nodeValue(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_nodeValue";
	CGDOME.call.gdome_t_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText nodeType method
 * C header: unsigned short gdome_t_nodeType(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeType";
	var ret = CGDOME.call.gdome_t_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText parentNode method
 * C header: GdomeNode* gdome_t_parentNode(GdomeText*, GdomeException*)
 */
GdomeText.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.parentNode";
	var ret = CGDOME.call.gdome_t_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText childNodes method
 * C header: GdomeNodeList* gdome_t_childNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.childNodes";
	var ret = CGDOME.call.gdome_t_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeText firstChild method
 * C header: GdomeNode* gdome_t_firstChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.firstChild";
	var ret = CGDOME.call.gdome_t_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText lastChild method
 * C header: GdomeNode* gdome_t_lastChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.lastChild";
	var ret = CGDOME.call.gdome_t_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText previousSibling method
 * C header: GdomeNode* gdome_t_previousSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.previousSibling";
	var ret = CGDOME.call.gdome_t_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText nextSibling method
 * C header: GdomeNode* gdome_t_nextSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nextSibling";
	var ret = CGDOME.call.gdome_t_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText attributes method
 * C header: GdomeNamedNodeMap* gdome_t_attributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.attributes";
	var ret = CGDOME.call.gdome_t_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeText ownerDocument method
 * C header: GdomeDocument* gdome_t_ownerDocument(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_t_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeText insertBefore method
 * C header: GdomeNode* gdome_t_insertBefore(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.insertBefore";
	var ret = CGDOME.call.gdome_t_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText replaceChild method
 * C header: GdomeNode* gdome_t_replaceChild(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.replaceChild";
	var ret = CGDOME.call.gdome_t_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText removeChild method
 * C header: GdomeNode* gdome_t_removeChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeChild";
	var ret = CGDOME.call.gdome_t_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText appendChild method
 * C header: GdomeNode* gdome_t_appendChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.appendChild";
	var ret = CGDOME.call.gdome_t_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText hasChildNodes method
 * C header: GdomeBoolean gdome_t_hasChildNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_t_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText cloneNode method
 * C header: GdomeNode* gdome_t_cloneNode(GdomeText*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.cloneNode";
	var ret = CGDOME.call.gdome_t_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText normalize method
 * C header: void gdome_t_normalize(GdomeText*, GdomeException*)
 */
GdomeText.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.normalize";
	CGDOME.call.gdome_t_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText isSupported method
 * C header: GdomeBoolean gdome_t_isSupported(GdomeText*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.isSupported";
	var ret = CGDOME.call.gdome_t_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText namespaceURI method
 * C header: GdomeDOMString* gdome_t_namespaceURI(GdomeText*, GdomeException*)
 */
GdomeText.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_t_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText prefix method
 * C header: GdomeDOMString* gdome_t_prefix(GdomeText*, GdomeException*)
 */
GdomeText.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.prefix";
	var ret = CGDOME.call.gdome_t_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_prefix method
 * C header: void gdome_t_set_prefix(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_prefix";
	CGDOME.call.gdome_t_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText localName method
 * C header: GdomeDOMString* gdome_t_localName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.localName";
	var ret = CGDOME.call.gdome_t_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText hasAttributes method
 * C header: GdomeBoolean gdome_t_hasAttributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_t_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText addEventListener method
 * C header: void gdome_t_addEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.addEventListener";
	CGDOME.call.gdome_t_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText removeEventListener method
 * C header: void gdome_t_removeEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener";
	CGDOME.call.gdome_t_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText dispatchEvent method
 * C header: GdomeBoolean gdome_t_dispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_t_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText subTreeDispatchEvent method
 * C header: void gdome_t_subTreeDispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_t_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText canAppend method
 * C header: GdomeBoolean gdome_t_canAppend(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.canAppend";
	var ret = CGDOME.call.gdome_t_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeComment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeComment) {
			return arg1;
		} else if(arg1.toGdomeComment !== undefined) {
			return arg1.toGdomeComment();
		} else {
			throw "Could not convert object to GdomeComment!";
		}
	}
}

/** GdomeComment data method
 * C header: GdomeDOMString* gdome_c_data(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.data";
	var ret = CGDOME.call.gdome_c_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_data method
 * C header: void gdome_c_set_data(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_data";
	CGDOME.call.gdome_c_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment length method
 * C header: gulong gdome_c_length(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.length";
	var ret = CGDOME.call.gdome_c_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment substringData method
 * C header: GdomeDOMString* gdome_c_substringData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.substringData";
	var ret = CGDOME.call.gdome_c_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment appendData method
 * C header: void gdome_c_appendData(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendData";
	CGDOME.call.gdome_c_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment insertData method
 * C header: void gdome_c_insertData(GdomeComment*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertData";
	CGDOME.call.gdome_c_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment deleteData method
 * C header: void gdome_c_deleteData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.deleteData";
	CGDOME.call.gdome_c_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment replaceData method
 * C header: void gdome_c_replaceData(GdomeComment*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceData";
	CGDOME.call.gdome_c_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment ref method
 * C header: void gdome_c_ref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ref";
	CGDOME.call.gdome_c_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment unref method
 * C header: void gdome_c_unref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.unref";
	CGDOME.call.gdome_c_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment query_interface method
 * C header: gpointer gdome_c_query_interface(GdomeComment*, const char*, GdomeException*)
 */
GdomeComment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.query_interface";
	var ret = CGDOME.call.gdome_c_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment nodeName method
 * C header: GdomeDOMString* gdome_c_nodeName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeName";
	var ret = CGDOME.call.gdome_c_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment nodeValue method
 * C header: GdomeDOMString* gdome_c_nodeValue(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_c_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_nodeValue method
 * C header: void gdome_c_set_nodeValue(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue";
	CGDOME.call.gdome_c_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment nodeType method
 * C header: unsigned short gdome_c_nodeType(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeType";
	var ret = CGDOME.call.gdome_c_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment parentNode method
 * C header: GdomeNode* gdome_c_parentNode(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.parentNode";
	var ret = CGDOME.call.gdome_c_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment childNodes method
 * C header: GdomeNodeList* gdome_c_childNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.childNodes";
	var ret = CGDOME.call.gdome_c_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeComment firstChild method
 * C header: GdomeNode* gdome_c_firstChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.firstChild";
	var ret = CGDOME.call.gdome_c_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment lastChild method
 * C header: GdomeNode* gdome_c_lastChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.lastChild";
	var ret = CGDOME.call.gdome_c_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment previousSibling method
 * C header: GdomeNode* gdome_c_previousSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_c_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment nextSibling method
 * C header: GdomeNode* gdome_c_nextSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_c_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment attributes method
 * C header: GdomeNamedNodeMap* gdome_c_attributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.attributes";
	var ret = CGDOME.call.gdome_c_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeComment ownerDocument method
 * C header: GdomeDocument* gdome_c_ownerDocument(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_c_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeComment insertBefore method
 * C header: GdomeNode* gdome_c_insertBefore(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_c_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment replaceChild method
 * C header: GdomeNode* gdome_c_replaceChild(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_c_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment removeChild method
 * C header: GdomeNode* gdome_c_removeChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeChild";
	var ret = CGDOME.call.gdome_c_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment appendChild method
 * C header: GdomeNode* gdome_c_appendChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.appendChild";
	var ret = CGDOME.call.gdome_c_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment hasChildNodes method
 * C header: GdomeBoolean gdome_c_hasChildNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_c_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment cloneNode method
 * C header: GdomeNode* gdome_c_cloneNode(GdomeComment*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_c_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment normalize method
 * C header: void gdome_c_normalize(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.normalize";
	CGDOME.call.gdome_c_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment isSupported method
 * C header: GdomeBoolean gdome_c_isSupported(GdomeComment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.isSupported";
	var ret = CGDOME.call.gdome_c_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment namespaceURI method
 * C header: GdomeDOMString* gdome_c_namespaceURI(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_c_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment prefix method
 * C header: GdomeDOMString* gdome_c_prefix(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.prefix";
	var ret = CGDOME.call.gdome_c_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_prefix method
 * C header: void gdome_c_set_prefix(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_prefix";
	CGDOME.call.gdome_c_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment localName method
 * C header: GdomeDOMString* gdome_c_localName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.localName";
	var ret = CGDOME.call.gdome_c_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment hasAttributes method
 * C header: GdomeBoolean gdome_c_hasAttributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_c_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment addEventListener method
 * C header: void gdome_c_addEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener";
	CGDOME.call.gdome_c_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment removeEventListener method
 * C header: void gdome_c_removeEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener";
	CGDOME.call.gdome_c_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment dispatchEvent method
 * C header: GdomeBoolean gdome_c_dispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_c_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment subTreeDispatchEvent method
 * C header: void gdome_c_subTreeDispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_c_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment canAppend method
 * C header: GdomeBoolean gdome_c_canAppend(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.canAppend";
	var ret = CGDOME.call.gdome_c_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCDATASection(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCDATASection) {
			return arg1;
		} else if(arg1.toGdomeCDATASection !== undefined) {
			return arg1.toGdomeCDATASection();
		} else {
			throw "Could not convert object to GdomeCDATASection!";
		}
	}
}

/** GdomeCDATASection splitText method
 * C header: GdomeText* gdome_cds_splitText(GdomeCDATASection*, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.splitText";
	var ret = CGDOME.call.gdome_cds_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeCDATASection data method
 * C header: GdomeDOMString* gdome_cds_data(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.data";
	var ret = CGDOME.call.gdome_cds_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_data method
 * C header: void gdome_cds_set_data(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_data";
	CGDOME.call.gdome_cds_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection length method
 * C header: gulong gdome_cds_length(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.length";
	var ret = CGDOME.call.gdome_cds_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection substringData method
 * C header: GdomeDOMString* gdome_cds_substringData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.substringData";
	var ret = CGDOME.call.gdome_cds_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection appendData method
 * C header: void gdome_cds_appendData(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendData";
	CGDOME.call.gdome_cds_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection insertData method
 * C header: void gdome_cds_insertData(GdomeCDATASection*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertData";
	CGDOME.call.gdome_cds_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection deleteData method
 * C header: void gdome_cds_deleteData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.deleteData";
	CGDOME.call.gdome_cds_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection replaceData method
 * C header: void gdome_cds_replaceData(GdomeCDATASection*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData";
	CGDOME.call.gdome_cds_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection ref method
 * C header: void gdome_cds_ref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ref";
	CGDOME.call.gdome_cds_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection unref method
 * C header: void gdome_cds_unref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.unref";
	CGDOME.call.gdome_cds_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection query_interface method
 * C header: gpointer gdome_cds_query_interface(GdomeCDATASection*, const char*, GdomeException*)
 */
GdomeCDATASection.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.query_interface";
	var ret = CGDOME.call.gdome_cds_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection nodeName method
 * C header: GdomeDOMString* gdome_cds_nodeName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeName";
	var ret = CGDOME.call.gdome_cds_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection nodeValue method
 * C header: GdomeDOMString* gdome_cds_nodeValue(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cds_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_nodeValue method
 * C header: void gdome_cds_set_nodeValue(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue";
	CGDOME.call.gdome_cds_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection nodeType method
 * C header: unsigned short gdome_cds_nodeType(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeType";
	var ret = CGDOME.call.gdome_cds_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection parentNode method
 * C header: GdomeNode* gdome_cds_parentNode(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.parentNode";
	var ret = CGDOME.call.gdome_cds_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection childNodes method
 * C header: GdomeNodeList* gdome_cds_childNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.childNodes";
	var ret = CGDOME.call.gdome_cds_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCDATASection firstChild method
 * C header: GdomeNode* gdome_cds_firstChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.firstChild";
	var ret = CGDOME.call.gdome_cds_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection lastChild method
 * C header: GdomeNode* gdome_cds_lastChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.lastChild";
	var ret = CGDOME.call.gdome_cds_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection previousSibling method
 * C header: GdomeNode* gdome_cds_previousSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cds_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection nextSibling method
 * C header: GdomeNode* gdome_cds_nextSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cds_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection attributes method
 * C header: GdomeNamedNodeMap* gdome_cds_attributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.attributes";
	var ret = CGDOME.call.gdome_cds_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCDATASection ownerDocument method
 * C header: GdomeDocument* gdome_cds_ownerDocument(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cds_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCDATASection insertBefore method
 * C header: GdomeNode* gdome_cds_insertBefore(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cds_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection replaceChild method
 * C header: GdomeNode* gdome_cds_replaceChild(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cds_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection removeChild method
 * C header: GdomeNode* gdome_cds_removeChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild";
	var ret = CGDOME.call.gdome_cds_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection appendChild method
 * C header: GdomeNode* gdome_cds_appendChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild";
	var ret = CGDOME.call.gdome_cds_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection hasChildNodes method
 * C header: GdomeBoolean gdome_cds_hasChildNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cds_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection cloneNode method
 * C header: GdomeNode* gdome_cds_cloneNode(GdomeCDATASection*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cds_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection normalize method
 * C header: void gdome_cds_normalize(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.normalize";
	CGDOME.call.gdome_cds_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection isSupported method
 * C header: GdomeBoolean gdome_cds_isSupported(GdomeCDATASection*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported";
	var ret = CGDOME.call.gdome_cds_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection namespaceURI method
 * C header: GdomeDOMString* gdome_cds_namespaceURI(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cds_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection prefix method
 * C header: GdomeDOMString* gdome_cds_prefix(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.prefix";
	var ret = CGDOME.call.gdome_cds_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_prefix method
 * C header: void gdome_cds_set_prefix(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix";
	CGDOME.call.gdome_cds_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection localName method
 * C header: GdomeDOMString* gdome_cds_localName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.localName";
	var ret = CGDOME.call.gdome_cds_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection hasAttributes method
 * C header: GdomeBoolean gdome_cds_hasAttributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cds_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection addEventListener method
 * C header: void gdome_cds_addEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener";
	CGDOME.call.gdome_cds_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection removeEventListener method
 * C header: void gdome_cds_removeEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener";
	CGDOME.call.gdome_cds_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection dispatchEvent method
 * C header: GdomeBoolean gdome_cds_dispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cds_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection subTreeDispatchEvent method
 * C header: void gdome_cds_subTreeDispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cds_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection canAppend method
 * C header: GdomeBoolean gdome_cds_canAppend(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend";
	var ret = CGDOME.call.gdome_cds_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNotation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNotation) {
			return arg1;
		} else if(arg1.toGdomeNotation !== undefined) {
			return arg1.toGdomeNotation();
		} else {
			throw "Could not convert object to GdomeNotation!";
		}
	}
}

/** GdomeNotation publicId method
 * C header: GdomeDOMString* gdome_not_publicId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.publicId";
	var ret = CGDOME.call.gdome_not_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation systemId method
 * C header: GdomeDOMString* gdome_not_systemId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.systemId";
	var ret = CGDOME.call.gdome_not_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation ref method
 * C header: void gdome_not_ref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ref";
	CGDOME.call.gdome_not_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation unref method
 * C header: void gdome_not_unref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.unref";
	CGDOME.call.gdome_not_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation query_interface method
 * C header: gpointer gdome_not_query_interface(GdomeNotation*, const char*, GdomeException*)
 */
GdomeNotation.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.query_interface";
	var ret = CGDOME.call.gdome_not_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation nodeName method
 * C header: GdomeDOMString* gdome_not_nodeName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeName";
	var ret = CGDOME.call.gdome_not_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation nodeValue method
 * C header: GdomeDOMString* gdome_not_nodeValue(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeValue";
	var ret = CGDOME.call.gdome_not_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_nodeValue method
 * C header: void gdome_not_set_nodeValue(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue";
	CGDOME.call.gdome_not_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation nodeType method
 * C header: unsigned short gdome_not_nodeType(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeType";
	var ret = CGDOME.call.gdome_not_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation parentNode method
 * C header: GdomeNode* gdome_not_parentNode(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.parentNode";
	var ret = CGDOME.call.gdome_not_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation childNodes method
 * C header: GdomeNodeList* gdome_not_childNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.childNodes";
	var ret = CGDOME.call.gdome_not_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNotation firstChild method
 * C header: GdomeNode* gdome_not_firstChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.firstChild";
	var ret = CGDOME.call.gdome_not_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation lastChild method
 * C header: GdomeNode* gdome_not_lastChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.lastChild";
	var ret = CGDOME.call.gdome_not_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation previousSibling method
 * C header: GdomeNode* gdome_not_previousSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.previousSibling";
	var ret = CGDOME.call.gdome_not_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation nextSibling method
 * C header: GdomeNode* gdome_not_nextSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nextSibling";
	var ret = CGDOME.call.gdome_not_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation attributes method
 * C header: GdomeNamedNodeMap* gdome_not_attributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.attributes";
	var ret = CGDOME.call.gdome_not_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNotation ownerDocument method
 * C header: GdomeDocument* gdome_not_ownerDocument(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_not_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNotation insertBefore method
 * C header: GdomeNode* gdome_not_insertBefore(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore";
	var ret = CGDOME.call.gdome_not_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation replaceChild method
 * C header: GdomeNode* gdome_not_replaceChild(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild";
	var ret = CGDOME.call.gdome_not_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation removeChild method
 * C header: GdomeNode* gdome_not_removeChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild";
	var ret = CGDOME.call.gdome_not_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation appendChild method
 * C header: GdomeNode* gdome_not_appendChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild";
	var ret = CGDOME.call.gdome_not_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation hasChildNodes method
 * C header: GdomeBoolean gdome_not_hasChildNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_not_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation cloneNode method
 * C header: GdomeNode* gdome_not_cloneNode(GdomeNotation*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.cloneNode";
	var ret = CGDOME.call.gdome_not_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation normalize method
 * C header: void gdome_not_normalize(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.normalize";
	CGDOME.call.gdome_not_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation isSupported method
 * C header: GdomeBoolean gdome_not_isSupported(GdomeNotation*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.isSupported";
	var ret = CGDOME.call.gdome_not_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation namespaceURI method
 * C header: GdomeDOMString* gdome_not_namespaceURI(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_not_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation prefix method
 * C header: GdomeDOMString* gdome_not_prefix(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.prefix";
	var ret = CGDOME.call.gdome_not_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_prefix method
 * C header: void gdome_not_set_prefix(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_prefix";
	CGDOME.call.gdome_not_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation localName method
 * C header: GdomeDOMString* gdome_not_localName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.localName";
	var ret = CGDOME.call.gdome_not_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation hasAttributes method
 * C header: GdomeBoolean gdome_not_hasAttributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_not_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation addEventListener method
 * C header: void gdome_not_addEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener";
	CGDOME.call.gdome_not_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation removeEventListener method
 * C header: void gdome_not_removeEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener";
	CGDOME.call.gdome_not_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation dispatchEvent method
 * C header: GdomeBoolean gdome_not_dispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_not_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation subTreeDispatchEvent method
 * C header: void gdome_not_subTreeDispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_not_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation canAppend method
 * C header: GdomeBoolean gdome_not_canAppend(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend";
	var ret = CGDOME.call.gdome_not_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntity(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntity) {
			return arg1;
		} else if(arg1.toGdomeEntity !== undefined) {
			return arg1.toGdomeEntity();
		} else {
			throw "Could not convert object to GdomeEntity!";
		}
	}
}

/** GdomeEntity publicId method
 * C header: GdomeDOMString* gdome_ent_publicId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.publicId";
	var ret = CGDOME.call.gdome_ent_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity systemId method
 * C header: GdomeDOMString* gdome_ent_systemId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.systemId";
	var ret = CGDOME.call.gdome_ent_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity notationName method
 * C header: GdomeDOMString* gdome_ent_notationName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.notationName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.notationName";
	var ret = CGDOME.call.gdome_ent_notationName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity ref method
 * C header: void gdome_ent_ref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ref";
	CGDOME.call.gdome_ent_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity unref method
 * C header: void gdome_ent_unref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.unref";
	CGDOME.call.gdome_ent_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity query_interface method
 * C header: gpointer gdome_ent_query_interface(GdomeEntity*, const char*, GdomeException*)
 */
GdomeEntity.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.query_interface";
	var ret = CGDOME.call.gdome_ent_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity nodeName method
 * C header: GdomeDOMString* gdome_ent_nodeName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeName";
	var ret = CGDOME.call.gdome_ent_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity nodeValue method
 * C header: GdomeDOMString* gdome_ent_nodeValue(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeValue";
	var ret = CGDOME.call.gdome_ent_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_nodeValue method
 * C header: void gdome_ent_set_nodeValue(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue";
	CGDOME.call.gdome_ent_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity nodeType method
 * C header: unsigned short gdome_ent_nodeType(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeType";
	var ret = CGDOME.call.gdome_ent_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity parentNode method
 * C header: GdomeNode* gdome_ent_parentNode(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.parentNode";
	var ret = CGDOME.call.gdome_ent_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity childNodes method
 * C header: GdomeNodeList* gdome_ent_childNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.childNodes";
	var ret = CGDOME.call.gdome_ent_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntity firstChild method
 * C header: GdomeNode* gdome_ent_firstChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.firstChild";
	var ret = CGDOME.call.gdome_ent_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity lastChild method
 * C header: GdomeNode* gdome_ent_lastChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.lastChild";
	var ret = CGDOME.call.gdome_ent_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity previousSibling method
 * C header: GdomeNode* gdome_ent_previousSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.previousSibling";
	var ret = CGDOME.call.gdome_ent_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity nextSibling method
 * C header: GdomeNode* gdome_ent_nextSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nextSibling";
	var ret = CGDOME.call.gdome_ent_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity attributes method
 * C header: GdomeNamedNodeMap* gdome_ent_attributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.attributes";
	var ret = CGDOME.call.gdome_ent_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntity ownerDocument method
 * C header: GdomeDocument* gdome_ent_ownerDocument(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_ent_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntity insertBefore method
 * C header: GdomeNode* gdome_ent_insertBefore(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore";
	var ret = CGDOME.call.gdome_ent_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity replaceChild method
 * C header: GdomeNode* gdome_ent_replaceChild(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild";
	var ret = CGDOME.call.gdome_ent_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity removeChild method
 * C header: GdomeNode* gdome_ent_removeChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild";
	var ret = CGDOME.call.gdome_ent_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity appendChild method
 * C header: GdomeNode* gdome_ent_appendChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild";
	var ret = CGDOME.call.gdome_ent_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity hasChildNodes method
 * C header: GdomeBoolean gdome_ent_hasChildNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_ent_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity cloneNode method
 * C header: GdomeNode* gdome_ent_cloneNode(GdomeEntity*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.cloneNode";
	var ret = CGDOME.call.gdome_ent_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity normalize method
 * C header: void gdome_ent_normalize(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.normalize";
	CGDOME.call.gdome_ent_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity isSupported method
 * C header: GdomeBoolean gdome_ent_isSupported(GdomeEntity*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.isSupported";
	var ret = CGDOME.call.gdome_ent_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity namespaceURI method
 * C header: GdomeDOMString* gdome_ent_namespaceURI(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_ent_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity prefix method
 * C header: GdomeDOMString* gdome_ent_prefix(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.prefix";
	var ret = CGDOME.call.gdome_ent_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_prefix method
 * C header: void gdome_ent_set_prefix(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_prefix";
	CGDOME.call.gdome_ent_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity localName method
 * C header: GdomeDOMString* gdome_ent_localName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.localName";
	var ret = CGDOME.call.gdome_ent_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity hasAttributes method
 * C header: GdomeBoolean gdome_ent_hasAttributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_ent_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity addEventListener method
 * C header: void gdome_ent_addEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener";
	CGDOME.call.gdome_ent_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity removeEventListener method
 * C header: void gdome_ent_removeEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener";
	CGDOME.call.gdome_ent_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity dispatchEvent method
 * C header: GdomeBoolean gdome_ent_dispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_ent_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity subTreeDispatchEvent method
 * C header: void gdome_ent_subTreeDispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_ent_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity canAppend method
 * C header: GdomeBoolean gdome_ent_canAppend(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend";
	var ret = CGDOME.call.gdome_ent_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntityReference(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntityReference) {
			return arg1;
		} else if(arg1.toGdomeEntityReference !== undefined) {
			return arg1.toGdomeEntityReference();
		} else {
			throw "Could not convert object to GdomeEntityReference!";
		}
	}
}

/** GdomeEntityReference ref method
 * C header: void gdome_er_ref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ref";
	CGDOME.call.gdome_er_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference unref method
 * C header: void gdome_er_unref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.unref";
	CGDOME.call.gdome_er_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference query_interface method
 * C header: gpointer gdome_er_query_interface(GdomeEntityReference*, const char*, GdomeException*)
 */
GdomeEntityReference.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.query_interface";
	var ret = CGDOME.call.gdome_er_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference nodeName method
 * C header: GdomeDOMString* gdome_er_nodeName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeName";
	var ret = CGDOME.call.gdome_er_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference nodeValue method
 * C header: GdomeDOMString* gdome_er_nodeValue(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeValue";
	var ret = CGDOME.call.gdome_er_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_nodeValue method
 * C header: void gdome_er_set_nodeValue(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue";
	CGDOME.call.gdome_er_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference nodeType method
 * C header: unsigned short gdome_er_nodeType(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeType";
	var ret = CGDOME.call.gdome_er_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference parentNode method
 * C header: GdomeNode* gdome_er_parentNode(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.parentNode";
	var ret = CGDOME.call.gdome_er_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference childNodes method
 * C header: GdomeNodeList* gdome_er_childNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.childNodes";
	var ret = CGDOME.call.gdome_er_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntityReference firstChild method
 * C header: GdomeNode* gdome_er_firstChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.firstChild";
	var ret = CGDOME.call.gdome_er_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference lastChild method
 * C header: GdomeNode* gdome_er_lastChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.lastChild";
	var ret = CGDOME.call.gdome_er_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference previousSibling method
 * C header: GdomeNode* gdome_er_previousSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.previousSibling";
	var ret = CGDOME.call.gdome_er_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference nextSibling method
 * C header: GdomeNode* gdome_er_nextSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nextSibling";
	var ret = CGDOME.call.gdome_er_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference attributes method
 * C header: GdomeNamedNodeMap* gdome_er_attributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.attributes";
	var ret = CGDOME.call.gdome_er_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntityReference ownerDocument method
 * C header: GdomeDocument* gdome_er_ownerDocument(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_er_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntityReference insertBefore method
 * C header: GdomeNode* gdome_er_insertBefore(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore";
	var ret = CGDOME.call.gdome_er_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference replaceChild method
 * C header: GdomeNode* gdome_er_replaceChild(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild";
	var ret = CGDOME.call.gdome_er_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference removeChild method
 * C header: GdomeNode* gdome_er_removeChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild";
	var ret = CGDOME.call.gdome_er_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference appendChild method
 * C header: GdomeNode* gdome_er_appendChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild";
	var ret = CGDOME.call.gdome_er_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference hasChildNodes method
 * C header: GdomeBoolean gdome_er_hasChildNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_er_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference cloneNode method
 * C header: GdomeNode* gdome_er_cloneNode(GdomeEntityReference*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.cloneNode";
	var ret = CGDOME.call.gdome_er_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference normalize method
 * C header: void gdome_er_normalize(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.normalize";
	CGDOME.call.gdome_er_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference isSupported method
 * C header: GdomeBoolean gdome_er_isSupported(GdomeEntityReference*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported";
	var ret = CGDOME.call.gdome_er_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference namespaceURI method
 * C header: GdomeDOMString* gdome_er_namespaceURI(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_er_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference prefix method
 * C header: GdomeDOMString* gdome_er_prefix(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.prefix";
	var ret = CGDOME.call.gdome_er_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_prefix method
 * C header: void gdome_er_set_prefix(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix";
	CGDOME.call.gdome_er_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference localName method
 * C header: GdomeDOMString* gdome_er_localName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.localName";
	var ret = CGDOME.call.gdome_er_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference hasAttributes method
 * C header: GdomeBoolean gdome_er_hasAttributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_er_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference addEventListener method
 * C header: void gdome_er_addEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener";
	CGDOME.call.gdome_er_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference removeEventListener method
 * C header: void gdome_er_removeEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener";
	CGDOME.call.gdome_er_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference dispatchEvent method
 * C header: GdomeBoolean gdome_er_dispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_er_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference subTreeDispatchEvent method
 * C header: void gdome_er_subTreeDispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_er_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference canAppend method
 * C header: GdomeBoolean gdome_er_canAppend(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend";
	var ret = CGDOME.call.gdome_er_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeProcessingInstruction(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeProcessingInstruction) {
			return arg1;
		} else if(arg1.toGdomeProcessingInstruction !== undefined) {
			return arg1.toGdomeProcessingInstruction();
		} else {
			throw "Could not convert object to GdomeProcessingInstruction!";
		}
	}
}

/** GdomeProcessingInstruction target method
 * C header: GdomeDOMString* gdome_pi_target(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.target = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.target";
	var ret = CGDOME.call.gdome_pi_target(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction data method
 * C header: GdomeDOMString* gdome_pi_data(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.data";
	var ret = CGDOME.call.gdome_pi_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_data method
 * C header: void gdome_pi_set_data(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data";
	CGDOME.call.gdome_pi_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction ref method
 * C header: void gdome_pi_ref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ref";
	CGDOME.call.gdome_pi_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction unref method
 * C header: void gdome_pi_unref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.unref";
	CGDOME.call.gdome_pi_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction query_interface method
 * C header: gpointer gdome_pi_query_interface(GdomeProcessingInstruction*, const char*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.query_interface";
	var ret = CGDOME.call.gdome_pi_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction nodeName method
 * C header: GdomeDOMString* gdome_pi_nodeName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeName";
	var ret = CGDOME.call.gdome_pi_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction nodeValue method
 * C header: GdomeDOMString* gdome_pi_nodeValue(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeValue";
	var ret = CGDOME.call.gdome_pi_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_nodeValue method
 * C header: void gdome_pi_set_nodeValue(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue";
	CGDOME.call.gdome_pi_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction nodeType method
 * C header: unsigned short gdome_pi_nodeType(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeType";
	var ret = CGDOME.call.gdome_pi_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction parentNode method
 * C header: GdomeNode* gdome_pi_parentNode(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.parentNode";
	var ret = CGDOME.call.gdome_pi_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction childNodes method
 * C header: GdomeNodeList* gdome_pi_childNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.childNodes";
	var ret = CGDOME.call.gdome_pi_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeProcessingInstruction firstChild method
 * C header: GdomeNode* gdome_pi_firstChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.firstChild";
	var ret = CGDOME.call.gdome_pi_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction lastChild method
 * C header: GdomeNode* gdome_pi_lastChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.lastChild";
	var ret = CGDOME.call.gdome_pi_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction previousSibling method
 * C header: GdomeNode* gdome_pi_previousSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.previousSibling";
	var ret = CGDOME.call.gdome_pi_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction nextSibling method
 * C header: GdomeNode* gdome_pi_nextSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nextSibling";
	var ret = CGDOME.call.gdome_pi_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction attributes method
 * C header: GdomeNamedNodeMap* gdome_pi_attributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.attributes";
	var ret = CGDOME.call.gdome_pi_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeProcessingInstruction ownerDocument method
 * C header: GdomeDocument* gdome_pi_ownerDocument(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_pi_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeProcessingInstruction insertBefore method
 * C header: GdomeNode* gdome_pi_insertBefore(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore";
	var ret = CGDOME.call.gdome_pi_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction replaceChild method
 * C header: GdomeNode* gdome_pi_replaceChild(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild";
	var ret = CGDOME.call.gdome_pi_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction removeChild method
 * C header: GdomeNode* gdome_pi_removeChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild";
	var ret = CGDOME.call.gdome_pi_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction appendChild method
 * C header: GdomeNode* gdome_pi_appendChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild";
	var ret = CGDOME.call.gdome_pi_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction hasChildNodes method
 * C header: GdomeBoolean gdome_pi_hasChildNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_pi_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction cloneNode method
 * C header: GdomeNode* gdome_pi_cloneNode(GdomeProcessingInstruction*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.cloneNode";
	var ret = CGDOME.call.gdome_pi_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction normalize method
 * C header: void gdome_pi_normalize(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.normalize";
	CGDOME.call.gdome_pi_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction isSupported method
 * C header: GdomeBoolean gdome_pi_isSupported(GdomeProcessingInstruction*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported";
	var ret = CGDOME.call.gdome_pi_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction namespaceURI method
 * C header: GdomeDOMString* gdome_pi_namespaceURI(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_pi_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction prefix method
 * C header: GdomeDOMString* gdome_pi_prefix(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.prefix";
	var ret = CGDOME.call.gdome_pi_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_prefix method
 * C header: void gdome_pi_set_prefix(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix";
	CGDOME.call.gdome_pi_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction localName method
 * C header: GdomeDOMString* gdome_pi_localName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.localName";
	var ret = CGDOME.call.gdome_pi_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction hasAttributes method
 * C header: GdomeBoolean gdome_pi_hasAttributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_pi_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction addEventListener method
 * C header: void gdome_pi_addEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener";
	CGDOME.call.gdome_pi_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction removeEventListener method
 * C header: void gdome_pi_removeEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener";
	CGDOME.call.gdome_pi_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction dispatchEvent method
 * C header: GdomeBoolean gdome_pi_dispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_pi_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction subTreeDispatchEvent method
 * C header: void gdome_pi_subTreeDispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_pi_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction canAppend method
 * C header: GdomeBoolean gdome_pi_canAppend(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend";
	var ret = CGDOME.call.gdome_pi_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}


'
0.36298300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1066 do_string_convert_to_v8 (value) at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.39085700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1066 do_string_convert_to_v8 at 0x806ef4f in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.39108400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1067 do_v8_convert_to_string (value(v8)) at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.40230400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`/* Extended JavaScript String library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Define GDOME */
GDOME = {};

/** GdomeException */
function GdomeException(msg) {
	this.pointer = CGDOME.call.gdome_extra_exc_new();
	this.msg = msg;
}

/** Delete GdomeException */
GdomeException.prototype.del = function() {
	CGDOME.call.gdome_extra_exc_del(this.pointer);
}

/** Get/set exception value */
GdomeException.prototype.value = function(v) {
	if(v===undefined) return (CGDOME.call.gdome_extra_exc_getvalue)(this.pointer);
	CGDOME.call.gdome_extra_exc_setvalue(this.pointer, v);
	return v;
}

/** Convert to string */
GdomeException.prototype.toString = function() {
	var id = this.value();
	var msg = "GdomeException: "+this.msg;
	if(id!=0) msg += " (#" + id + ")";
	return msg;
}

/** Our exception data type */
GDOME.exception = new GdomeException();

/** Convert to GdomeNode */
GdomeText.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_text_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Convert to GdomeNode */
GdomeElement.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_element_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Constructor */
function GdomeDOMString(pointer) {
	this.pointer = pointer;
}

/** Create gdome string */
GdomeDOMString.mkref = function(str) {
	var str_ptr = CGDOME.call.gdome_str_mkref_dup(str);
	if (str_ptr == 0) { throw GDOME.exception; }
	return new GdomeDOMString(str_ptr);
}

/** Convert to string */
GdomeDOMString.prototype.toString = function() {
	if(this.pointer.address == 0) return "";
	var str = "";
	for(var i=0; i<this.length(); ++i) { str += this.charAt(i); }
	return str;
}

/** unref */
GdomeDOMString.prototype.unref = function() {
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** Gdome DOM Implementation */
GDOME.createDOMImplementation = function() {
	GDOME.exception.msg = "gdome_di_mkref";
	var di_pointer = CGDOME.call.gdome_di_mkref();
	if (di_pointer == 0) { throw GDOME.exception; }
	return new GdomeDOMImplementation(di_pointer);
}

/* Construct an object (if called with new) or try to convert object to GdomeNode */
/*
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toNode !== undefined) {
			return arg1.toNode();
		}
	}
}
*/

/* EOF */
/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMString(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDOMString) {
			return arg1;
		} else if(arg1.toGdomeDOMString !== undefined) {
			return arg1.toGdomeDOMString();
		} else {
			throw "Could not convert object to GdomeDOMString!";
		}
	}
}

/** GdomeDOMString ref method
 * C header: void gdome_str_ref(GdomeDOMString*)
 */
GdomeDOMString.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_ref(this.pointer);
}

/** GdomeDOMString unref method
 * C header: void gdome_str_unref(GdomeDOMString*)
 */
GdomeDOMString.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** GdomeDOMString length method
 * C header: int gdome_str_length(GdomeDOMString*)
 */
GdomeDOMString.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_length(this.pointer);
	return ret;
}

/** GdomeDOMString isEmpty method
 * C header: GdomeBoolean gdome_str_isEmpty(GdomeDOMString*)
 */
GdomeDOMString.prototype.isEmpty = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_isEmpty(this.pointer);
	return (ret === 1) ? true : false;
}

/** GdomeDOMString charAt method
 * C header: gchar gdome_str_charAt(GdomeDOMString*, int)
 */
GdomeDOMString.prototype.charAt = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_charAt(this.pointer, arg0);
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMImplementation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
	} else {
		if(arg1 instanceof GdomeDOMImplementation) {
			return arg1;
		} else if(arg1.toGdomeDOMImplementation !== undefined) {
			return arg1.toGdomeDOMImplementation();
		} else {
			throw "Could not convert object to GdomeDOMImplementation!";
		}
	}
}

/** GdomeDOMImplementation ref method
 * C header: void gdome_di_ref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.ref";
	CGDOME.call.gdome_di_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation unref method
 * C header: void gdome_di_unref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.unref";
	CGDOME.call.gdome_di_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocumentType method
 * C header: GdomeDocumentType* gdome_di_createDocumentType(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocumentType = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType";
	var ret = CGDOME.call.gdome_di_createDocumentType(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDOMImplementation createDocument method
 * C header: GdomeDocument* gdome_di_createDocument(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDocumentType*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocument = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg2 instanceof GdomeDocumentType)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: argument not instance of GdomeDocumentType";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: !arg2.pointer";
	if(arg2.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument";
	var ret = CGDOME.call.gdome_di_createDocument(this.pointer, gstr0.pointer, gstr1.pointer, arg2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation freeDoc method
 * C header: void gdome_di_freeDoc(GdomeDOMImplementation*, GdomeDocument*, GdomeException*)
 */
GdomeDOMImplementation.prototype.freeDoc = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc";
	CGDOME.call.gdome_di_freeDoc(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocFromURI method
 * C header: GdomeDocument* gdome_di_createDocFromURI(GdomeDOMImplementation*, const char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromURI = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromURI";
	var ret = CGDOME.call.gdome_di_createDocFromURI(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation createDocFromMemory method
 * C header: GdomeDocument* gdome_di_createDocFromMemory(GdomeDOMImplementation*, char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromMemory = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromMemory";
	var ret = CGDOME.call.gdome_di_createDocFromMemory(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation saveDocToFile method
 * C header: GdomeBoolean gdome_di_saveDocToFile(GdomeDOMImplementation*, GdomeDocument*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFile = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile";
	var ret = CGDOME.call.gdome_di_saveDocToFile(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToFileEnc method
 * C header: GdomeBoolean gdome_di_saveDocToFileEnc(GdomeDOMImplementation*, GdomeDocument*, const char*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFileEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc";
	var ret = CGDOME.call.gdome_di_saveDocToFileEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemory method
 * C header: GdomeBoolean gdome_di_saveDocToMemory(GdomeDOMImplementation*, GdomeDocument*, char**, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemory = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory";
	var ret = CGDOME.call.gdome_di_saveDocToMemory(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemoryEnc method
 * C header: GdomeBoolean gdome_di_saveDocToMemoryEnc(GdomeDOMImplementation*, GdomeDocument*, char**, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemoryEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc";
	var ret = CGDOME.call.gdome_di_saveDocToMemoryEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentType(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentType) {
			return arg1;
		} else if(arg1.toGdomeDocumentType !== undefined) {
			return arg1.toGdomeDocumentType();
		} else {
			throw "Could not convert object to GdomeDocumentType!";
		}
	}
}

/** GdomeDocumentType name method
 * C header: GdomeDOMString* gdome_dt_name(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.name";
	var ret = CGDOME.call.gdome_dt_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType entities method
 * C header: GdomeNamedNodeMap* gdome_dt_entities(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.entities = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.entities";
	var ret = CGDOME.call.gdome_dt_entities(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType notations method
 * C header: GdomeNamedNodeMap* gdome_dt_notations(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.notations = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.notations";
	var ret = CGDOME.call.gdome_dt_notations(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType publicId method
 * C header: GdomeDOMString* gdome_dt_publicId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.publicId";
	var ret = CGDOME.call.gdome_dt_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType systemId method
 * C header: GdomeDOMString* gdome_dt_systemId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.systemId";
	var ret = CGDOME.call.gdome_dt_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType internalSubset method
 * C header: GdomeDOMString* gdome_dt_internalSubset(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.internalSubset = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.internalSubset";
	var ret = CGDOME.call.gdome_dt_internalSubset(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType ref method
 * C header: void gdome_dt_ref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ref";
	CGDOME.call.gdome_dt_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType unref method
 * C header: void gdome_dt_unref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.unref";
	CGDOME.call.gdome_dt_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType query_interface method
 * C header: gpointer gdome_dt_query_interface(GdomeDocumentType*, const char*, GdomeException*)
 */
GdomeDocumentType.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.query_interface";
	var ret = CGDOME.call.gdome_dt_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType nodeName method
 * C header: GdomeDOMString* gdome_dt_nodeName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeName";
	var ret = CGDOME.call.gdome_dt_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType nodeValue method
 * C header: GdomeDOMString* gdome_dt_nodeValue(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeValue";
	var ret = CGDOME.call.gdome_dt_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_nodeValue method
 * C header: void gdome_dt_set_nodeValue(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue";
	CGDOME.call.gdome_dt_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType nodeType method
 * C header: unsigned short gdome_dt_nodeType(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeType";
	var ret = CGDOME.call.gdome_dt_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType parentNode method
 * C header: GdomeNode* gdome_dt_parentNode(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.parentNode";
	var ret = CGDOME.call.gdome_dt_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType childNodes method
 * C header: GdomeNodeList* gdome_dt_childNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.childNodes";
	var ret = CGDOME.call.gdome_dt_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentType firstChild method
 * C header: GdomeNode* gdome_dt_firstChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.firstChild";
	var ret = CGDOME.call.gdome_dt_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType lastChild method
 * C header: GdomeNode* gdome_dt_lastChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.lastChild";
	var ret = CGDOME.call.gdome_dt_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType previousSibling method
 * C header: GdomeNode* gdome_dt_previousSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.previousSibling";
	var ret = CGDOME.call.gdome_dt_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType nextSibling method
 * C header: GdomeNode* gdome_dt_nextSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nextSibling";
	var ret = CGDOME.call.gdome_dt_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType attributes method
 * C header: GdomeNamedNodeMap* gdome_dt_attributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.attributes";
	var ret = CGDOME.call.gdome_dt_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType ownerDocument method
 * C header: GdomeDocument* gdome_dt_ownerDocument(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_dt_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentType insertBefore method
 * C header: GdomeNode* gdome_dt_insertBefore(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore";
	var ret = CGDOME.call.gdome_dt_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType replaceChild method
 * C header: GdomeNode* gdome_dt_replaceChild(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild";
	var ret = CGDOME.call.gdome_dt_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType removeChild method
 * C header: GdomeNode* gdome_dt_removeChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild";
	var ret = CGDOME.call.gdome_dt_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType appendChild method
 * C header: GdomeNode* gdome_dt_appendChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild";
	var ret = CGDOME.call.gdome_dt_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType hasChildNodes method
 * C header: GdomeBoolean gdome_dt_hasChildNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_dt_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType cloneNode method
 * C header: GdomeNode* gdome_dt_cloneNode(GdomeDocumentType*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.cloneNode";
	var ret = CGDOME.call.gdome_dt_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType normalize method
 * C header: void gdome_dt_normalize(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.normalize";
	CGDOME.call.gdome_dt_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType isSupported method
 * C header: GdomeBoolean gdome_dt_isSupported(GdomeDocumentType*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported";
	var ret = CGDOME.call.gdome_dt_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType namespaceURI method
 * C header: GdomeDOMString* gdome_dt_namespaceURI(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_dt_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType prefix method
 * C header: GdomeDOMString* gdome_dt_prefix(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.prefix";
	var ret = CGDOME.call.gdome_dt_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_prefix method
 * C header: void gdome_dt_set_prefix(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix";
	CGDOME.call.gdome_dt_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType localName method
 * C header: GdomeDOMString* gdome_dt_localName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.localName";
	var ret = CGDOME.call.gdome_dt_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType hasAttributes method
 * C header: GdomeBoolean gdome_dt_hasAttributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_dt_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType addEventListener method
 * C header: void gdome_dt_addEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener";
	CGDOME.call.gdome_dt_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType removeEventListener method
 * C header: void gdome_dt_removeEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener";
	CGDOME.call.gdome_dt_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType dispatchEvent method
 * C header: GdomeBoolean gdome_dt_dispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_dt_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType subTreeDispatchEvent method
 * C header: void gdome_dt_subTreeDispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_dt_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType canAppend method
 * C header: GdomeBoolean gdome_dt_canAppend(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend";
	var ret = CGDOME.call.gdome_dt_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentFragment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentFragment) {
			return arg1;
		} else if(arg1.toGdomeDocumentFragment !== undefined) {
			return arg1.toGdomeDocumentFragment();
		} else {
			throw "Could not convert object to GdomeDocumentFragment!";
		}
	}
}

/** GdomeDocumentFragment ref method
 * C header: void gdome_df_ref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ref";
	CGDOME.call.gdome_df_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment unref method
 * C header: void gdome_df_unref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.unref";
	CGDOME.call.gdome_df_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment query_interface method
 * C header: gpointer gdome_df_query_interface(GdomeDocumentFragment*, const char*, GdomeException*)
 */
GdomeDocumentFragment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.query_interface";
	var ret = CGDOME.call.gdome_df_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment nodeName method
 * C header: GdomeDOMString* gdome_df_nodeName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeName";
	var ret = CGDOME.call.gdome_df_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment nodeValue method
 * C header: GdomeDOMString* gdome_df_nodeValue(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_df_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_nodeValue method
 * C header: void gdome_df_set_nodeValue(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue";
	CGDOME.call.gdome_df_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment nodeType method
 * C header: unsigned short gdome_df_nodeType(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeType";
	var ret = CGDOME.call.gdome_df_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment parentNode method
 * C header: GdomeNode* gdome_df_parentNode(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.parentNode";
	var ret = CGDOME.call.gdome_df_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment childNodes method
 * C header: GdomeNodeList* gdome_df_childNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.childNodes";
	var ret = CGDOME.call.gdome_df_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentFragment firstChild method
 * C header: GdomeNode* gdome_df_firstChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.firstChild";
	var ret = CGDOME.call.gdome_df_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment lastChild method
 * C header: GdomeNode* gdome_df_lastChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.lastChild";
	var ret = CGDOME.call.gdome_df_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment previousSibling method
 * C header: GdomeNode* gdome_df_previousSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_df_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment nextSibling method
 * C header: GdomeNode* gdome_df_nextSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_df_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment attributes method
 * C header: GdomeNamedNodeMap* gdome_df_attributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.attributes";
	var ret = CGDOME.call.gdome_df_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentFragment ownerDocument method
 * C header: GdomeDocument* gdome_df_ownerDocument(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_df_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentFragment insertBefore method
 * C header: GdomeNode* gdome_df_insertBefore(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_df_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment replaceChild method
 * C header: GdomeNode* gdome_df_replaceChild(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_df_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment removeChild method
 * C header: GdomeNode* gdome_df_removeChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild";
	var ret = CGDOME.call.gdome_df_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment appendChild method
 * C header: GdomeNode* gdome_df_appendChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild";
	var ret = CGDOME.call.gdome_df_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment hasChildNodes method
 * C header: GdomeBoolean gdome_df_hasChildNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_df_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment cloneNode method
 * C header: GdomeNode* gdome_df_cloneNode(GdomeDocumentFragment*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_df_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment normalize method
 * C header: void gdome_df_normalize(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.normalize";
	CGDOME.call.gdome_df_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment isSupported method
 * C header: GdomeBoolean gdome_df_isSupported(GdomeDocumentFragment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported";
	var ret = CGDOME.call.gdome_df_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment namespaceURI method
 * C header: GdomeDOMString* gdome_df_namespaceURI(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_df_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment prefix method
 * C header: GdomeDOMString* gdome_df_prefix(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.prefix";
	var ret = CGDOME.call.gdome_df_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_prefix method
 * C header: void gdome_df_set_prefix(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix";
	CGDOME.call.gdome_df_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment localName method
 * C header: GdomeDOMString* gdome_df_localName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.localName";
	var ret = CGDOME.call.gdome_df_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment hasAttributes method
 * C header: GdomeBoolean gdome_df_hasAttributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_df_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment addEventListener method
 * C header: void gdome_df_addEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener";
	CGDOME.call.gdome_df_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment removeEventListener method
 * C header: void gdome_df_removeEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener";
	CGDOME.call.gdome_df_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment dispatchEvent method
 * C header: GdomeBoolean gdome_df_dispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_df_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment subTreeDispatchEvent method
 * C header: void gdome_df_subTreeDispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_df_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment canAppend method
 * C header: GdomeBoolean gdome_df_canAppend(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend";
	var ret = CGDOME.call.gdome_df_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocument(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocument) {
			return arg1;
		} else if(arg1.toGdomeDocument !== undefined) {
			return arg1.toGdomeDocument();
		} else {
			throw "Could not convert object to GdomeDocument!";
		}
	}
}

/** GdomeDocument doctype method
 * C header: GdomeDocumentType* gdome_doc_doctype(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.doctype = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.doctype";
	var ret = CGDOME.call.gdome_doc_doctype(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDocument implementation method
 * C header: GdomeDOMImplementation* gdome_doc_implementation(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.implementation = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.implementation";
	var ret = CGDOME.call.gdome_doc_implementation(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMImplementation(ret, this.di); }
}

/** GdomeDocument documentElement method
 * C header: GdomeElement* gdome_doc_documentElement(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.documentElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.documentElement";
	var ret = CGDOME.call.gdome_doc_documentElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createElement method
 * C header: GdomeElement* gdome_doc_createElement(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElement = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElement: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElement";
	var ret = CGDOME.call.gdome_doc_createElement(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createDocumentFragment method
 * C header: GdomeDocumentFragment* gdome_doc_createDocumentFragment(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.createDocumentFragment = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.createDocumentFragment";
	var ret = CGDOME.call.gdome_doc_createDocumentFragment(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentFragment(ret, this.di); }
}

/** GdomeDocument createTextNode method
 * C header: GdomeText* gdome_doc_createTextNode(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createTextNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createTextNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createTextNode";
	var ret = CGDOME.call.gdome_doc_createTextNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeDocument createComment method
 * C header: GdomeComment* gdome_doc_createComment(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createComment = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createComment: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createComment";
	var ret = CGDOME.call.gdome_doc_createComment(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeComment(ret, this.di); }
}

/** GdomeDocument createCDATASection method
 * C header: GdomeCDATASection* gdome_doc_createCDATASection(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createCDATASection = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection";
	var ret = CGDOME.call.gdome_doc_createCDATASection(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeCDATASection(ret, this.di); }
}

/** GdomeDocument createProcessingInstruction method
 * C header: GdomeProcessingInstruction* gdome_doc_createProcessingInstruction(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createProcessingInstruction = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction";
	var ret = CGDOME.call.gdome_doc_createProcessingInstruction(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeProcessingInstruction(ret, this.di); }
}

/** GdomeDocument createAttribute method
 * C header: GdomeAttr* gdome_doc_createAttribute(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttribute";
	var ret = CGDOME.call.gdome_doc_createAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument createEntityReference method
 * C header: GdomeEntityReference* gdome_doc_createEntityReference(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEntityReference = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference";
	var ret = CGDOME.call.gdome_doc_createEntityReference(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEntityReference(ret, this.di); }
}

/** GdomeDocument getElementsByTagName method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagName(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_doc_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument importNode method
 * C header: GdomeNode* gdome_doc_importNode(GdomeDocument*, GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.importNode = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.importNode: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.importNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.importNode";
	var ret = CGDOME.call.gdome_doc_importNode(this.pointer, arg0.pointer, (arg1?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument createElementNS method
 * C header: GdomeElement* gdome_doc_createElementNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElementNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElementNS";
	var ret = CGDOME.call.gdome_doc_createElementNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createAttributeNS method
 * C header: GdomeAttr* gdome_doc_createAttributeNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS";
	var ret = CGDOME.call.gdome_doc_createAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagNameNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_doc_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument getElementById method
 * C header: GdomeElement* gdome_doc_getElementById(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementById = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementById: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementById";
	var ret = CGDOME.call.gdome_doc_getElementById(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createEvent method
 * C header: GdomeEvent* gdome_doc_createEvent(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEvent: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEvent";
	var ret = CGDOME.call.gdome_doc_createEvent(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEvent(ret, this.di); }
}

/** GdomeDocument ref method
 * C header: void gdome_doc_ref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ref";
	CGDOME.call.gdome_doc_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument unref method
 * C header: void gdome_doc_unref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.unref";
	CGDOME.call.gdome_doc_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument query_interface method
 * C header: gpointer gdome_doc_query_interface(GdomeDocument*, const char*, GdomeException*)
 */
GdomeDocument.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.query_interface";
	var ret = CGDOME.call.gdome_doc_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument nodeName method
 * C header: GdomeDOMString* gdome_doc_nodeName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeName";
	var ret = CGDOME.call.gdome_doc_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument nodeValue method
 * C header: GdomeDOMString* gdome_doc_nodeValue(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeValue";
	var ret = CGDOME.call.gdome_doc_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_nodeValue method
 * C header: void gdome_doc_set_nodeValue(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue";
	CGDOME.call.gdome_doc_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument nodeType method
 * C header: unsigned short gdome_doc_nodeType(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeType";
	var ret = CGDOME.call.gdome_doc_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument parentNode method
 * C header: GdomeNode* gdome_doc_parentNode(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.parentNode";
	var ret = CGDOME.call.gdome_doc_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument childNodes method
 * C header: GdomeNodeList* gdome_doc_childNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.childNodes";
	var ret = CGDOME.call.gdome_doc_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument firstChild method
 * C header: GdomeNode* gdome_doc_firstChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.firstChild";
	var ret = CGDOME.call.gdome_doc_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument lastChild method
 * C header: GdomeNode* gdome_doc_lastChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.lastChild";
	var ret = CGDOME.call.gdome_doc_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument previousSibling method
 * C header: GdomeNode* gdome_doc_previousSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.previousSibling";
	var ret = CGDOME.call.gdome_doc_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument nextSibling method
 * C header: GdomeNode* gdome_doc_nextSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nextSibling";
	var ret = CGDOME.call.gdome_doc_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument attributes method
 * C header: GdomeNamedNodeMap* gdome_doc_attributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.attributes";
	var ret = CGDOME.call.gdome_doc_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocument ownerDocument method
 * C header: GdomeDocument* gdome_doc_ownerDocument(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_doc_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocument insertBefore method
 * C header: GdomeNode* gdome_doc_insertBefore(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore";
	var ret = CGDOME.call.gdome_doc_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument replaceChild method
 * C header: GdomeNode* gdome_doc_replaceChild(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild";
	var ret = CGDOME.call.gdome_doc_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument removeChild method
 * C header: GdomeNode* gdome_doc_removeChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild";
	var ret = CGDOME.call.gdome_doc_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument appendChild method
 * C header: GdomeNode* gdome_doc_appendChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild";
	var ret = CGDOME.call.gdome_doc_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument hasChildNodes method
 * C header: GdomeBoolean gdome_doc_hasChildNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_doc_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument cloneNode method
 * C header: GdomeNode* gdome_doc_cloneNode(GdomeDocument*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.cloneNode";
	var ret = CGDOME.call.gdome_doc_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument normalize method
 * C header: void gdome_doc_normalize(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.normalize";
	CGDOME.call.gdome_doc_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument isSupported method
 * C header: GdomeBoolean gdome_doc_isSupported(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.isSupported";
	var ret = CGDOME.call.gdome_doc_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument namespaceURI method
 * C header: GdomeDOMString* gdome_doc_namespaceURI(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_doc_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument prefix method
 * C header: GdomeDOMString* gdome_doc_prefix(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.prefix";
	var ret = CGDOME.call.gdome_doc_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_prefix method
 * C header: void gdome_doc_set_prefix(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_prefix";
	CGDOME.call.gdome_doc_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument localName method
 * C header: GdomeDOMString* gdome_doc_localName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.localName";
	var ret = CGDOME.call.gdome_doc_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument hasAttributes method
 * C header: GdomeBoolean gdome_doc_hasAttributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_doc_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument addEventListener method
 * C header: void gdome_doc_addEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener";
	CGDOME.call.gdome_doc_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument removeEventListener method
 * C header: void gdome_doc_removeEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener";
	CGDOME.call.gdome_doc_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument dispatchEvent method
 * C header: GdomeBoolean gdome_doc_dispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_doc_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument subTreeDispatchEvent method
 * C header: void gdome_doc_subTreeDispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_doc_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument canAppend method
 * C header: GdomeBoolean gdome_doc_canAppend(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend";
	var ret = CGDOME.call.gdome_doc_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toGdomeNode !== undefined) {
			return arg1.toGdomeNode();
		} else {
			throw "Could not convert object to GdomeNode!";
		}
	}
}

/** GdomeNode ref method
 * C header: void gdome_n_ref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ref";
	CGDOME.call.gdome_n_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode unref method
 * C header: void gdome_n_unref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.unref";
	CGDOME.call.gdome_n_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode query_interface method
 * C header: gpointer gdome_n_query_interface(GdomeNode*, const char*, GdomeException*)
 */
GdomeNode.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.query_interface";
	var ret = CGDOME.call.gdome_n_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode nodeName method
 * C header: GdomeDOMString* gdome_n_nodeName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeName";
	var ret = CGDOME.call.gdome_n_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode nodeValue method
 * C header: GdomeDOMString* gdome_n_nodeValue(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeValue";
	var ret = CGDOME.call.gdome_n_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_nodeValue method
 * C header: void gdome_n_set_nodeValue(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue";
	CGDOME.call.gdome_n_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode nodeType method
 * C header: unsigned short gdome_n_nodeType(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeType";
	var ret = CGDOME.call.gdome_n_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode parentNode method
 * C header: GdomeNode* gdome_n_parentNode(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.parentNode";
	var ret = CGDOME.call.gdome_n_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode childNodes method
 * C header: GdomeNodeList* gdome_n_childNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.childNodes";
	var ret = CGDOME.call.gdome_n_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNode firstChild method
 * C header: GdomeNode* gdome_n_firstChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.firstChild";
	var ret = CGDOME.call.gdome_n_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode lastChild method
 * C header: GdomeNode* gdome_n_lastChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.lastChild";
	var ret = CGDOME.call.gdome_n_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode previousSibling method
 * C header: GdomeNode* gdome_n_previousSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.previousSibling";
	var ret = CGDOME.call.gdome_n_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode nextSibling method
 * C header: GdomeNode* gdome_n_nextSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nextSibling";
	var ret = CGDOME.call.gdome_n_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode attributes method
 * C header: GdomeNamedNodeMap* gdome_n_attributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.attributes";
	var ret = CGDOME.call.gdome_n_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNode ownerDocument method
 * C header: GdomeDocument* gdome_n_ownerDocument(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_n_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNode insertBefore method
 * C header: GdomeNode* gdome_n_insertBefore(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore";
	var ret = CGDOME.call.gdome_n_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode replaceChild method
 * C header: GdomeNode* gdome_n_replaceChild(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild";
	var ret = CGDOME.call.gdome_n_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode removeChild method
 * C header: GdomeNode* gdome_n_removeChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeChild";
	var ret = CGDOME.call.gdome_n_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode appendChild method
 * C header: GdomeNode* gdome_n_appendChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.appendChild";
	var ret = CGDOME.call.gdome_n_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode hasChildNodes method
 * C header: GdomeBoolean gdome_n_hasChildNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_n_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode cloneNode method
 * C header: GdomeNode* gdome_n_cloneNode(GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.cloneNode";
	var ret = CGDOME.call.gdome_n_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode normalize method
 * C header: void gdome_n_normalize(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.normalize";
	CGDOME.call.gdome_n_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode isSupported method
 * C header: GdomeBoolean gdome_n_isSupported(GdomeNode*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.isSupported";
	var ret = CGDOME.call.gdome_n_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode namespaceURI method
 * C header: GdomeDOMString* gdome_n_namespaceURI(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_n_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode prefix method
 * C header: GdomeDOMString* gdome_n_prefix(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.prefix";
	var ret = CGDOME.call.gdome_n_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_prefix method
 * C header: void gdome_n_set_prefix(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_prefix";
	CGDOME.call.gdome_n_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode localName method
 * C header: GdomeDOMString* gdome_n_localName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.localName";
	var ret = CGDOME.call.gdome_n_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode hasAttributes method
 * C header: GdomeBoolean gdome_n_hasAttributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_n_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode addEventListener method
 * C header: void gdome_n_addEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener";
	CGDOME.call.gdome_n_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode removeEventListener method
 * C header: void gdome_n_removeEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener";
	CGDOME.call.gdome_n_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode dispatchEvent method
 * C header: GdomeBoolean gdome_n_dispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_n_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode subTreeDispatchEvent method
 * C header: void gdome_n_subTreeDispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_n_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode canAppend method
 * C header: GdomeBoolean gdome_n_canAppend(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.canAppend";
	var ret = CGDOME.call.gdome_n_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNodeList(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNodeList) {
			return arg1;
		} else if(arg1.toGdomeNodeList !== undefined) {
			return arg1.toGdomeNodeList();
		} else {
			throw "Could not convert object to GdomeNodeList!";
		}
	}
}

/** GdomeNodeList ref method
 * C header: void gdome_nl_ref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.ref";
	CGDOME.call.gdome_nl_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList unref method
 * C header: void gdome_nl_unref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.unref";
	CGDOME.call.gdome_nl_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList query_interface method
 * C header: gpointer gdome_nl_query_interface(GdomeNodeList*, const char*, GdomeException*)
 */
GdomeNodeList.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.query_interface";
	var ret = CGDOME.call.gdome_nl_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNodeList item method
 * C header: GdomeNode* gdome_nl_item(GdomeNodeList*, gulong, GdomeException*)
 */
GdomeNodeList.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.item";
	var ret = CGDOME.call.gdome_nl_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNodeList length method
 * C header: gulong gdome_nl_length(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.length";
	var ret = CGDOME.call.gdome_nl_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNamedNodeMap(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNamedNodeMap) {
			return arg1;
		} else if(arg1.toGdomeNamedNodeMap !== undefined) {
			return arg1.toGdomeNamedNodeMap();
		} else {
			throw "Could not convert object to GdomeNamedNodeMap!";
		}
	}
}

/** GdomeNamedNodeMap ref method
 * C header: void gdome_nnm_ref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.ref";
	CGDOME.call.gdome_nnm_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap unref method
 * C header: void gdome_nnm_unref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.unref";
	CGDOME.call.gdome_nnm_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap query_interface method
 * C header: gpointer gdome_nnm_query_interface(GdomeNamedNodeMap*, const char*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.query_interface";
	var ret = CGDOME.call.gdome_nnm_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItem method
 * C header: GdomeNode* gdome_nnm_getNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem";
	var ret = CGDOME.call.gdome_nnm_getNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItem method
 * C header: GdomeNode* gdome_nnm_setNamedItem(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem";
	var ret = CGDOME.call.gdome_nnm_setNamedItem(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItem method
 * C header: GdomeNode* gdome_nnm_removeNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem";
	var ret = CGDOME.call.gdome_nnm_removeNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap item method
 * C header: GdomeNode* gdome_nnm_item(GdomeNamedNodeMap*, gulong, GdomeException*)
 */
GdomeNamedNodeMap.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.item";
	var ret = CGDOME.call.gdome_nnm_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap length method
 * C header: gulong gdome_nnm_length(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.length";
	var ret = CGDOME.call.gdome_nnm_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItemNS method
 * C header: GdomeNode* gdome_nnm_getNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_getNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItemNS method
 * C header: GdomeNode* gdome_nnm_setNamedItemNS(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItemNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_setNamedItemNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItemNS method
 * C header: GdomeNode* gdome_nnm_removeNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_removeNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCharacterData(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCharacterData) {
			return arg1;
		} else if(arg1.toGdomeCharacterData !== undefined) {
			return arg1.toGdomeCharacterData();
		} else {
			throw "Could not convert object to GdomeCharacterData!";
		}
	}
}

/** GdomeCharacterData data method
 * C header: GdomeDOMString* gdome_cd_data(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.data";
	var ret = CGDOME.call.gdome_cd_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_data method
 * C header: void gdome_cd_set_data(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_data";
	CGDOME.call.gdome_cd_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData length method
 * C header: gulong gdome_cd_length(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.length";
	var ret = CGDOME.call.gdome_cd_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData substringData method
 * C header: GdomeDOMString* gdome_cd_substringData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.substringData";
	var ret = CGDOME.call.gdome_cd_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData appendData method
 * C header: void gdome_cd_appendData(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendData";
	CGDOME.call.gdome_cd_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData insertData method
 * C header: void gdome_cd_insertData(GdomeCharacterData*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertData";
	CGDOME.call.gdome_cd_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData deleteData method
 * C header: void gdome_cd_deleteData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.deleteData";
	CGDOME.call.gdome_cd_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData replaceData method
 * C header: void gdome_cd_replaceData(GdomeCharacterData*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData";
	CGDOME.call.gdome_cd_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData ref method
 * C header: void gdome_cd_ref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ref";
	CGDOME.call.gdome_cd_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData unref method
 * C header: void gdome_cd_unref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.unref";
	CGDOME.call.gdome_cd_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData query_interface method
 * C header: gpointer gdome_cd_query_interface(GdomeCharacterData*, const char*, GdomeException*)
 */
GdomeCharacterData.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.query_interface";
	var ret = CGDOME.call.gdome_cd_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData nodeName method
 * C header: GdomeDOMString* gdome_cd_nodeName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeName";
	var ret = CGDOME.call.gdome_cd_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData nodeValue method
 * C header: GdomeDOMString* gdome_cd_nodeValue(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cd_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_nodeValue method
 * C header: void gdome_cd_set_nodeValue(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue";
	CGDOME.call.gdome_cd_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData nodeType method
 * C header: unsigned short gdome_cd_nodeType(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeType";
	var ret = CGDOME.call.gdome_cd_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData parentNode method
 * C header: GdomeNode* gdome_cd_parentNode(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.parentNode";
	var ret = CGDOME.call.gdome_cd_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData childNodes method
 * C header: GdomeNodeList* gdome_cd_childNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.childNodes";
	var ret = CGDOME.call.gdome_cd_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCharacterData firstChild method
 * C header: GdomeNode* gdome_cd_firstChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.firstChild";
	var ret = CGDOME.call.gdome_cd_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData lastChild method
 * C header: GdomeNode* gdome_cd_lastChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.lastChild";
	var ret = CGDOME.call.gdome_cd_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData previousSibling method
 * C header: GdomeNode* gdome_cd_previousSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cd_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData nextSibling method
 * C header: GdomeNode* gdome_cd_nextSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cd_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData attributes method
 * C header: GdomeNamedNodeMap* gdome_cd_attributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.attributes";
	var ret = CGDOME.call.gdome_cd_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCharacterData ownerDocument method
 * C header: GdomeDocument* gdome_cd_ownerDocument(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cd_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCharacterData insertBefore method
 * C header: GdomeNode* gdome_cd_insertBefore(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cd_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData replaceChild method
 * C header: GdomeNode* gdome_cd_replaceChild(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cd_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData removeChild method
 * C header: GdomeNode* gdome_cd_removeChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild";
	var ret = CGDOME.call.gdome_cd_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData appendChild method
 * C header: GdomeNode* gdome_cd_appendChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild";
	var ret = CGDOME.call.gdome_cd_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData hasChildNodes method
 * C header: GdomeBoolean gdome_cd_hasChildNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cd_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData cloneNode method
 * C header: GdomeNode* gdome_cd_cloneNode(GdomeCharacterData*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cd_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData normalize method
 * C header: void gdome_cd_normalize(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.normalize";
	CGDOME.call.gdome_cd_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData isSupported method
 * C header: GdomeBoolean gdome_cd_isSupported(GdomeCharacterData*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported";
	var ret = CGDOME.call.gdome_cd_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData namespaceURI method
 * C header: GdomeDOMString* gdome_cd_namespaceURI(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cd_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData prefix method
 * C header: GdomeDOMString* gdome_cd_prefix(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.prefix";
	var ret = CGDOME.call.gdome_cd_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_prefix method
 * C header: void gdome_cd_set_prefix(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix";
	CGDOME.call.gdome_cd_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData localName method
 * C header: GdomeDOMString* gdome_cd_localName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.localName";
	var ret = CGDOME.call.gdome_cd_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData hasAttributes method
 * C header: GdomeBoolean gdome_cd_hasAttributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cd_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData addEventListener method
 * C header: void gdome_cd_addEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener";
	CGDOME.call.gdome_cd_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData removeEventListener method
 * C header: void gdome_cd_removeEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener";
	CGDOME.call.gdome_cd_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData dispatchEvent method
 * C header: GdomeBoolean gdome_cd_dispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cd_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData subTreeDispatchEvent method
 * C header: void gdome_cd_subTreeDispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cd_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData canAppend method
 * C header: GdomeBoolean gdome_cd_canAppend(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend";
	var ret = CGDOME.call.gdome_cd_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeAttr(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeAttr) {
			return arg1;
		} else if(arg1.toGdomeAttr !== undefined) {
			return arg1.toGdomeAttr();
		} else {
			throw "Could not convert object to GdomeAttr!";
		}
	}
}

/** GdomeAttr ref method
 * C header: void gdome_a_ref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ref";
	CGDOME.call.gdome_a_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr unref method
 * C header: void gdome_a_unref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.unref";
	CGDOME.call.gdome_a_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr query_interface method
 * C header: gpointer gdome_a_query_interface(GdomeAttr*, const char*, GdomeException*)
 */
GdomeAttr.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.query_interface";
	var ret = CGDOME.call.gdome_a_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr name method
 * C header: GdomeDOMString* gdome_a_name(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.name";
	var ret = CGDOME.call.gdome_a_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr ownerElement method
 * C header: GdomeElement* gdome_a_ownerElement(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerElement";
	var ret = CGDOME.call.gdome_a_ownerElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeAttr specified method
 * C header: GdomeBoolean gdome_a_specified(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.specified = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.specified";
	var ret = CGDOME.call.gdome_a_specified(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr value method
 * C header: GdomeDOMString* gdome_a_value(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.value = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.value";
	var ret = CGDOME.call.gdome_a_value(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_value method
 * C header: void gdome_a_set_value(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_value = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_value: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_value";
	CGDOME.call.gdome_a_set_value(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeName method
 * C header: GdomeDOMString* gdome_a_nodeName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeName";
	var ret = CGDOME.call.gdome_a_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr nodeValue method
 * C header: GdomeDOMString* gdome_a_nodeValue(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeValue";
	var ret = CGDOME.call.gdome_a_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_nodeValue method
 * C header: void gdome_a_set_nodeValue(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue";
	CGDOME.call.gdome_a_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeType method
 * C header: unsigned short gdome_a_nodeType(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeType";
	var ret = CGDOME.call.gdome_a_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr parentNode method
 * C header: GdomeNode* gdome_a_parentNode(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.parentNode";
	var ret = CGDOME.call.gdome_a_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr childNodes method
 * C header: GdomeNodeList* gdome_a_childNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.childNodes";
	var ret = CGDOME.call.gdome_a_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeAttr firstChild method
 * C header: GdomeNode* gdome_a_firstChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.firstChild";
	var ret = CGDOME.call.gdome_a_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr lastChild method
 * C header: GdomeNode* gdome_a_lastChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.lastChild";
	var ret = CGDOME.call.gdome_a_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr previousSibling method
 * C header: GdomeNode* gdome_a_previousSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.previousSibling";
	var ret = CGDOME.call.gdome_a_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr nextSibling method
 * C header: GdomeNode* gdome_a_nextSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nextSibling";
	var ret = CGDOME.call.gdome_a_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr attributes method
 * C header: GdomeNamedNodeMap* gdome_a_attributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.attributes";
	var ret = CGDOME.call.gdome_a_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeAttr ownerDocument method
 * C header: GdomeDocument* gdome_a_ownerDocument(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_a_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeAttr insertBefore method
 * C header: GdomeNode* gdome_a_insertBefore(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore";
	var ret = CGDOME.call.gdome_a_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr replaceChild method
 * C header: GdomeNode* gdome_a_replaceChild(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild";
	var ret = CGDOME.call.gdome_a_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr removeChild method
 * C header: GdomeNode* gdome_a_removeChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild";
	var ret = CGDOME.call.gdome_a_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr appendChild method
 * C header: GdomeNode* gdome_a_appendChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild";
	var ret = CGDOME.call.gdome_a_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr hasChildNodes method
 * C header: GdomeBoolean gdome_a_hasChildNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_a_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr cloneNode method
 * C header: GdomeNode* gdome_a_cloneNode(GdomeAttr*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.cloneNode";
	var ret = CGDOME.call.gdome_a_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr normalize method
 * C header: void gdome_a_normalize(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.normalize";
	CGDOME.call.gdome_a_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr isSupported method
 * C header: GdomeBoolean gdome_a_isSupported(GdomeAttr*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.isSupported";
	var ret = CGDOME.call.gdome_a_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr namespaceURI method
 * C header: GdomeDOMString* gdome_a_namespaceURI(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_a_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr prefix method
 * C header: GdomeDOMString* gdome_a_prefix(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.prefix";
	var ret = CGDOME.call.gdome_a_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_prefix method
 * C header: void gdome_a_set_prefix(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_prefix";
	CGDOME.call.gdome_a_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr localName method
 * C header: GdomeDOMString* gdome_a_localName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.localName";
	var ret = CGDOME.call.gdome_a_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr hasAttributes method
 * C header: GdomeBoolean gdome_a_hasAttributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_a_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr addEventListener method
 * C header: void gdome_a_addEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener";
	CGDOME.call.gdome_a_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr removeEventListener method
 * C header: void gdome_a_removeEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener";
	CGDOME.call.gdome_a_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr dispatchEvent method
 * C header: GdomeBoolean gdome_a_dispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_a_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr subTreeDispatchEvent method
 * C header: void gdome_a_subTreeDispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_a_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr canAppend method
 * C header: GdomeBoolean gdome_a_canAppend(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend";
	var ret = CGDOME.call.gdome_a_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeElement(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeElement) {
			return arg1;
		} else if(arg1.toGdomeElement !== undefined) {
			return arg1.toGdomeElement();
		} else {
			throw "Could not convert object to GdomeElement!";
		}
	}
}

/** GdomeElement tagName method
 * C header: GdomeDOMString* gdome_el_tagName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.tagName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.tagName";
	var ret = CGDOME.call.gdome_el_tagName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement getAttribute method
 * C header: GdomeDOMString* gdome_el_getAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttribute";
	var ret = CGDOME.call.gdome_el_getAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttribute method
 * C header: void gdome_el_setAttribute(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttribute = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttribute";
	CGDOME.call.gdome_el_setAttribute(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttribute method
 * C header: void gdome_el_removeAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttribute";
	CGDOME.call.gdome_el_removeAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNode method
 * C header: GdomeAttr* gdome_el_getAttributeNode(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode";
	var ret = CGDOME.call.gdome_el_getAttributeNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNode method
 * C header: GdomeAttr* gdome_el_setAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode";
	var ret = CGDOME.call.gdome_el_setAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement removeAttributeNode method
 * C header: GdomeAttr* gdome_el_removeAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode";
	var ret = CGDOME.call.gdome_el_removeAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagName method
 * C header: GdomeNodeList* gdome_el_getElementsByTagName(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_el_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement getAttributeNS method
 * C header: GdomeDOMString* gdome_el_getAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttributeNS method
 * C header: void gdome_el_setAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNS = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS";
	CGDOME.call.gdome_el_setAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttributeNS method
 * C header: void gdome_el_removeAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS";
	CGDOME.call.gdome_el_removeAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_getAttributeNodeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNodeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNodeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_setAttributeNodeNS(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNodeNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_setAttributeNodeNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_el_getElementsByTagNameNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_el_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement hasAttribute method
 * C header: GdomeBoolean gdome_el_hasAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttribute";
	var ret = CGDOME.call.gdome_el_hasAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement hasAttributeNS method
 * C header: GdomeBoolean gdome_el_hasAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS";
	var ret = CGDOME.call.gdome_el_hasAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement ref method
 * C header: void gdome_el_ref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ref";
	CGDOME.call.gdome_el_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement unref method
 * C header: void gdome_el_unref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.unref";
	CGDOME.call.gdome_el_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement query_interface method
 * C header: gpointer gdome_el_query_interface(GdomeElement*, const char*, GdomeException*)
 */
GdomeElement.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.query_interface";
	var ret = CGDOME.call.gdome_el_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement nodeName method
 * C header: GdomeDOMString* gdome_el_nodeName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeName";
	var ret = CGDOME.call.gdome_el_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement nodeValue method
 * C header: GdomeDOMString* gdome_el_nodeValue(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeValue";
	var ret = CGDOME.call.gdome_el_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_nodeValue method
 * C header: void gdome_el_set_nodeValue(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue";
	CGDOME.call.gdome_el_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement nodeType method
 * C header: unsigned short gdome_el_nodeType(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeType";
	var ret = CGDOME.call.gdome_el_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement parentNode method
 * C header: GdomeNode* gdome_el_parentNode(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.parentNode";
	var ret = CGDOME.call.gdome_el_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement childNodes method
 * C header: GdomeNodeList* gdome_el_childNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.childNodes";
	var ret = CGDOME.call.gdome_el_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement firstChild method
 * C header: GdomeNode* gdome_el_firstChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.firstChild";
	var ret = CGDOME.call.gdome_el_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement lastChild method
 * C header: GdomeNode* gdome_el_lastChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.lastChild";
	var ret = CGDOME.call.gdome_el_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement previousSibling method
 * C header: GdomeNode* gdome_el_previousSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.previousSibling";
	var ret = CGDOME.call.gdome_el_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement nextSibling method
 * C header: GdomeNode* gdome_el_nextSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nextSibling";
	var ret = CGDOME.call.gdome_el_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement attributes method
 * C header: GdomeNamedNodeMap* gdome_el_attributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.attributes";
	var ret = CGDOME.call.gdome_el_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeElement ownerDocument method
 * C header: GdomeDocument* gdome_el_ownerDocument(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_el_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeElement insertBefore method
 * C header: GdomeNode* gdome_el_insertBefore(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore";
	var ret = CGDOME.call.gdome_el_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement replaceChild method
 * C header: GdomeNode* gdome_el_replaceChild(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild";
	var ret = CGDOME.call.gdome_el_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement removeChild method
 * C header: GdomeNode* gdome_el_removeChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeChild";
	var ret = CGDOME.call.gdome_el_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement appendChild method
 * C header: GdomeNode* gdome_el_appendChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.appendChild";
	var ret = CGDOME.call.gdome_el_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement hasChildNodes method
 * C header: GdomeBoolean gdome_el_hasChildNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_el_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement cloneNode method
 * C header: GdomeNode* gdome_el_cloneNode(GdomeElement*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.cloneNode";
	var ret = CGDOME.call.gdome_el_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement normalize method
 * C header: void gdome_el_normalize(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.normalize";
	CGDOME.call.gdome_el_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement isSupported method
 * C header: GdomeBoolean gdome_el_isSupported(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.isSupported";
	var ret = CGDOME.call.gdome_el_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement namespaceURI method
 * C header: GdomeDOMString* gdome_el_namespaceURI(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_el_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement prefix method
 * C header: GdomeDOMString* gdome_el_prefix(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.prefix";
	var ret = CGDOME.call.gdome_el_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_prefix method
 * C header: void gdome_el_set_prefix(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_prefix";
	CGDOME.call.gdome_el_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement localName method
 * C header: GdomeDOMString* gdome_el_localName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.localName";
	var ret = CGDOME.call.gdome_el_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement hasAttributes method
 * C header: GdomeBoolean gdome_el_hasAttributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_el_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement addEventListener method
 * C header: void gdome_el_addEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener";
	CGDOME.call.gdome_el_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeEventListener method
 * C header: void gdome_el_removeEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener";
	CGDOME.call.gdome_el_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement dispatchEvent method
 * C header: GdomeBoolean gdome_el_dispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_el_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement subTreeDispatchEvent method
 * C header: void gdome_el_subTreeDispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_el_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement canAppend method
 * C header: GdomeBoolean gdome_el_canAppend(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.canAppend";
	var ret = CGDOME.call.gdome_el_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeText(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeText) {
			return arg1;
		} else if(arg1.toGdomeText !== undefined) {
			return arg1.toGdomeText();
		} else {
			throw "Could not convert object to GdomeText!";
		}
	}
}

/** GdomeText splitText method
 * C header: GdomeText* gdome_t_splitText(GdomeText*, gulong, GdomeException*)
 */
GdomeText.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.splitText";
	var ret = CGDOME.call.gdome_t_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeText data method
 * C header: GdomeDOMString* gdome_t_data(GdomeText*, GdomeException*)
 */
GdomeText.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.data";
	var ret = CGDOME.call.gdome_t_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_data method
 * C header: void gdome_t_set_data(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_data";
	CGDOME.call.gdome_t_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText length method
 * C header: gulong gdome_t_length(GdomeText*, GdomeException*)
 */
GdomeText.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.length";
	var ret = CGDOME.call.gdome_t_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText substringData method
 * C header: GdomeDOMString* gdome_t_substringData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.substringData";
	var ret = CGDOME.call.gdome_t_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText appendData method
 * C header: void gdome_t_appendData(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.appendData";
	CGDOME.call.gdome_t_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText insertData method
 * C header: void gdome_t_insertData(GdomeText*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.insertData";
	CGDOME.call.gdome_t_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText deleteData method
 * C header: void gdome_t_deleteData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.deleteData";
	CGDOME.call.gdome_t_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText replaceData method
 * C header: void gdome_t_replaceData(GdomeText*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceData";
	CGDOME.call.gdome_t_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText ref method
 * C header: void gdome_t_ref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ref";
	CGDOME.call.gdome_t_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText unref method
 * C header: void gdome_t_unref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.unref";
	CGDOME.call.gdome_t_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText query_interface method
 * C header: gpointer gdome_t_query_interface(GdomeText*, const char*, GdomeException*)
 */
GdomeText.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.query_interface";
	var ret = CGDOME.call.gdome_t_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText nodeName method
 * C header: GdomeDOMString* gdome_t_nodeName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeName";
	var ret = CGDOME.call.gdome_t_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText nodeValue method
 * C header: GdomeDOMString* gdome_t_nodeValue(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeValue";
	var ret = CGDOME.call.gdome_t_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_nodeValue method
 * C header: void gdome_t_set_nodeValue(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_nodeValue";
	CGDOME.call.gdome_t_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText nodeType method
 * C header: unsigned short gdome_t_nodeType(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeType";
	var ret = CGDOME.call.gdome_t_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText parentNode method
 * C header: GdomeNode* gdome_t_parentNode(GdomeText*, GdomeException*)
 */
GdomeText.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.parentNode";
	var ret = CGDOME.call.gdome_t_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText childNodes method
 * C header: GdomeNodeList* gdome_t_childNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.childNodes";
	var ret = CGDOME.call.gdome_t_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeText firstChild method
 * C header: GdomeNode* gdome_t_firstChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.firstChild";
	var ret = CGDOME.call.gdome_t_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText lastChild method
 * C header: GdomeNode* gdome_t_lastChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.lastChild";
	var ret = CGDOME.call.gdome_t_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText previousSibling method
 * C header: GdomeNode* gdome_t_previousSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.previousSibling";
	var ret = CGDOME.call.gdome_t_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText nextSibling method
 * C header: GdomeNode* gdome_t_nextSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nextSibling";
	var ret = CGDOME.call.gdome_t_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText attributes method
 * C header: GdomeNamedNodeMap* gdome_t_attributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.attributes";
	var ret = CGDOME.call.gdome_t_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeText ownerDocument method
 * C header: GdomeDocument* gdome_t_ownerDocument(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_t_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeText insertBefore method
 * C header: GdomeNode* gdome_t_insertBefore(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.insertBefore";
	var ret = CGDOME.call.gdome_t_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText replaceChild method
 * C header: GdomeNode* gdome_t_replaceChild(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.replaceChild";
	var ret = CGDOME.call.gdome_t_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText removeChild method
 * C header: GdomeNode* gdome_t_removeChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeChild";
	var ret = CGDOME.call.gdome_t_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText appendChild method
 * C header: GdomeNode* gdome_t_appendChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.appendChild";
	var ret = CGDOME.call.gdome_t_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText hasChildNodes method
 * C header: GdomeBoolean gdome_t_hasChildNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_t_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText cloneNode method
 * C header: GdomeNode* gdome_t_cloneNode(GdomeText*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.cloneNode";
	var ret = CGDOME.call.gdome_t_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText normalize method
 * C header: void gdome_t_normalize(GdomeText*, GdomeException*)
 */
GdomeText.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.normalize";
	CGDOME.call.gdome_t_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText isSupported method
 * C header: GdomeBoolean gdome_t_isSupported(GdomeText*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.isSupported";
	var ret = CGDOME.call.gdome_t_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText namespaceURI method
 * C header: GdomeDOMString* gdome_t_namespaceURI(GdomeText*, GdomeException*)
 */
GdomeText.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_t_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText prefix method
 * C header: GdomeDOMString* gdome_t_prefix(GdomeText*, GdomeException*)
 */
GdomeText.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.prefix";
	var ret = CGDOME.call.gdome_t_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_prefix method
 * C header: void gdome_t_set_prefix(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_prefix";
	CGDOME.call.gdome_t_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText localName method
 * C header: GdomeDOMString* gdome_t_localName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.localName";
	var ret = CGDOME.call.gdome_t_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText hasAttributes method
 * C header: GdomeBoolean gdome_t_hasAttributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_t_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText addEventListener method
 * C header: void gdome_t_addEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.addEventListener";
	CGDOME.call.gdome_t_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText removeEventListener method
 * C header: void gdome_t_removeEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener";
	CGDOME.call.gdome_t_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText dispatchEvent method
 * C header: GdomeBoolean gdome_t_dispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_t_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText subTreeDispatchEvent method
 * C header: void gdome_t_subTreeDispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_t_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText canAppend method
 * C header: GdomeBoolean gdome_t_canAppend(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.canAppend";
	var ret = CGDOME.call.gdome_t_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeComment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeComment) {
			return arg1;
		} else if(arg1.toGdomeComment !== undefined) {
			return arg1.toGdomeComment();
		} else {
			throw "Could not convert object to GdomeComment!";
		}
	}
}

/** GdomeComment data method
 * C header: GdomeDOMString* gdome_c_data(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.data";
	var ret = CGDOME.call.gdome_c_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_data method
 * C header: void gdome_c_set_data(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_data";
	CGDOME.call.gdome_c_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment length method
 * C header: gulong gdome_c_length(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.length";
	var ret = CGDOME.call.gdome_c_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment substringData method
 * C header: GdomeDOMString* gdome_c_substringData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.substringData";
	var ret = CGDOME.call.gdome_c_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment appendData method
 * C header: void gdome_c_appendData(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendData";
	CGDOME.call.gdome_c_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment insertData method
 * C header: void gdome_c_insertData(GdomeComment*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertData";
	CGDOME.call.gdome_c_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment deleteData method
 * C header: void gdome_c_deleteData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.deleteData";
	CGDOME.call.gdome_c_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment replaceData method
 * C header: void gdome_c_replaceData(GdomeComment*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceData";
	CGDOME.call.gdome_c_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment ref method
 * C header: void gdome_c_ref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ref";
	CGDOME.call.gdome_c_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment unref method
 * C header: void gdome_c_unref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.unref";
	CGDOME.call.gdome_c_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment query_interface method
 * C header: gpointer gdome_c_query_interface(GdomeComment*, const char*, GdomeException*)
 */
GdomeComment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.query_interface";
	var ret = CGDOME.call.gdome_c_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment nodeName method
 * C header: GdomeDOMString* gdome_c_nodeName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeName";
	var ret = CGDOME.call.gdome_c_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment nodeValue method
 * C header: GdomeDOMString* gdome_c_nodeValue(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_c_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_nodeValue method
 * C header: void gdome_c_set_nodeValue(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue";
	CGDOME.call.gdome_c_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment nodeType method
 * C header: unsigned short gdome_c_nodeType(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeType";
	var ret = CGDOME.call.gdome_c_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment parentNode method
 * C header: GdomeNode* gdome_c_parentNode(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.parentNode";
	var ret = CGDOME.call.gdome_c_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment childNodes method
 * C header: GdomeNodeList* gdome_c_childNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.childNodes";
	var ret = CGDOME.call.gdome_c_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeComment firstChild method
 * C header: GdomeNode* gdome_c_firstChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.firstChild";
	var ret = CGDOME.call.gdome_c_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment lastChild method
 * C header: GdomeNode* gdome_c_lastChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.lastChild";
	var ret = CGDOME.call.gdome_c_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment previousSibling method
 * C header: GdomeNode* gdome_c_previousSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_c_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment nextSibling method
 * C header: GdomeNode* gdome_c_nextSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_c_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment attributes method
 * C header: GdomeNamedNodeMap* gdome_c_attributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.attributes";
	var ret = CGDOME.call.gdome_c_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeComment ownerDocument method
 * C header: GdomeDocument* gdome_c_ownerDocument(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_c_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeComment insertBefore method
 * C header: GdomeNode* gdome_c_insertBefore(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_c_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment replaceChild method
 * C header: GdomeNode* gdome_c_replaceChild(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_c_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment removeChild method
 * C header: GdomeNode* gdome_c_removeChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeChild";
	var ret = CGDOME.call.gdome_c_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment appendChild method
 * C header: GdomeNode* gdome_c_appendChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.appendChild";
	var ret = CGDOME.call.gdome_c_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment hasChildNodes method
 * C header: GdomeBoolean gdome_c_hasChildNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_c_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment cloneNode method
 * C header: GdomeNode* gdome_c_cloneNode(GdomeComment*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_c_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment normalize method
 * C header: void gdome_c_normalize(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.normalize";
	CGDOME.call.gdome_c_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment isSupported method
 * C header: GdomeBoolean gdome_c_isSupported(GdomeComment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.isSupported";
	var ret = CGDOME.call.gdome_c_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment namespaceURI method
 * C header: GdomeDOMString* gdome_c_namespaceURI(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_c_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment prefix method
 * C header: GdomeDOMString* gdome_c_prefix(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.prefix";
	var ret = CGDOME.call.gdome_c_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_prefix method
 * C header: void gdome_c_set_prefix(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_prefix";
	CGDOME.call.gdome_c_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment localName method
 * C header: GdomeDOMString* gdome_c_localName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.localName";
	var ret = CGDOME.call.gdome_c_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment hasAttributes method
 * C header: GdomeBoolean gdome_c_hasAttributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_c_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment addEventListener method
 * C header: void gdome_c_addEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener";
	CGDOME.call.gdome_c_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment removeEventListener method
 * C header: void gdome_c_removeEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener";
	CGDOME.call.gdome_c_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment dispatchEvent method
 * C header: GdomeBoolean gdome_c_dispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_c_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment subTreeDispatchEvent method
 * C header: void gdome_c_subTreeDispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_c_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment canAppend method
 * C header: GdomeBoolean gdome_c_canAppend(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.canAppend";
	var ret = CGDOME.call.gdome_c_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCDATASection(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCDATASection) {
			return arg1;
		} else if(arg1.toGdomeCDATASection !== undefined) {
			return arg1.toGdomeCDATASection();
		} else {
			throw "Could not convert object to GdomeCDATASection!";
		}
	}
}

/** GdomeCDATASection splitText method
 * C header: GdomeText* gdome_cds_splitText(GdomeCDATASection*, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.splitText";
	var ret = CGDOME.call.gdome_cds_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeCDATASection data method
 * C header: GdomeDOMString* gdome_cds_data(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.data";
	var ret = CGDOME.call.gdome_cds_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_data method
 * C header: void gdome_cds_set_data(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_data";
	CGDOME.call.gdome_cds_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection length method
 * C header: gulong gdome_cds_length(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.length";
	var ret = CGDOME.call.gdome_cds_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection substringData method
 * C header: GdomeDOMString* gdome_cds_substringData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.substringData";
	var ret = CGDOME.call.gdome_cds_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection appendData method
 * C header: void gdome_cds_appendData(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendData";
	CGDOME.call.gdome_cds_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection insertData method
 * C header: void gdome_cds_insertData(GdomeCDATASection*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertData";
	CGDOME.call.gdome_cds_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection deleteData method
 * C header: void gdome_cds_deleteData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.deleteData";
	CGDOME.call.gdome_cds_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection replaceData method
 * C header: void gdome_cds_replaceData(GdomeCDATASection*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData";
	CGDOME.call.gdome_cds_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection ref method
 * C header: void gdome_cds_ref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ref";
	CGDOME.call.gdome_cds_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection unref method
 * C header: void gdome_cds_unref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.unref";
	CGDOME.call.gdome_cds_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection query_interface method
 * C header: gpointer gdome_cds_query_interface(GdomeCDATASection*, const char*, GdomeException*)
 */
GdomeCDATASection.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.query_interface";
	var ret = CGDOME.call.gdome_cds_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection nodeName method
 * C header: GdomeDOMString* gdome_cds_nodeName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeName";
	var ret = CGDOME.call.gdome_cds_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection nodeValue method
 * C header: GdomeDOMString* gdome_cds_nodeValue(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cds_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_nodeValue method
 * C header: void gdome_cds_set_nodeValue(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue";
	CGDOME.call.gdome_cds_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection nodeType method
 * C header: unsigned short gdome_cds_nodeType(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeType";
	var ret = CGDOME.call.gdome_cds_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection parentNode method
 * C header: GdomeNode* gdome_cds_parentNode(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.parentNode";
	var ret = CGDOME.call.gdome_cds_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection childNodes method
 * C header: GdomeNodeList* gdome_cds_childNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.childNodes";
	var ret = CGDOME.call.gdome_cds_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCDATASection firstChild method
 * C header: GdomeNode* gdome_cds_firstChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.firstChild";
	var ret = CGDOME.call.gdome_cds_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection lastChild method
 * C header: GdomeNode* gdome_cds_lastChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.lastChild";
	var ret = CGDOME.call.gdome_cds_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection previousSibling method
 * C header: GdomeNode* gdome_cds_previousSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cds_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection nextSibling method
 * C header: GdomeNode* gdome_cds_nextSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cds_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection attributes method
 * C header: GdomeNamedNodeMap* gdome_cds_attributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.attributes";
	var ret = CGDOME.call.gdome_cds_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCDATASection ownerDocument method
 * C header: GdomeDocument* gdome_cds_ownerDocument(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cds_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCDATASection insertBefore method
 * C header: GdomeNode* gdome_cds_insertBefore(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cds_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection replaceChild method
 * C header: GdomeNode* gdome_cds_replaceChild(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cds_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection removeChild method
 * C header: GdomeNode* gdome_cds_removeChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild";
	var ret = CGDOME.call.gdome_cds_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection appendChild method
 * C header: GdomeNode* gdome_cds_appendChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild";
	var ret = CGDOME.call.gdome_cds_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection hasChildNodes method
 * C header: GdomeBoolean gdome_cds_hasChildNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cds_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection cloneNode method
 * C header: GdomeNode* gdome_cds_cloneNode(GdomeCDATASection*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cds_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection normalize method
 * C header: void gdome_cds_normalize(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.normalize";
	CGDOME.call.gdome_cds_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection isSupported method
 * C header: GdomeBoolean gdome_cds_isSupported(GdomeCDATASection*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported";
	var ret = CGDOME.call.gdome_cds_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection namespaceURI method
 * C header: GdomeDOMString* gdome_cds_namespaceURI(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cds_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection prefix method
 * C header: GdomeDOMString* gdome_cds_prefix(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.prefix";
	var ret = CGDOME.call.gdome_cds_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_prefix method
 * C header: void gdome_cds_set_prefix(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix";
	CGDOME.call.gdome_cds_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection localName method
 * C header: GdomeDOMString* gdome_cds_localName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.localName";
	var ret = CGDOME.call.gdome_cds_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection hasAttributes method
 * C header: GdomeBoolean gdome_cds_hasAttributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cds_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection addEventListener method
 * C header: void gdome_cds_addEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener";
	CGDOME.call.gdome_cds_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection removeEventListener method
 * C header: void gdome_cds_removeEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener";
	CGDOME.call.gdome_cds_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection dispatchEvent method
 * C header: GdomeBoolean gdome_cds_dispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cds_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection subTreeDispatchEvent method
 * C header: void gdome_cds_subTreeDispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cds_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection canAppend method
 * C header: GdomeBoolean gdome_cds_canAppend(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend";
	var ret = CGDOME.call.gdome_cds_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNotation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNotation) {
			return arg1;
		} else if(arg1.toGdomeNotation !== undefined) {
			return arg1.toGdomeNotation();
		} else {
			throw "Could not convert object to GdomeNotation!";
		}
	}
}

/** GdomeNotation publicId method
 * C header: GdomeDOMString* gdome_not_publicId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.publicId";
	var ret = CGDOME.call.gdome_not_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation systemId method
 * C header: GdomeDOMString* gdome_not_systemId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.systemId";
	var ret = CGDOME.call.gdome_not_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation ref method
 * C header: void gdome_not_ref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ref";
	CGDOME.call.gdome_not_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation unref method
 * C header: void gdome_not_unref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.unref";
	CGDOME.call.gdome_not_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation query_interface method
 * C header: gpointer gdome_not_query_interface(GdomeNotation*, const char*, GdomeException*)
 */
GdomeNotation.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.query_interface";
	var ret = CGDOME.call.gdome_not_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation nodeName method
 * C header: GdomeDOMString* gdome_not_nodeName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeName";
	var ret = CGDOME.call.gdome_not_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation nodeValue method
 * C header: GdomeDOMString* gdome_not_nodeValue(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeValue";
	var ret = CGDOME.call.gdome_not_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_nodeValue method
 * C header: void gdome_not_set_nodeValue(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue";
	CGDOME.call.gdome_not_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation nodeType method
 * C header: unsigned short gdome_not_nodeType(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeType";
	var ret = CGDOME.call.gdome_not_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation parentNode method
 * C header: GdomeNode* gdome_not_parentNode(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.parentNode";
	var ret = CGDOME.call.gdome_not_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation childNodes method
 * C header: GdomeNodeList* gdome_not_childNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.childNodes";
	var ret = CGDOME.call.gdome_not_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNotation firstChild method
 * C header: GdomeNode* gdome_not_firstChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.firstChild";
	var ret = CGDOME.call.gdome_not_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation lastChild method
 * C header: GdomeNode* gdome_not_lastChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.lastChild";
	var ret = CGDOME.call.gdome_not_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation previousSibling method
 * C header: GdomeNode* gdome_not_previousSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.previousSibling";
	var ret = CGDOME.call.gdome_not_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation nextSibling method
 * C header: GdomeNode* gdome_not_nextSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nextSibling";
	var ret = CGDOME.call.gdome_not_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation attributes method
 * C header: GdomeNamedNodeMap* gdome_not_attributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.attributes";
	var ret = CGDOME.call.gdome_not_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNotation ownerDocument method
 * C header: GdomeDocument* gdome_not_ownerDocument(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_not_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNotation insertBefore method
 * C header: GdomeNode* gdome_not_insertBefore(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore";
	var ret = CGDOME.call.gdome_not_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation replaceChild method
 * C header: GdomeNode* gdome_not_replaceChild(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild";
	var ret = CGDOME.call.gdome_not_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation removeChild method
 * C header: GdomeNode* gdome_not_removeChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild";
	var ret = CGDOME.call.gdome_not_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation appendChild method
 * C header: GdomeNode* gdome_not_appendChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild";
	var ret = CGDOME.call.gdome_not_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation hasChildNodes method
 * C header: GdomeBoolean gdome_not_hasChildNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_not_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation cloneNode method
 * C header: GdomeNode* gdome_not_cloneNode(GdomeNotation*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.cloneNode";
	var ret = CGDOME.call.gdome_not_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation normalize method
 * C header: void gdome_not_normalize(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.normalize";
	CGDOME.call.gdome_not_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation isSupported method
 * C header: GdomeBoolean gdome_not_isSupported(GdomeNotation*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.isSupported";
	var ret = CGDOME.call.gdome_not_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation namespaceURI method
 * C header: GdomeDOMString* gdome_not_namespaceURI(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_not_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation prefix method
 * C header: GdomeDOMString* gdome_not_prefix(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.prefix";
	var ret = CGDOME.call.gdome_not_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_prefix method
 * C header: void gdome_not_set_prefix(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_prefix";
	CGDOME.call.gdome_not_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation localName method
 * C header: GdomeDOMString* gdome_not_localName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.localName";
	var ret = CGDOME.call.gdome_not_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation hasAttributes method
 * C header: GdomeBoolean gdome_not_hasAttributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_not_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation addEventListener method
 * C header: void gdome_not_addEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener";
	CGDOME.call.gdome_not_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation removeEventListener method
 * C header: void gdome_not_removeEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener";
	CGDOME.call.gdome_not_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation dispatchEvent method
 * C header: GdomeBoolean gdome_not_dispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_not_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation subTreeDispatchEvent method
 * C header: void gdome_not_subTreeDispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_not_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation canAppend method
 * C header: GdomeBoolean gdome_not_canAppend(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend";
	var ret = CGDOME.call.gdome_not_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntity(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntity) {
			return arg1;
		} else if(arg1.toGdomeEntity !== undefined) {
			return arg1.toGdomeEntity();
		} else {
			throw "Could not convert object to GdomeEntity!";
		}
	}
}

/** GdomeEntity publicId method
 * C header: GdomeDOMString* gdome_ent_publicId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.publicId";
	var ret = CGDOME.call.gdome_ent_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity systemId method
 * C header: GdomeDOMString* gdome_ent_systemId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.systemId";
	var ret = CGDOME.call.gdome_ent_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity notationName method
 * C header: GdomeDOMString* gdome_ent_notationName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.notationName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.notationName";
	var ret = CGDOME.call.gdome_ent_notationName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity ref method
 * C header: void gdome_ent_ref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ref";
	CGDOME.call.gdome_ent_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity unref method
 * C header: void gdome_ent_unref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.unref";
	CGDOME.call.gdome_ent_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity query_interface method
 * C header: gpointer gdome_ent_query_interface(GdomeEntity*, const char*, GdomeException*)
 */
GdomeEntity.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.query_interface";
	var ret = CGDOME.call.gdome_ent_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity nodeName method
 * C header: GdomeDOMString* gdome_ent_nodeName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeName";
	var ret = CGDOME.call.gdome_ent_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity nodeValue method
 * C header: GdomeDOMString* gdome_ent_nodeValue(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeValue";
	var ret = CGDOME.call.gdome_ent_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_nodeValue method
 * C header: void gdome_ent_set_nodeValue(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue";
	CGDOME.call.gdome_ent_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity nodeType method
 * C header: unsigned short gdome_ent_nodeType(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeType";
	var ret = CGDOME.call.gdome_ent_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity parentNode method
 * C header: GdomeNode* gdome_ent_parentNode(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.parentNode";
	var ret = CGDOME.call.gdome_ent_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity childNodes method
 * C header: GdomeNodeList* gdome_ent_childNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.childNodes";
	var ret = CGDOME.call.gdome_ent_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntity firstChild method
 * C header: GdomeNode* gdome_ent_firstChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.firstChild";
	var ret = CGDOME.call.gdome_ent_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity lastChild method
 * C header: GdomeNode* gdome_ent_lastChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.lastChild";
	var ret = CGDOME.call.gdome_ent_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity previousSibling method
 * C header: GdomeNode* gdome_ent_previousSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.previousSibling";
	var ret = CGDOME.call.gdome_ent_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity nextSibling method
 * C header: GdomeNode* gdome_ent_nextSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nextSibling";
	var ret = CGDOME.call.gdome_ent_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity attributes method
 * C header: GdomeNamedNodeMap* gdome_ent_attributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.attributes";
	var ret = CGDOME.call.gdome_ent_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntity ownerDocument method
 * C header: GdomeDocument* gdome_ent_ownerDocument(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_ent_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntity insertBefore method
 * C header: GdomeNode* gdome_ent_insertBefore(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore";
	var ret = CGDOME.call.gdome_ent_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity replaceChild method
 * C header: GdomeNode* gdome_ent_replaceChild(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild";
	var ret = CGDOME.call.gdome_ent_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity removeChild method
 * C header: GdomeNode* gdome_ent_removeChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild";
	var ret = CGDOME.call.gdome_ent_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity appendChild method
 * C header: GdomeNode* gdome_ent_appendChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild";
	var ret = CGDOME.call.gdome_ent_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity hasChildNodes method
 * C header: GdomeBoolean gdome_ent_hasChildNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_ent_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity cloneNode method
 * C header: GdomeNode* gdome_ent_cloneNode(GdomeEntity*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.cloneNode";
	var ret = CGDOME.call.gdome_ent_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity normalize method
 * C header: void gdome_ent_normalize(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.normalize";
	CGDOME.call.gdome_ent_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity isSupported method
 * C header: GdomeBoolean gdome_ent_isSupported(GdomeEntity*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.isSupported";
	var ret = CGDOME.call.gdome_ent_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity namespaceURI method
 * C header: GdomeDOMString* gdome_ent_namespaceURI(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_ent_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity prefix method
 * C header: GdomeDOMString* gdome_ent_prefix(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.prefix";
	var ret = CGDOME.call.gdome_ent_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_prefix method
 * C header: void gdome_ent_set_prefix(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_prefix";
	CGDOME.call.gdome_ent_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity localName method
 * C header: GdomeDOMString* gdome_ent_localName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.localName";
	var ret = CGDOME.call.gdome_ent_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity hasAttributes method
 * C header: GdomeBoolean gdome_ent_hasAttributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_ent_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity addEventListener method
 * C header: void gdome_ent_addEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener";
	CGDOME.call.gdome_ent_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity removeEventListener method
 * C header: void gdome_ent_removeEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener";
	CGDOME.call.gdome_ent_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity dispatchEvent method
 * C header: GdomeBoolean gdome_ent_dispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_ent_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity subTreeDispatchEvent method
 * C header: void gdome_ent_subTreeDispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_ent_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity canAppend method
 * C header: GdomeBoolean gdome_ent_canAppend(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend";
	var ret = CGDOME.call.gdome_ent_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntityReference(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntityReference) {
			return arg1;
		} else if(arg1.toGdomeEntityReference !== undefined) {
			return arg1.toGdomeEntityReference();
		} else {
			throw "Could not convert object to GdomeEntityReference!";
		}
	}
}

/** GdomeEntityReference ref method
 * C header: void gdome_er_ref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ref";
	CGDOME.call.gdome_er_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference unref method
 * C header: void gdome_er_unref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.unref";
	CGDOME.call.gdome_er_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference query_interface method
 * C header: gpointer gdome_er_query_interface(GdomeEntityReference*, const char*, GdomeException*)
 */
GdomeEntityReference.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.query_interface";
	var ret = CGDOME.call.gdome_er_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference nodeName method
 * C header: GdomeDOMString* gdome_er_nodeName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeName";
	var ret = CGDOME.call.gdome_er_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference nodeValue method
 * C header: GdomeDOMString* gdome_er_nodeValue(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeValue";
	var ret = CGDOME.call.gdome_er_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_nodeValue method
 * C header: void gdome_er_set_nodeValue(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue";
	CGDOME.call.gdome_er_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference nodeType method
 * C header: unsigned short gdome_er_nodeType(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeType";
	var ret = CGDOME.call.gdome_er_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference parentNode method
 * C header: GdomeNode* gdome_er_parentNode(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.parentNode";
	var ret = CGDOME.call.gdome_er_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference childNodes method
 * C header: GdomeNodeList* gdome_er_childNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.childNodes";
	var ret = CGDOME.call.gdome_er_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntityReference firstChild method
 * C header: GdomeNode* gdome_er_firstChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.firstChild";
	var ret = CGDOME.call.gdome_er_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference lastChild method
 * C header: GdomeNode* gdome_er_lastChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.lastChild";
	var ret = CGDOME.call.gdome_er_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference previousSibling method
 * C header: GdomeNode* gdome_er_previousSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.previousSibling";
	var ret = CGDOME.call.gdome_er_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference nextSibling method
 * C header: GdomeNode* gdome_er_nextSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nextSibling";
	var ret = CGDOME.call.gdome_er_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference attributes method
 * C header: GdomeNamedNodeMap* gdome_er_attributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.attributes";
	var ret = CGDOME.call.gdome_er_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntityReference ownerDocument method
 * C header: GdomeDocument* gdome_er_ownerDocument(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_er_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntityReference insertBefore method
 * C header: GdomeNode* gdome_er_insertBefore(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore";
	var ret = CGDOME.call.gdome_er_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference replaceChild method
 * C header: GdomeNode* gdome_er_replaceChild(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild";
	var ret = CGDOME.call.gdome_er_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference removeChild method
 * C header: GdomeNode* gdome_er_removeChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild";
	var ret = CGDOME.call.gdome_er_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference appendChild method
 * C header: GdomeNode* gdome_er_appendChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild";
	var ret = CGDOME.call.gdome_er_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference hasChildNodes method
 * C header: GdomeBoolean gdome_er_hasChildNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_er_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference cloneNode method
 * C header: GdomeNode* gdome_er_cloneNode(GdomeEntityReference*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.cloneNode";
	var ret = CGDOME.call.gdome_er_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference normalize method
 * C header: void gdome_er_normalize(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.normalize";
	CGDOME.call.gdome_er_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference isSupported method
 * C header: GdomeBoolean gdome_er_isSupported(GdomeEntityReference*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported";
	var ret = CGDOME.call.gdome_er_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference namespaceURI method
 * C header: GdomeDOMString* gdome_er_namespaceURI(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_er_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference prefix method
 * C header: GdomeDOMString* gdome_er_prefix(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.prefix";
	var ret = CGDOME.call.gdome_er_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_prefix method
 * C header: void gdome_er_set_prefix(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix";
	CGDOME.call.gdome_er_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference localName method
 * C header: GdomeDOMString* gdome_er_localName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.localName";
	var ret = CGDOME.call.gdome_er_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference hasAttributes method
 * C header: GdomeBoolean gdome_er_hasAttributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_er_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference addEventListener method
 * C header: void gdome_er_addEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener";
	CGDOME.call.gdome_er_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference removeEventListener method
 * C header: void gdome_er_removeEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener";
	CGDOME.call.gdome_er_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference dispatchEvent method
 * C header: GdomeBoolean gdome_er_dispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_er_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference subTreeDispatchEvent method
 * C header: void gdome_er_subTreeDispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_er_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference canAppend method
 * C header: GdomeBoolean gdome_er_canAppend(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend";
	var ret = CGDOME.call.gdome_er_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeProcessingInstruction(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeProcessingInstruction) {
			return arg1;
		} else if(arg1.toGdomeProcessingInstruction !== undefined) {
			return arg1.toGdomeProcessingInstruction();
		} else {
			throw "Could not convert object to GdomeProcessingInstruction!";
		}
	}
}

/** GdomeProcessingInstruction target method
 * C header: GdomeDOMString* gdome_pi_target(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.target = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.target";
	var ret = CGDOME.call.gdome_pi_target(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction data method
 * C header: GdomeDOMString* gdome_pi_data(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.data";
	var ret = CGDOME.call.gdome_pi_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_data method
 * C header: void gdome_pi_set_data(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data";
	CGDOME.call.gdome_pi_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction ref method
 * C header: void gdome_pi_ref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ref";
	CGDOME.call.gdome_pi_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction unref method
 * C header: void gdome_pi_unref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.unref";
	CGDOME.call.gdome_pi_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction query_interface method
 * C header: gpointer gdome_pi_query_interface(GdomeProcessingInstruction*, const char*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.query_interface";
	var ret = CGDOME.call.gdome_pi_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction nodeName method
 * C header: GdomeDOMString* gdome_pi_nodeName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeName";
	var ret = CGDOME.call.gdome_pi_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction nodeValue method
 * C header: GdomeDOMString* gdome_pi_nodeValue(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeValue";
	var ret = CGDOME.call.gdome_pi_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_nodeValue method
 * C header: void gdome_pi_set_nodeValue(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue";
	CGDOME.call.gdome_pi_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction nodeType method
 * C header: unsigned short gdome_pi_nodeType(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeType";
	var ret = CGDOME.call.gdome_pi_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction parentNode method
 * C header: GdomeNode* gdome_pi_parentNode(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.parentNode";
	var ret = CGDOME.call.gdome_pi_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction childNodes method
 * C header: GdomeNodeList* gdome_pi_childNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.childNodes";
	var ret = CGDOME.call.gdome_pi_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeProcessingInstruction firstChild method
 * C header: GdomeNode* gdome_pi_firstChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.firstChild";
	var ret = CGDOME.call.gdome_pi_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction lastChild method
 * C header: GdomeNode* gdome_pi_lastChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.lastChild";
	var ret = CGDOME.call.gdome_pi_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction previousSibling method
 * C header: GdomeNode* gdome_pi_previousSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.previousSibling";
	var ret = CGDOME.call.gdome_pi_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction nextSibling method
 * C header: GdomeNode* gdome_pi_nextSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nextSibling";
	var ret = CGDOME.call.gdome_pi_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction attributes method
 * C header: GdomeNamedNodeMap* gdome_pi_attributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.attributes";
	var ret = CGDOME.call.gdome_pi_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeProcessingInstruction ownerDocument method
 * C header: GdomeDocument* gdome_pi_ownerDocument(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_pi_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeProcessingInstruction insertBefore method
 * C header: GdomeNode* gdome_pi_insertBefore(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore";
	var ret = CGDOME.call.gdome_pi_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction replaceChild method
 * C header: GdomeNode* gdome_pi_replaceChild(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild";
	var ret = CGDOME.call.gdome_pi_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction removeChild method
 * C header: GdomeNode* gdome_pi_removeChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild";
	var ret = CGDOME.call.gdome_pi_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction appendChild method
 * C header: GdomeNode* gdome_pi_appendChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild";
	var ret = CGDOME.call.gdome_pi_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction hasChildNodes method
 * C header: GdomeBoolean gdome_pi_hasChildNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_pi_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction cloneNode method
 * C header: GdomeNode* gdome_pi_cloneNode(GdomeProcessingInstruction*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.cloneNode";
	var ret = CGDOME.call.gdome_pi_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction normalize method
 * C header: void gdome_pi_normalize(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.normalize";
	CGDOME.call.gdome_pi_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction isSupported method
 * C header: GdomeBoolean gdome_pi_isSupported(GdomeProcessingInstruction*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported";
	var ret = CGDOME.call.gdome_pi_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction namespaceURI method
 * C header: GdomeDOMString* gdome_pi_namespaceURI(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_pi_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction prefix method
 * C header: GdomeDOMString* gdome_pi_prefix(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.prefix";
	var ret = CGDOME.call.gdome_pi_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_prefix method
 * C header: void gdome_pi_set_prefix(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix";
	CGDOME.call.gdome_pi_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction localName method
 * C header: GdomeDOMString* gdome_pi_localName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.localName";
	var ret = CGDOME.call.gdome_pi_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction hasAttributes method
 * C header: GdomeBoolean gdome_pi_hasAttributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_pi_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction addEventListener method
 * C header: void gdome_pi_addEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener";
	CGDOME.call.gdome_pi_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction removeEventListener method
 * C header: void gdome_pi_removeEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener";
	CGDOME.call.gdome_pi_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction dispatchEvent method
 * C header: GdomeBoolean gdome_pi_dispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_pi_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction subTreeDispatchEvent method
 * C header: void gdome_pi_subTreeDispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_pi_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction canAppend method
 * C header: GdomeBoolean gdome_pi_canAppend(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend";
	var ret = CGDOME.call.gdome_pi_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}


'
0.40336200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1067 do_v8_convert_to_string at 0x806ef72 in sendanor::do_ustring_convert_to_v8(Glib::ustring const&) from js
0.40338000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:287: strbuf2=`/* Extended JavaScript String library
 * Copyright 2009 Jaakko-Heikki Heusala <jheusala@iki.fi>
 * $Id: $
 */

/** Define GDOME */
GDOME = {};

/** GdomeException */
function GdomeException(msg) {
	this.pointer = CGDOME.call.gdome_extra_exc_new();
	this.msg = msg;
}

/** Delete GdomeException */
GdomeException.prototype.del = function() {
	CGDOME.call.gdome_extra_exc_del(this.pointer);
}

/** Get/set exception value */
GdomeException.prototype.value = function(v) {
	if(v===undefined) return (CGDOME.call.gdome_extra_exc_getvalue)(this.pointer);
	CGDOME.call.gdome_extra_exc_setvalue(this.pointer, v);
	return v;
}

/** Convert to string */
GdomeException.prototype.toString = function() {
	var id = this.value();
	var msg = "GdomeException: "+this.msg;
	if(id!=0) msg += " (#" + id + ")";
	return msg;
}

/** Our exception data type */
GDOME.exception = new GdomeException();

/** Convert to GdomeNode */
GdomeText.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_text_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Convert to GdomeNode */
GdomeElement.prototype.toGdomeNode = function() {
	var ptr = CGDOME.call.gdome_extra_cast_element_to_node(this.pointer);
	if(ptr == 0) {
		GDOME.exception.msg = "toGdomeNode failed";
		throw GDOME.exception;
	}
	return new GdomeNode(ptr, this.di);
}

/** Constructor */
function GdomeDOMString(pointer) {
	this.pointer = pointer;
}

/** Create gdome string */
GdomeDOMString.mkref = function(str) {
	var str_ptr = CGDOME.call.gdome_str_mkref_dup(str);
	if (str_ptr == 0) { throw GDOME.exception; }
	return new GdomeDOMString(str_ptr);
}

/** Convert to string */
GdomeDOMString.prototype.toString = function() {
	if(this.pointer.address == 0) return "";
	var str = "";
	for(var i=0; i<this.length(); ++i) { str += this.charAt(i); }
	return str;
}

/** unref */
GdomeDOMString.prototype.unref = function() {
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** Gdome DOM Implementation */
GDOME.createDOMImplementation = function() {
	GDOME.exception.msg = "gdome_di_mkref";
	var di_pointer = CGDOME.call.gdome_di_mkref();
	if (di_pointer == 0) { throw GDOME.exception; }
	return new GdomeDOMImplementation(di_pointer);
}

/* Construct an object (if called with new) or try to convert object to GdomeNode */
/*
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toNode !== undefined) {
			return arg1.toNode();
		}
	}
}
*/

/* EOF */
/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMString(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDOMString) {
			return arg1;
		} else if(arg1.toGdomeDOMString !== undefined) {
			return arg1.toGdomeDOMString();
		} else {
			throw "Could not convert object to GdomeDOMString!";
		}
	}
}

/** GdomeDOMString ref method
 * C header: void gdome_str_ref(GdomeDOMString*)
 */
GdomeDOMString.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_ref(this.pointer);
}

/** GdomeDOMString unref method
 * C header: void gdome_str_unref(GdomeDOMString*)
 */
GdomeDOMString.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	CGDOME.call.gdome_str_unref(this.pointer);
}

/** GdomeDOMString length method
 * C header: int gdome_str_length(GdomeDOMString*)
 */
GdomeDOMString.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_length(this.pointer);
	return ret;
}

/** GdomeDOMString isEmpty method
 * C header: GdomeBoolean gdome_str_isEmpty(GdomeDOMString*)
 */
GdomeDOMString.prototype.isEmpty = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_isEmpty(this.pointer);
	return (ret === 1) ? true : false;
}

/** GdomeDOMString charAt method
 * C header: gchar gdome_str_charAt(GdomeDOMString*, int)
 */
GdomeDOMString.prototype.charAt = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var ret = CGDOME.call.gdome_str_charAt(this.pointer, arg0);
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDOMImplementation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
	} else {
		if(arg1 instanceof GdomeDOMImplementation) {
			return arg1;
		} else if(arg1.toGdomeDOMImplementation !== undefined) {
			return arg1.toGdomeDOMImplementation();
		} else {
			throw "Could not convert object to GdomeDOMImplementation!";
		}
	}
}

/** GdomeDOMImplementation ref method
 * C header: void gdome_di_ref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.ref";
	CGDOME.call.gdome_di_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation unref method
 * C header: void gdome_di_unref(GdomeDOMImplementation*, GdomeException*)
 */
GdomeDOMImplementation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.unref";
	CGDOME.call.gdome_di_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocumentType method
 * C header: GdomeDocumentType* gdome_di_createDocumentType(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocumentType = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocumentType";
	var ret = CGDOME.call.gdome_di_createDocumentType(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDOMImplementation createDocument method
 * C header: GdomeDocument* gdome_di_createDocument(GdomeDOMImplementation*, GdomeDOMString*, GdomeDOMString*, GdomeDocumentType*, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocument = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg2 instanceof GdomeDocumentType)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: argument not instance of GdomeDocumentType";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument: !arg2.pointer";
	if(arg2.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocument";
	var ret = CGDOME.call.gdome_di_createDocument(this.pointer, gstr0.pointer, gstr1.pointer, arg2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation freeDoc method
 * C header: void gdome_di_freeDoc(GdomeDOMImplementation*, GdomeDocument*, GdomeException*)
 */
GdomeDOMImplementation.prototype.freeDoc = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.freeDoc";
	CGDOME.call.gdome_di_freeDoc(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDOMImplementation createDocFromURI method
 * C header: GdomeDocument* gdome_di_createDocFromURI(GdomeDOMImplementation*, const char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromURI = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromURI";
	var ret = CGDOME.call.gdome_di_createDocFromURI(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation createDocFromMemory method
 * C header: GdomeDocument* gdome_di_createDocFromMemory(GdomeDOMImplementation*, char*, unsigned int, GdomeException*)
 */
GdomeDOMImplementation.prototype.createDocFromMemory = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.createDocFromMemory";
	var ret = CGDOME.call.gdome_di_createDocFromMemory(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDOMImplementation saveDocToFile method
 * C header: GdomeBoolean gdome_di_saveDocToFile(GdomeDOMImplementation*, GdomeDocument*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFile = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFile";
	var ret = CGDOME.call.gdome_di_saveDocToFile(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToFileEnc method
 * C header: GdomeBoolean gdome_di_saveDocToFileEnc(GdomeDOMImplementation*, GdomeDocument*, const char*, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToFileEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToFileEnc";
	var ret = CGDOME.call.gdome_di_saveDocToFileEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemory method
 * C header: GdomeBoolean gdome_di_saveDocToMemory(GdomeDOMImplementation*, GdomeDocument*, char**, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemory = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemory";
	var ret = CGDOME.call.gdome_di_saveDocToMemory(this.pointer, arg0.pointer, arg1, arg2, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDOMImplementation saveDocToMemoryEnc method
 * C header: GdomeBoolean gdome_di_saveDocToMemoryEnc(GdomeDOMImplementation*, GdomeDocument*, char**, const char*, GdomeSavingCode, GdomeException*)
 */
GdomeDOMImplementation.prototype.saveDocToMemoryEnc = function(arg0, arg1, arg2, arg3) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeDocument)) {
		GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: argument not instance of GdomeDocument";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDOMImplementation.prototype.saveDocToMemoryEnc";
	var ret = CGDOME.call.gdome_di_saveDocToMemoryEnc(this.pointer, arg0.pointer, arg1, arg2, arg3, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentType(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentType) {
			return arg1;
		} else if(arg1.toGdomeDocumentType !== undefined) {
			return arg1.toGdomeDocumentType();
		} else {
			throw "Could not convert object to GdomeDocumentType!";
		}
	}
}

/** GdomeDocumentType name method
 * C header: GdomeDOMString* gdome_dt_name(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.name";
	var ret = CGDOME.call.gdome_dt_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType entities method
 * C header: GdomeNamedNodeMap* gdome_dt_entities(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.entities = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.entities";
	var ret = CGDOME.call.gdome_dt_entities(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType notations method
 * C header: GdomeNamedNodeMap* gdome_dt_notations(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.notations = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.notations";
	var ret = CGDOME.call.gdome_dt_notations(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType publicId method
 * C header: GdomeDOMString* gdome_dt_publicId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.publicId";
	var ret = CGDOME.call.gdome_dt_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType systemId method
 * C header: GdomeDOMString* gdome_dt_systemId(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.systemId";
	var ret = CGDOME.call.gdome_dt_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType internalSubset method
 * C header: GdomeDOMString* gdome_dt_internalSubset(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.internalSubset = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.internalSubset";
	var ret = CGDOME.call.gdome_dt_internalSubset(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType ref method
 * C header: void gdome_dt_ref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ref";
	CGDOME.call.gdome_dt_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType unref method
 * C header: void gdome_dt_unref(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.unref";
	CGDOME.call.gdome_dt_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType query_interface method
 * C header: gpointer gdome_dt_query_interface(GdomeDocumentType*, const char*, GdomeException*)
 */
GdomeDocumentType.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.query_interface";
	var ret = CGDOME.call.gdome_dt_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType nodeName method
 * C header: GdomeDOMString* gdome_dt_nodeName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeName";
	var ret = CGDOME.call.gdome_dt_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType nodeValue method
 * C header: GdomeDOMString* gdome_dt_nodeValue(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeValue";
	var ret = CGDOME.call.gdome_dt_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_nodeValue method
 * C header: void gdome_dt_set_nodeValue(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_nodeValue";
	CGDOME.call.gdome_dt_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType nodeType method
 * C header: unsigned short gdome_dt_nodeType(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nodeType";
	var ret = CGDOME.call.gdome_dt_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentType parentNode method
 * C header: GdomeNode* gdome_dt_parentNode(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.parentNode";
	var ret = CGDOME.call.gdome_dt_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType childNodes method
 * C header: GdomeNodeList* gdome_dt_childNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.childNodes";
	var ret = CGDOME.call.gdome_dt_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentType firstChild method
 * C header: GdomeNode* gdome_dt_firstChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.firstChild";
	var ret = CGDOME.call.gdome_dt_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType lastChild method
 * C header: GdomeNode* gdome_dt_lastChild(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.lastChild";
	var ret = CGDOME.call.gdome_dt_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType previousSibling method
 * C header: GdomeNode* gdome_dt_previousSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.previousSibling";
	var ret = CGDOME.call.gdome_dt_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType nextSibling method
 * C header: GdomeNode* gdome_dt_nextSibling(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.nextSibling";
	var ret = CGDOME.call.gdome_dt_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType attributes method
 * C header: GdomeNamedNodeMap* gdome_dt_attributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.attributes";
	var ret = CGDOME.call.gdome_dt_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentType ownerDocument method
 * C header: GdomeDocument* gdome_dt_ownerDocument(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_dt_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentType insertBefore method
 * C header: GdomeNode* gdome_dt_insertBefore(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.insertBefore";
	var ret = CGDOME.call.gdome_dt_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType replaceChild method
 * C header: GdomeNode* gdome_dt_replaceChild(GdomeDocumentType*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.replaceChild";
	var ret = CGDOME.call.gdome_dt_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType removeChild method
 * C header: GdomeNode* gdome_dt_removeChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeChild";
	var ret = CGDOME.call.gdome_dt_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType appendChild method
 * C header: GdomeNode* gdome_dt_appendChild(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.appendChild";
	var ret = CGDOME.call.gdome_dt_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType hasChildNodes method
 * C header: GdomeBoolean gdome_dt_hasChildNodes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_dt_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType cloneNode method
 * C header: GdomeNode* gdome_dt_cloneNode(GdomeDocumentType*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.cloneNode";
	var ret = CGDOME.call.gdome_dt_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentType normalize method
 * C header: void gdome_dt_normalize(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.normalize";
	CGDOME.call.gdome_dt_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType isSupported method
 * C header: GdomeBoolean gdome_dt_isSupported(GdomeDocumentType*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.isSupported";
	var ret = CGDOME.call.gdome_dt_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType namespaceURI method
 * C header: GdomeDOMString* gdome_dt_namespaceURI(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_dt_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType prefix method
 * C header: GdomeDOMString* gdome_dt_prefix(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.prefix";
	var ret = CGDOME.call.gdome_dt_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType set_prefix method
 * C header: void gdome_dt_set_prefix(GdomeDocumentType*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentType.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.set_prefix";
	CGDOME.call.gdome_dt_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType localName method
 * C header: GdomeDOMString* gdome_dt_localName(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.localName";
	var ret = CGDOME.call.gdome_dt_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentType hasAttributes method
 * C header: GdomeBoolean gdome_dt_hasAttributes(GdomeDocumentType*, GdomeException*)
 */
GdomeDocumentType.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_dt_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType addEventListener method
 * C header: void gdome_dt_addEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.addEventListener";
	CGDOME.call.gdome_dt_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType removeEventListener method
 * C header: void gdome_dt_removeEventListener(GdomeDocumentType*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentType.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.removeEventListener";
	CGDOME.call.gdome_dt_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType dispatchEvent method
 * C header: GdomeBoolean gdome_dt_dispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_dt_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentType subTreeDispatchEvent method
 * C header: void gdome_dt_subTreeDispatchEvent(GdomeDocumentType*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentType.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_dt_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentType canAppend method
 * C header: GdomeBoolean gdome_dt_canAppend(GdomeDocumentType*, GdomeNode*, GdomeException*)
 */
GdomeDocumentType.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentType.prototype.canAppend";
	var ret = CGDOME.call.gdome_dt_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocumentFragment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocumentFragment) {
			return arg1;
		} else if(arg1.toGdomeDocumentFragment !== undefined) {
			return arg1.toGdomeDocumentFragment();
		} else {
			throw "Could not convert object to GdomeDocumentFragment!";
		}
	}
}

/** GdomeDocumentFragment ref method
 * C header: void gdome_df_ref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ref";
	CGDOME.call.gdome_df_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment unref method
 * C header: void gdome_df_unref(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.unref";
	CGDOME.call.gdome_df_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment query_interface method
 * C header: gpointer gdome_df_query_interface(GdomeDocumentFragment*, const char*, GdomeException*)
 */
GdomeDocumentFragment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.query_interface";
	var ret = CGDOME.call.gdome_df_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment nodeName method
 * C header: GdomeDOMString* gdome_df_nodeName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeName";
	var ret = CGDOME.call.gdome_df_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment nodeValue method
 * C header: GdomeDOMString* gdome_df_nodeValue(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_df_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_nodeValue method
 * C header: void gdome_df_set_nodeValue(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_nodeValue";
	CGDOME.call.gdome_df_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment nodeType method
 * C header: unsigned short gdome_df_nodeType(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nodeType";
	var ret = CGDOME.call.gdome_df_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocumentFragment parentNode method
 * C header: GdomeNode* gdome_df_parentNode(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.parentNode";
	var ret = CGDOME.call.gdome_df_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment childNodes method
 * C header: GdomeNodeList* gdome_df_childNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.childNodes";
	var ret = CGDOME.call.gdome_df_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocumentFragment firstChild method
 * C header: GdomeNode* gdome_df_firstChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.firstChild";
	var ret = CGDOME.call.gdome_df_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment lastChild method
 * C header: GdomeNode* gdome_df_lastChild(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.lastChild";
	var ret = CGDOME.call.gdome_df_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment previousSibling method
 * C header: GdomeNode* gdome_df_previousSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_df_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment nextSibling method
 * C header: GdomeNode* gdome_df_nextSibling(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_df_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment attributes method
 * C header: GdomeNamedNodeMap* gdome_df_attributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.attributes";
	var ret = CGDOME.call.gdome_df_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocumentFragment ownerDocument method
 * C header: GdomeDocument* gdome_df_ownerDocument(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_df_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocumentFragment insertBefore method
 * C header: GdomeNode* gdome_df_insertBefore(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_df_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment replaceChild method
 * C header: GdomeNode* gdome_df_replaceChild(GdomeDocumentFragment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_df_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment removeChild method
 * C header: GdomeNode* gdome_df_removeChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeChild";
	var ret = CGDOME.call.gdome_df_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment appendChild method
 * C header: GdomeNode* gdome_df_appendChild(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.appendChild";
	var ret = CGDOME.call.gdome_df_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment hasChildNodes method
 * C header: GdomeBoolean gdome_df_hasChildNodes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_df_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment cloneNode method
 * C header: GdomeNode* gdome_df_cloneNode(GdomeDocumentFragment*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_df_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocumentFragment normalize method
 * C header: void gdome_df_normalize(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.normalize";
	CGDOME.call.gdome_df_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment isSupported method
 * C header: GdomeBoolean gdome_df_isSupported(GdomeDocumentFragment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.isSupported";
	var ret = CGDOME.call.gdome_df_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment namespaceURI method
 * C header: GdomeDOMString* gdome_df_namespaceURI(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_df_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment prefix method
 * C header: GdomeDOMString* gdome_df_prefix(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.prefix";
	var ret = CGDOME.call.gdome_df_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment set_prefix method
 * C header: void gdome_df_set_prefix(GdomeDocumentFragment*, GdomeDOMString*, GdomeException*)
 */
GdomeDocumentFragment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.set_prefix";
	CGDOME.call.gdome_df_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment localName method
 * C header: GdomeDOMString* gdome_df_localName(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.localName";
	var ret = CGDOME.call.gdome_df_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocumentFragment hasAttributes method
 * C header: GdomeBoolean gdome_df_hasAttributes(GdomeDocumentFragment*, GdomeException*)
 */
GdomeDocumentFragment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_df_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment addEventListener method
 * C header: void gdome_df_addEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.addEventListener";
	CGDOME.call.gdome_df_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment removeEventListener method
 * C header: void gdome_df_removeEventListener(GdomeDocumentFragment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocumentFragment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.removeEventListener";
	CGDOME.call.gdome_df_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment dispatchEvent method
 * C header: GdomeBoolean gdome_df_dispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_df_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocumentFragment subTreeDispatchEvent method
 * C header: void gdome_df_subTreeDispatchEvent(GdomeDocumentFragment*, GdomeEvent*, GdomeException*)
 */
GdomeDocumentFragment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_df_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocumentFragment canAppend method
 * C header: GdomeBoolean gdome_df_canAppend(GdomeDocumentFragment*, GdomeNode*, GdomeException*)
 */
GdomeDocumentFragment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocumentFragment.prototype.canAppend";
	var ret = CGDOME.call.gdome_df_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeDocument(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeDocument) {
			return arg1;
		} else if(arg1.toGdomeDocument !== undefined) {
			return arg1.toGdomeDocument();
		} else {
			throw "Could not convert object to GdomeDocument!";
		}
	}
}

/** GdomeDocument doctype method
 * C header: GdomeDocumentType* gdome_doc_doctype(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.doctype = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.doctype";
	var ret = CGDOME.call.gdome_doc_doctype(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentType(ret, this.di); }
}

/** GdomeDocument implementation method
 * C header: GdomeDOMImplementation* gdome_doc_implementation(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.implementation = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.implementation";
	var ret = CGDOME.call.gdome_doc_implementation(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMImplementation(ret, this.di); }
}

/** GdomeDocument documentElement method
 * C header: GdomeElement* gdome_doc_documentElement(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.documentElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.documentElement";
	var ret = CGDOME.call.gdome_doc_documentElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createElement method
 * C header: GdomeElement* gdome_doc_createElement(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElement = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElement: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElement";
	var ret = CGDOME.call.gdome_doc_createElement(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createDocumentFragment method
 * C header: GdomeDocumentFragment* gdome_doc_createDocumentFragment(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.createDocumentFragment = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.createDocumentFragment";
	var ret = CGDOME.call.gdome_doc_createDocumentFragment(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocumentFragment(ret, this.di); }
}

/** GdomeDocument createTextNode method
 * C header: GdomeText* gdome_doc_createTextNode(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createTextNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createTextNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createTextNode";
	var ret = CGDOME.call.gdome_doc_createTextNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeDocument createComment method
 * C header: GdomeComment* gdome_doc_createComment(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createComment = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createComment: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createComment";
	var ret = CGDOME.call.gdome_doc_createComment(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeComment(ret, this.di); }
}

/** GdomeDocument createCDATASection method
 * C header: GdomeCDATASection* gdome_doc_createCDATASection(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createCDATASection = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createCDATASection";
	var ret = CGDOME.call.gdome_doc_createCDATASection(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeCDATASection(ret, this.di); }
}

/** GdomeDocument createProcessingInstruction method
 * C header: GdomeProcessingInstruction* gdome_doc_createProcessingInstruction(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createProcessingInstruction = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createProcessingInstruction";
	var ret = CGDOME.call.gdome_doc_createProcessingInstruction(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeProcessingInstruction(ret, this.di); }
}

/** GdomeDocument createAttribute method
 * C header: GdomeAttr* gdome_doc_createAttribute(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttribute";
	var ret = CGDOME.call.gdome_doc_createAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument createEntityReference method
 * C header: GdomeEntityReference* gdome_doc_createEntityReference(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEntityReference = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEntityReference";
	var ret = CGDOME.call.gdome_doc_createEntityReference(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEntityReference(ret, this.di); }
}

/** GdomeDocument getElementsByTagName method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagName(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_doc_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument importNode method
 * C header: GdomeNode* gdome_doc_importNode(GdomeDocument*, GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.importNode = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.importNode: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.importNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.importNode";
	var ret = CGDOME.call.gdome_doc_importNode(this.pointer, arg0.pointer, (arg1?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument createElementNS method
 * C header: GdomeElement* gdome_doc_createElementNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createElementNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createElementNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createElementNS";
	var ret = CGDOME.call.gdome_doc_createElementNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createAttributeNS method
 * C header: GdomeAttr* gdome_doc_createAttributeNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createAttributeNS";
	var ret = CGDOME.call.gdome_doc_createAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeDocument getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_doc_getElementsByTagNameNS(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_doc_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument getElementById method
 * C header: GdomeElement* gdome_doc_getElementById(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.getElementById = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.getElementById: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.getElementById";
	var ret = CGDOME.call.gdome_doc_getElementById(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeDocument createEvent method
 * C header: GdomeEvent* gdome_doc_createEvent(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.createEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.createEvent: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.createEvent";
	var ret = CGDOME.call.gdome_doc_createEvent(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeEvent(ret, this.di); }
}

/** GdomeDocument ref method
 * C header: void gdome_doc_ref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ref";
	CGDOME.call.gdome_doc_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument unref method
 * C header: void gdome_doc_unref(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.unref";
	CGDOME.call.gdome_doc_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument query_interface method
 * C header: gpointer gdome_doc_query_interface(GdomeDocument*, const char*, GdomeException*)
 */
GdomeDocument.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.query_interface";
	var ret = CGDOME.call.gdome_doc_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument nodeName method
 * C header: GdomeDOMString* gdome_doc_nodeName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeName";
	var ret = CGDOME.call.gdome_doc_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument nodeValue method
 * C header: GdomeDOMString* gdome_doc_nodeValue(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeValue";
	var ret = CGDOME.call.gdome_doc_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_nodeValue method
 * C header: void gdome_doc_set_nodeValue(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_nodeValue";
	CGDOME.call.gdome_doc_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument nodeType method
 * C header: unsigned short gdome_doc_nodeType(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nodeType";
	var ret = CGDOME.call.gdome_doc_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeDocument parentNode method
 * C header: GdomeNode* gdome_doc_parentNode(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.parentNode";
	var ret = CGDOME.call.gdome_doc_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument childNodes method
 * C header: GdomeNodeList* gdome_doc_childNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.childNodes";
	var ret = CGDOME.call.gdome_doc_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeDocument firstChild method
 * C header: GdomeNode* gdome_doc_firstChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.firstChild";
	var ret = CGDOME.call.gdome_doc_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument lastChild method
 * C header: GdomeNode* gdome_doc_lastChild(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.lastChild";
	var ret = CGDOME.call.gdome_doc_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument previousSibling method
 * C header: GdomeNode* gdome_doc_previousSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.previousSibling";
	var ret = CGDOME.call.gdome_doc_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument nextSibling method
 * C header: GdomeNode* gdome_doc_nextSibling(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.nextSibling";
	var ret = CGDOME.call.gdome_doc_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument attributes method
 * C header: GdomeNamedNodeMap* gdome_doc_attributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.attributes";
	var ret = CGDOME.call.gdome_doc_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeDocument ownerDocument method
 * C header: GdomeDocument* gdome_doc_ownerDocument(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_doc_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeDocument insertBefore method
 * C header: GdomeNode* gdome_doc_insertBefore(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.insertBefore";
	var ret = CGDOME.call.gdome_doc_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument replaceChild method
 * C header: GdomeNode* gdome_doc_replaceChild(GdomeDocument*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.replaceChild";
	var ret = CGDOME.call.gdome_doc_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument removeChild method
 * C header: GdomeNode* gdome_doc_removeChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeChild";
	var ret = CGDOME.call.gdome_doc_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument appendChild method
 * C header: GdomeNode* gdome_doc_appendChild(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.appendChild";
	var ret = CGDOME.call.gdome_doc_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument hasChildNodes method
 * C header: GdomeBoolean gdome_doc_hasChildNodes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_doc_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument cloneNode method
 * C header: GdomeNode* gdome_doc_cloneNode(GdomeDocument*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.cloneNode";
	var ret = CGDOME.call.gdome_doc_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeDocument normalize method
 * C header: void gdome_doc_normalize(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.normalize";
	CGDOME.call.gdome_doc_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument isSupported method
 * C header: GdomeBoolean gdome_doc_isSupported(GdomeDocument*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.isSupported";
	var ret = CGDOME.call.gdome_doc_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument namespaceURI method
 * C header: GdomeDOMString* gdome_doc_namespaceURI(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_doc_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument prefix method
 * C header: GdomeDOMString* gdome_doc_prefix(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.prefix";
	var ret = CGDOME.call.gdome_doc_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument set_prefix method
 * C header: void gdome_doc_set_prefix(GdomeDocument*, GdomeDOMString*, GdomeException*)
 */
GdomeDocument.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeDocument.prototype.set_prefix";
	CGDOME.call.gdome_doc_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument localName method
 * C header: GdomeDOMString* gdome_doc_localName(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.localName";
	var ret = CGDOME.call.gdome_doc_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeDocument hasAttributes method
 * C header: GdomeBoolean gdome_doc_hasAttributes(GdomeDocument*, GdomeException*)
 */
GdomeDocument.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_doc_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument addEventListener method
 * C header: void gdome_doc_addEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.addEventListener";
	CGDOME.call.gdome_doc_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument removeEventListener method
 * C header: void gdome_doc_removeEventListener(GdomeDocument*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeDocument.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.removeEventListener";
	CGDOME.call.gdome_doc_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument dispatchEvent method
 * C header: GdomeBoolean gdome_doc_dispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_doc_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeDocument subTreeDispatchEvent method
 * C header: void gdome_doc_subTreeDispatchEvent(GdomeDocument*, GdomeEvent*, GdomeException*)
 */
GdomeDocument.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_doc_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeDocument canAppend method
 * C header: GdomeBoolean gdome_doc_canAppend(GdomeDocument*, GdomeNode*, GdomeException*)
 */
GdomeDocument.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeDocument.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeDocument.prototype.canAppend";
	var ret = CGDOME.call.gdome_doc_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNode(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNode) {
			return arg1;
		} else if(arg1.toGdomeNode !== undefined) {
			return arg1.toGdomeNode();
		} else {
			throw "Could not convert object to GdomeNode!";
		}
	}
}

/** GdomeNode ref method
 * C header: void gdome_n_ref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ref";
	CGDOME.call.gdome_n_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode unref method
 * C header: void gdome_n_unref(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.unref";
	CGDOME.call.gdome_n_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode query_interface method
 * C header: gpointer gdome_n_query_interface(GdomeNode*, const char*, GdomeException*)
 */
GdomeNode.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.query_interface";
	var ret = CGDOME.call.gdome_n_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode nodeName method
 * C header: GdomeDOMString* gdome_n_nodeName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeName";
	var ret = CGDOME.call.gdome_n_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode nodeValue method
 * C header: GdomeDOMString* gdome_n_nodeValue(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeValue";
	var ret = CGDOME.call.gdome_n_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_nodeValue method
 * C header: void gdome_n_set_nodeValue(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_nodeValue";
	CGDOME.call.gdome_n_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode nodeType method
 * C header: unsigned short gdome_n_nodeType(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nodeType";
	var ret = CGDOME.call.gdome_n_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNode parentNode method
 * C header: GdomeNode* gdome_n_parentNode(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.parentNode";
	var ret = CGDOME.call.gdome_n_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode childNodes method
 * C header: GdomeNodeList* gdome_n_childNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.childNodes";
	var ret = CGDOME.call.gdome_n_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNode firstChild method
 * C header: GdomeNode* gdome_n_firstChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.firstChild";
	var ret = CGDOME.call.gdome_n_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode lastChild method
 * C header: GdomeNode* gdome_n_lastChild(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.lastChild";
	var ret = CGDOME.call.gdome_n_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode previousSibling method
 * C header: GdomeNode* gdome_n_previousSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.previousSibling";
	var ret = CGDOME.call.gdome_n_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode nextSibling method
 * C header: GdomeNode* gdome_n_nextSibling(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.nextSibling";
	var ret = CGDOME.call.gdome_n_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode attributes method
 * C header: GdomeNamedNodeMap* gdome_n_attributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.attributes";
	var ret = CGDOME.call.gdome_n_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNode ownerDocument method
 * C header: GdomeDocument* gdome_n_ownerDocument(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_n_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNode insertBefore method
 * C header: GdomeNode* gdome_n_insertBefore(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.insertBefore";
	var ret = CGDOME.call.gdome_n_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode replaceChild method
 * C header: GdomeNode* gdome_n_replaceChild(GdomeNode*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.replaceChild";
	var ret = CGDOME.call.gdome_n_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode removeChild method
 * C header: GdomeNode* gdome_n_removeChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeChild";
	var ret = CGDOME.call.gdome_n_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode appendChild method
 * C header: GdomeNode* gdome_n_appendChild(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.appendChild";
	var ret = CGDOME.call.gdome_n_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode hasChildNodes method
 * C header: GdomeBoolean gdome_n_hasChildNodes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_n_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode cloneNode method
 * C header: GdomeNode* gdome_n_cloneNode(GdomeNode*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.cloneNode";
	var ret = CGDOME.call.gdome_n_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNode normalize method
 * C header: void gdome_n_normalize(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.normalize";
	CGDOME.call.gdome_n_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode isSupported method
 * C header: GdomeBoolean gdome_n_isSupported(GdomeNode*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.isSupported";
	var ret = CGDOME.call.gdome_n_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode namespaceURI method
 * C header: GdomeDOMString* gdome_n_namespaceURI(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_n_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode prefix method
 * C header: GdomeDOMString* gdome_n_prefix(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.prefix";
	var ret = CGDOME.call.gdome_n_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode set_prefix method
 * C header: void gdome_n_set_prefix(GdomeNode*, GdomeDOMString*, GdomeException*)
 */
GdomeNode.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNode.prototype.set_prefix";
	CGDOME.call.gdome_n_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode localName method
 * C header: GdomeDOMString* gdome_n_localName(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.localName";
	var ret = CGDOME.call.gdome_n_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNode hasAttributes method
 * C header: GdomeBoolean gdome_n_hasAttributes(GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_n_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode addEventListener method
 * C header: void gdome_n_addEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.addEventListener";
	CGDOME.call.gdome_n_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode removeEventListener method
 * C header: void gdome_n_removeEventListener(GdomeNode*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNode.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.removeEventListener";
	CGDOME.call.gdome_n_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode dispatchEvent method
 * C header: GdomeBoolean gdome_n_dispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_n_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNode subTreeDispatchEvent method
 * C header: void gdome_n_subTreeDispatchEvent(GdomeNode*, GdomeEvent*, GdomeException*)
 */
GdomeNode.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_n_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNode canAppend method
 * C header: GdomeBoolean gdome_n_canAppend(GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNode.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNode.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNode.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNode.prototype.canAppend";
	var ret = CGDOME.call.gdome_n_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNodeList(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNodeList) {
			return arg1;
		} else if(arg1.toGdomeNodeList !== undefined) {
			return arg1.toGdomeNodeList();
		} else {
			throw "Could not convert object to GdomeNodeList!";
		}
	}
}

/** GdomeNodeList ref method
 * C header: void gdome_nl_ref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.ref";
	CGDOME.call.gdome_nl_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList unref method
 * C header: void gdome_nl_unref(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.unref";
	CGDOME.call.gdome_nl_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNodeList query_interface method
 * C header: gpointer gdome_nl_query_interface(GdomeNodeList*, const char*, GdomeException*)
 */
GdomeNodeList.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.query_interface";
	var ret = CGDOME.call.gdome_nl_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNodeList item method
 * C header: GdomeNode* gdome_nl_item(GdomeNodeList*, gulong, GdomeException*)
 */
GdomeNodeList.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.item";
	var ret = CGDOME.call.gdome_nl_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNodeList length method
 * C header: gulong gdome_nl_length(GdomeNodeList*, GdomeException*)
 */
GdomeNodeList.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNodeList.prototype.length";
	var ret = CGDOME.call.gdome_nl_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNamedNodeMap(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNamedNodeMap) {
			return arg1;
		} else if(arg1.toGdomeNamedNodeMap !== undefined) {
			return arg1.toGdomeNamedNodeMap();
		} else {
			throw "Could not convert object to GdomeNamedNodeMap!";
		}
	}
}

/** GdomeNamedNodeMap ref method
 * C header: void gdome_nnm_ref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.ref";
	CGDOME.call.gdome_nnm_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap unref method
 * C header: void gdome_nnm_unref(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.unref";
	CGDOME.call.gdome_nnm_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNamedNodeMap query_interface method
 * C header: gpointer gdome_nnm_query_interface(GdomeNamedNodeMap*, const char*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.query_interface";
	var ret = CGDOME.call.gdome_nnm_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItem method
 * C header: GdomeNode* gdome_nnm_getNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItem";
	var ret = CGDOME.call.gdome_nnm_getNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItem method
 * C header: GdomeNode* gdome_nnm_setNamedItem(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItem";
	var ret = CGDOME.call.gdome_nnm_setNamedItem(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItem method
 * C header: GdomeNode* gdome_nnm_removeNamedItem(GdomeNamedNodeMap*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItem = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItem";
	var ret = CGDOME.call.gdome_nnm_removeNamedItem(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap item method
 * C header: GdomeNode* gdome_nnm_item(GdomeNamedNodeMap*, gulong, GdomeException*)
 */
GdomeNamedNodeMap.prototype.item = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.item";
	var ret = CGDOME.call.gdome_nnm_item(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap length method
 * C header: gulong gdome_nnm_length(GdomeNamedNodeMap*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.length";
	var ret = CGDOME.call.gdome_nnm_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNamedNodeMap getNamedItemNS method
 * C header: GdomeNode* gdome_nnm_getNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.getNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.getNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_getNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap setNamedItemNS method
 * C header: GdomeNode* gdome_nnm_setNamedItemNS(GdomeNamedNodeMap*, GdomeNode*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.setNamedItemNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.setNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_setNamedItemNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNamedNodeMap removeNamedItemNS method
 * C header: GdomeNode* gdome_nnm_removeNamedItemNS(GdomeNamedNodeMap*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNamedNodeMap.prototype.removeNamedItemNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNamedNodeMap.prototype.removeNamedItemNS";
	var ret = CGDOME.call.gdome_nnm_removeNamedItemNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCharacterData(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCharacterData) {
			return arg1;
		} else if(arg1.toGdomeCharacterData !== undefined) {
			return arg1.toGdomeCharacterData();
		} else {
			throw "Could not convert object to GdomeCharacterData!";
		}
	}
}

/** GdomeCharacterData data method
 * C header: GdomeDOMString* gdome_cd_data(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.data";
	var ret = CGDOME.call.gdome_cd_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_data method
 * C header: void gdome_cd_set_data(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_data";
	CGDOME.call.gdome_cd_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData length method
 * C header: gulong gdome_cd_length(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.length";
	var ret = CGDOME.call.gdome_cd_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData substringData method
 * C header: GdomeDOMString* gdome_cd_substringData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.substringData";
	var ret = CGDOME.call.gdome_cd_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData appendData method
 * C header: void gdome_cd_appendData(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendData";
	CGDOME.call.gdome_cd_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData insertData method
 * C header: void gdome_cd_insertData(GdomeCharacterData*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertData";
	CGDOME.call.gdome_cd_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData deleteData method
 * C header: void gdome_cd_deleteData(GdomeCharacterData*, gulong, gulong, GdomeException*)
 */
GdomeCharacterData.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.deleteData";
	CGDOME.call.gdome_cd_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData replaceData method
 * C header: void gdome_cd_replaceData(GdomeCharacterData*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceData";
	CGDOME.call.gdome_cd_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData ref method
 * C header: void gdome_cd_ref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ref";
	CGDOME.call.gdome_cd_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData unref method
 * C header: void gdome_cd_unref(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.unref";
	CGDOME.call.gdome_cd_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData query_interface method
 * C header: gpointer gdome_cd_query_interface(GdomeCharacterData*, const char*, GdomeException*)
 */
GdomeCharacterData.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.query_interface";
	var ret = CGDOME.call.gdome_cd_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData nodeName method
 * C header: GdomeDOMString* gdome_cd_nodeName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeName";
	var ret = CGDOME.call.gdome_cd_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData nodeValue method
 * C header: GdomeDOMString* gdome_cd_nodeValue(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cd_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_nodeValue method
 * C header: void gdome_cd_set_nodeValue(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_nodeValue";
	CGDOME.call.gdome_cd_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData nodeType method
 * C header: unsigned short gdome_cd_nodeType(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nodeType";
	var ret = CGDOME.call.gdome_cd_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCharacterData parentNode method
 * C header: GdomeNode* gdome_cd_parentNode(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.parentNode";
	var ret = CGDOME.call.gdome_cd_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData childNodes method
 * C header: GdomeNodeList* gdome_cd_childNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.childNodes";
	var ret = CGDOME.call.gdome_cd_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCharacterData firstChild method
 * C header: GdomeNode* gdome_cd_firstChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.firstChild";
	var ret = CGDOME.call.gdome_cd_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData lastChild method
 * C header: GdomeNode* gdome_cd_lastChild(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.lastChild";
	var ret = CGDOME.call.gdome_cd_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData previousSibling method
 * C header: GdomeNode* gdome_cd_previousSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cd_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData nextSibling method
 * C header: GdomeNode* gdome_cd_nextSibling(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cd_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData attributes method
 * C header: GdomeNamedNodeMap* gdome_cd_attributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.attributes";
	var ret = CGDOME.call.gdome_cd_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCharacterData ownerDocument method
 * C header: GdomeDocument* gdome_cd_ownerDocument(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cd_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCharacterData insertBefore method
 * C header: GdomeNode* gdome_cd_insertBefore(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cd_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData replaceChild method
 * C header: GdomeNode* gdome_cd_replaceChild(GdomeCharacterData*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cd_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData removeChild method
 * C header: GdomeNode* gdome_cd_removeChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeChild";
	var ret = CGDOME.call.gdome_cd_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData appendChild method
 * C header: GdomeNode* gdome_cd_appendChild(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.appendChild";
	var ret = CGDOME.call.gdome_cd_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData hasChildNodes method
 * C header: GdomeBoolean gdome_cd_hasChildNodes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cd_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData cloneNode method
 * C header: GdomeNode* gdome_cd_cloneNode(GdomeCharacterData*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cd_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCharacterData normalize method
 * C header: void gdome_cd_normalize(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.normalize";
	CGDOME.call.gdome_cd_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData isSupported method
 * C header: GdomeBoolean gdome_cd_isSupported(GdomeCharacterData*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.isSupported";
	var ret = CGDOME.call.gdome_cd_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData namespaceURI method
 * C header: GdomeDOMString* gdome_cd_namespaceURI(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cd_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData prefix method
 * C header: GdomeDOMString* gdome_cd_prefix(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.prefix";
	var ret = CGDOME.call.gdome_cd_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData set_prefix method
 * C header: void gdome_cd_set_prefix(GdomeCharacterData*, GdomeDOMString*, GdomeException*)
 */
GdomeCharacterData.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.set_prefix";
	CGDOME.call.gdome_cd_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData localName method
 * C header: GdomeDOMString* gdome_cd_localName(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.localName";
	var ret = CGDOME.call.gdome_cd_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCharacterData hasAttributes method
 * C header: GdomeBoolean gdome_cd_hasAttributes(GdomeCharacterData*, GdomeException*)
 */
GdomeCharacterData.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cd_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData addEventListener method
 * C header: void gdome_cd_addEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.addEventListener";
	CGDOME.call.gdome_cd_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData removeEventListener method
 * C header: void gdome_cd_removeEventListener(GdomeCharacterData*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCharacterData.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.removeEventListener";
	CGDOME.call.gdome_cd_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData dispatchEvent method
 * C header: GdomeBoolean gdome_cd_dispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cd_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCharacterData subTreeDispatchEvent method
 * C header: void gdome_cd_subTreeDispatchEvent(GdomeCharacterData*, GdomeEvent*, GdomeException*)
 */
GdomeCharacterData.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cd_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCharacterData canAppend method
 * C header: GdomeBoolean gdome_cd_canAppend(GdomeCharacterData*, GdomeNode*, GdomeException*)
 */
GdomeCharacterData.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCharacterData.prototype.canAppend";
	var ret = CGDOME.call.gdome_cd_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeAttr(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeAttr) {
			return arg1;
		} else if(arg1.toGdomeAttr !== undefined) {
			return arg1.toGdomeAttr();
		} else {
			throw "Could not convert object to GdomeAttr!";
		}
	}
}

/** GdomeAttr ref method
 * C header: void gdome_a_ref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ref";
	CGDOME.call.gdome_a_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr unref method
 * C header: void gdome_a_unref(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.unref";
	CGDOME.call.gdome_a_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr query_interface method
 * C header: gpointer gdome_a_query_interface(GdomeAttr*, const char*, GdomeException*)
 */
GdomeAttr.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.query_interface";
	var ret = CGDOME.call.gdome_a_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr name method
 * C header: GdomeDOMString* gdome_a_name(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.name = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.name";
	var ret = CGDOME.call.gdome_a_name(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr ownerElement method
 * C header: GdomeElement* gdome_a_ownerElement(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerElement = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerElement";
	var ret = CGDOME.call.gdome_a_ownerElement(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeElement(ret, this.di); }
}

/** GdomeAttr specified method
 * C header: GdomeBoolean gdome_a_specified(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.specified = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.specified";
	var ret = CGDOME.call.gdome_a_specified(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr value method
 * C header: GdomeDOMString* gdome_a_value(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.value = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.value";
	var ret = CGDOME.call.gdome_a_value(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_value method
 * C header: void gdome_a_set_value(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_value = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_value: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_value";
	CGDOME.call.gdome_a_set_value(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeName method
 * C header: GdomeDOMString* gdome_a_nodeName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeName";
	var ret = CGDOME.call.gdome_a_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr nodeValue method
 * C header: GdomeDOMString* gdome_a_nodeValue(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeValue";
	var ret = CGDOME.call.gdome_a_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_nodeValue method
 * C header: void gdome_a_set_nodeValue(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_nodeValue";
	CGDOME.call.gdome_a_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr nodeType method
 * C header: unsigned short gdome_a_nodeType(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nodeType";
	var ret = CGDOME.call.gdome_a_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeAttr parentNode method
 * C header: GdomeNode* gdome_a_parentNode(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.parentNode";
	var ret = CGDOME.call.gdome_a_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr childNodes method
 * C header: GdomeNodeList* gdome_a_childNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.childNodes";
	var ret = CGDOME.call.gdome_a_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeAttr firstChild method
 * C header: GdomeNode* gdome_a_firstChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.firstChild";
	var ret = CGDOME.call.gdome_a_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr lastChild method
 * C header: GdomeNode* gdome_a_lastChild(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.lastChild";
	var ret = CGDOME.call.gdome_a_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr previousSibling method
 * C header: GdomeNode* gdome_a_previousSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.previousSibling";
	var ret = CGDOME.call.gdome_a_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr nextSibling method
 * C header: GdomeNode* gdome_a_nextSibling(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.nextSibling";
	var ret = CGDOME.call.gdome_a_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr attributes method
 * C header: GdomeNamedNodeMap* gdome_a_attributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.attributes";
	var ret = CGDOME.call.gdome_a_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeAttr ownerDocument method
 * C header: GdomeDocument* gdome_a_ownerDocument(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_a_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeAttr insertBefore method
 * C header: GdomeNode* gdome_a_insertBefore(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.insertBefore";
	var ret = CGDOME.call.gdome_a_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr replaceChild method
 * C header: GdomeNode* gdome_a_replaceChild(GdomeAttr*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.replaceChild";
	var ret = CGDOME.call.gdome_a_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr removeChild method
 * C header: GdomeNode* gdome_a_removeChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeChild";
	var ret = CGDOME.call.gdome_a_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr appendChild method
 * C header: GdomeNode* gdome_a_appendChild(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.appendChild";
	var ret = CGDOME.call.gdome_a_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr hasChildNodes method
 * C header: GdomeBoolean gdome_a_hasChildNodes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_a_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr cloneNode method
 * C header: GdomeNode* gdome_a_cloneNode(GdomeAttr*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.cloneNode";
	var ret = CGDOME.call.gdome_a_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeAttr normalize method
 * C header: void gdome_a_normalize(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.normalize";
	CGDOME.call.gdome_a_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr isSupported method
 * C header: GdomeBoolean gdome_a_isSupported(GdomeAttr*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.isSupported";
	var ret = CGDOME.call.gdome_a_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr namespaceURI method
 * C header: GdomeDOMString* gdome_a_namespaceURI(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_a_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr prefix method
 * C header: GdomeDOMString* gdome_a_prefix(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.prefix";
	var ret = CGDOME.call.gdome_a_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr set_prefix method
 * C header: void gdome_a_set_prefix(GdomeAttr*, GdomeDOMString*, GdomeException*)
 */
GdomeAttr.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeAttr.prototype.set_prefix";
	CGDOME.call.gdome_a_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr localName method
 * C header: GdomeDOMString* gdome_a_localName(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.localName";
	var ret = CGDOME.call.gdome_a_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeAttr hasAttributes method
 * C header: GdomeBoolean gdome_a_hasAttributes(GdomeAttr*, GdomeException*)
 */
GdomeAttr.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_a_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr addEventListener method
 * C header: void gdome_a_addEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.addEventListener";
	CGDOME.call.gdome_a_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr removeEventListener method
 * C header: void gdome_a_removeEventListener(GdomeAttr*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeAttr.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.removeEventListener";
	CGDOME.call.gdome_a_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr dispatchEvent method
 * C header: GdomeBoolean gdome_a_dispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_a_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeAttr subTreeDispatchEvent method
 * C header: void gdome_a_subTreeDispatchEvent(GdomeAttr*, GdomeEvent*, GdomeException*)
 */
GdomeAttr.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_a_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeAttr canAppend method
 * C header: GdomeBoolean gdome_a_canAppend(GdomeAttr*, GdomeNode*, GdomeException*)
 */
GdomeAttr.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeAttr.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeAttr.prototype.canAppend";
	var ret = CGDOME.call.gdome_a_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeElement(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeElement) {
			return arg1;
		} else if(arg1.toGdomeElement !== undefined) {
			return arg1.toGdomeElement();
		} else {
			throw "Could not convert object to GdomeElement!";
		}
	}
}

/** GdomeElement tagName method
 * C header: GdomeDOMString* gdome_el_tagName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.tagName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.tagName";
	var ret = CGDOME.call.gdome_el_tagName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement getAttribute method
 * C header: GdomeDOMString* gdome_el_getAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttribute";
	var ret = CGDOME.call.gdome_el_getAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttribute method
 * C header: void gdome_el_setAttribute(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttribute = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttribute: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttribute";
	CGDOME.call.gdome_el_setAttribute(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttribute method
 * C header: void gdome_el_removeAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttribute";
	CGDOME.call.gdome_el_removeAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNode method
 * C header: GdomeAttr* gdome_el_getAttributeNode(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNode";
	var ret = CGDOME.call.gdome_el_getAttributeNode(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNode method
 * C header: GdomeAttr* gdome_el_setAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNode";
	var ret = CGDOME.call.gdome_el_setAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement removeAttributeNode method
 * C header: GdomeAttr* gdome_el_removeAttributeNode(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNode";
	var ret = CGDOME.call.gdome_el_removeAttributeNode(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagName method
 * C header: GdomeNodeList* gdome_el_getElementsByTagName(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagName = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagName";
	var ret = CGDOME.call.gdome_el_getElementsByTagName(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement getAttributeNS method
 * C header: GdomeDOMString* gdome_el_getAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement setAttributeNS method
 * C header: void gdome_el_setAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNS = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNS";
	CGDOME.call.gdome_el_setAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, gstr2.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeAttributeNS method
 * C header: void gdome_el_removeAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.removeAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeAttributeNS";
	CGDOME.call.gdome_el_removeAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement getAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_getAttributeNodeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getAttributeNodeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_getAttributeNodeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement setAttributeNodeNS method
 * C header: GdomeAttr* gdome_el_setAttributeNodeNS(GdomeElement*, GdomeAttr*, GdomeException*)
 */
GdomeElement.prototype.setAttributeNodeNS = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeAttr)) {
		GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: argument not instance of GdomeAttr";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.setAttributeNodeNS";
	var ret = CGDOME.call.gdome_el_setAttributeNodeNS(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeAttr(ret, this.di); }
}

/** GdomeElement getElementsByTagNameNS method
 * C header: GdomeNodeList* gdome_el_getElementsByTagNameNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.getElementsByTagNameNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.getElementsByTagNameNS";
	var ret = CGDOME.call.gdome_el_getElementsByTagNameNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement hasAttribute method
 * C header: GdomeBoolean gdome_el_hasAttribute(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttribute = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttribute: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttribute";
	var ret = CGDOME.call.gdome_el_hasAttribute(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement hasAttributeNS method
 * C header: GdomeBoolean gdome_el_hasAttributeNS(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.hasAttributeNS = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributeNS";
	var ret = CGDOME.call.gdome_el_hasAttributeNS(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement ref method
 * C header: void gdome_el_ref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ref";
	CGDOME.call.gdome_el_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement unref method
 * C header: void gdome_el_unref(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.unref";
	CGDOME.call.gdome_el_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement query_interface method
 * C header: gpointer gdome_el_query_interface(GdomeElement*, const char*, GdomeException*)
 */
GdomeElement.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.query_interface";
	var ret = CGDOME.call.gdome_el_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement nodeName method
 * C header: GdomeDOMString* gdome_el_nodeName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeName";
	var ret = CGDOME.call.gdome_el_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement nodeValue method
 * C header: GdomeDOMString* gdome_el_nodeValue(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeValue";
	var ret = CGDOME.call.gdome_el_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_nodeValue method
 * C header: void gdome_el_set_nodeValue(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_nodeValue";
	CGDOME.call.gdome_el_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement nodeType method
 * C header: unsigned short gdome_el_nodeType(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nodeType";
	var ret = CGDOME.call.gdome_el_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeElement parentNode method
 * C header: GdomeNode* gdome_el_parentNode(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.parentNode";
	var ret = CGDOME.call.gdome_el_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement childNodes method
 * C header: GdomeNodeList* gdome_el_childNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.childNodes";
	var ret = CGDOME.call.gdome_el_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeElement firstChild method
 * C header: GdomeNode* gdome_el_firstChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.firstChild";
	var ret = CGDOME.call.gdome_el_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement lastChild method
 * C header: GdomeNode* gdome_el_lastChild(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.lastChild";
	var ret = CGDOME.call.gdome_el_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement previousSibling method
 * C header: GdomeNode* gdome_el_previousSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.previousSibling";
	var ret = CGDOME.call.gdome_el_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement nextSibling method
 * C header: GdomeNode* gdome_el_nextSibling(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.nextSibling";
	var ret = CGDOME.call.gdome_el_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement attributes method
 * C header: GdomeNamedNodeMap* gdome_el_attributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.attributes";
	var ret = CGDOME.call.gdome_el_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeElement ownerDocument method
 * C header: GdomeDocument* gdome_el_ownerDocument(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_el_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeElement insertBefore method
 * C header: GdomeNode* gdome_el_insertBefore(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.insertBefore";
	var ret = CGDOME.call.gdome_el_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement replaceChild method
 * C header: GdomeNode* gdome_el_replaceChild(GdomeElement*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.replaceChild";
	var ret = CGDOME.call.gdome_el_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement removeChild method
 * C header: GdomeNode* gdome_el_removeChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeChild";
	var ret = CGDOME.call.gdome_el_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement appendChild method
 * C header: GdomeNode* gdome_el_appendChild(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.appendChild";
	var ret = CGDOME.call.gdome_el_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement hasChildNodes method
 * C header: GdomeBoolean gdome_el_hasChildNodes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_el_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement cloneNode method
 * C header: GdomeNode* gdome_el_cloneNode(GdomeElement*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.cloneNode";
	var ret = CGDOME.call.gdome_el_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeElement normalize method
 * C header: void gdome_el_normalize(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.normalize";
	CGDOME.call.gdome_el_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement isSupported method
 * C header: GdomeBoolean gdome_el_isSupported(GdomeElement*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.isSupported";
	var ret = CGDOME.call.gdome_el_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement namespaceURI method
 * C header: GdomeDOMString* gdome_el_namespaceURI(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_el_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement prefix method
 * C header: GdomeDOMString* gdome_el_prefix(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.prefix";
	var ret = CGDOME.call.gdome_el_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement set_prefix method
 * C header: void gdome_el_set_prefix(GdomeElement*, GdomeDOMString*, GdomeException*)
 */
GdomeElement.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeElement.prototype.set_prefix";
	CGDOME.call.gdome_el_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement localName method
 * C header: GdomeDOMString* gdome_el_localName(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.localName";
	var ret = CGDOME.call.gdome_el_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeElement hasAttributes method
 * C header: GdomeBoolean gdome_el_hasAttributes(GdomeElement*, GdomeException*)
 */
GdomeElement.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_el_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement addEventListener method
 * C header: void gdome_el_addEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.addEventListener";
	CGDOME.call.gdome_el_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement removeEventListener method
 * C header: void gdome_el_removeEventListener(GdomeElement*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeElement.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.removeEventListener";
	CGDOME.call.gdome_el_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement dispatchEvent method
 * C header: GdomeBoolean gdome_el_dispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_el_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeElement subTreeDispatchEvent method
 * C header: void gdome_el_subTreeDispatchEvent(GdomeElement*, GdomeEvent*, GdomeException*)
 */
GdomeElement.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_el_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeElement canAppend method
 * C header: GdomeBoolean gdome_el_canAppend(GdomeElement*, GdomeNode*, GdomeException*)
 */
GdomeElement.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeElement.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeElement.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeElement.prototype.canAppend";
	var ret = CGDOME.call.gdome_el_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeText(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeText) {
			return arg1;
		} else if(arg1.toGdomeText !== undefined) {
			return arg1.toGdomeText();
		} else {
			throw "Could not convert object to GdomeText!";
		}
	}
}

/** GdomeText splitText method
 * C header: GdomeText* gdome_t_splitText(GdomeText*, gulong, GdomeException*)
 */
GdomeText.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.splitText";
	var ret = CGDOME.call.gdome_t_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeText data method
 * C header: GdomeDOMString* gdome_t_data(GdomeText*, GdomeException*)
 */
GdomeText.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.data";
	var ret = CGDOME.call.gdome_t_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_data method
 * C header: void gdome_t_set_data(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_data";
	CGDOME.call.gdome_t_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText length method
 * C header: gulong gdome_t_length(GdomeText*, GdomeException*)
 */
GdomeText.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.length";
	var ret = CGDOME.call.gdome_t_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText substringData method
 * C header: GdomeDOMString* gdome_t_substringData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.substringData";
	var ret = CGDOME.call.gdome_t_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText appendData method
 * C header: void gdome_t_appendData(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.appendData";
	CGDOME.call.gdome_t_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText insertData method
 * C header: void gdome_t_insertData(GdomeText*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.insertData";
	CGDOME.call.gdome_t_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText deleteData method
 * C header: void gdome_t_deleteData(GdomeText*, gulong, gulong, GdomeException*)
 */
GdomeText.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.deleteData";
	CGDOME.call.gdome_t_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText replaceData method
 * C header: void gdome_t_replaceData(GdomeText*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceData";
	CGDOME.call.gdome_t_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText ref method
 * C header: void gdome_t_ref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ref";
	CGDOME.call.gdome_t_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText unref method
 * C header: void gdome_t_unref(GdomeText*, GdomeException*)
 */
GdomeText.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.unref";
	CGDOME.call.gdome_t_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText query_interface method
 * C header: gpointer gdome_t_query_interface(GdomeText*, const char*, GdomeException*)
 */
GdomeText.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.query_interface";
	var ret = CGDOME.call.gdome_t_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText nodeName method
 * C header: GdomeDOMString* gdome_t_nodeName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeName";
	var ret = CGDOME.call.gdome_t_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText nodeValue method
 * C header: GdomeDOMString* gdome_t_nodeValue(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeValue";
	var ret = CGDOME.call.gdome_t_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_nodeValue method
 * C header: void gdome_t_set_nodeValue(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_nodeValue";
	CGDOME.call.gdome_t_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText nodeType method
 * C header: unsigned short gdome_t_nodeType(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nodeType";
	var ret = CGDOME.call.gdome_t_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeText parentNode method
 * C header: GdomeNode* gdome_t_parentNode(GdomeText*, GdomeException*)
 */
GdomeText.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.parentNode";
	var ret = CGDOME.call.gdome_t_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText childNodes method
 * C header: GdomeNodeList* gdome_t_childNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.childNodes";
	var ret = CGDOME.call.gdome_t_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeText firstChild method
 * C header: GdomeNode* gdome_t_firstChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.firstChild";
	var ret = CGDOME.call.gdome_t_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText lastChild method
 * C header: GdomeNode* gdome_t_lastChild(GdomeText*, GdomeException*)
 */
GdomeText.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.lastChild";
	var ret = CGDOME.call.gdome_t_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText previousSibling method
 * C header: GdomeNode* gdome_t_previousSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.previousSibling";
	var ret = CGDOME.call.gdome_t_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText nextSibling method
 * C header: GdomeNode* gdome_t_nextSibling(GdomeText*, GdomeException*)
 */
GdomeText.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.nextSibling";
	var ret = CGDOME.call.gdome_t_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText attributes method
 * C header: GdomeNamedNodeMap* gdome_t_attributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.attributes";
	var ret = CGDOME.call.gdome_t_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeText ownerDocument method
 * C header: GdomeDocument* gdome_t_ownerDocument(GdomeText*, GdomeException*)
 */
GdomeText.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_t_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeText insertBefore method
 * C header: GdomeNode* gdome_t_insertBefore(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.insertBefore";
	var ret = CGDOME.call.gdome_t_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText replaceChild method
 * C header: GdomeNode* gdome_t_replaceChild(GdomeText*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.replaceChild";
	var ret = CGDOME.call.gdome_t_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText removeChild method
 * C header: GdomeNode* gdome_t_removeChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeChild";
	var ret = CGDOME.call.gdome_t_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText appendChild method
 * C header: GdomeNode* gdome_t_appendChild(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.appendChild";
	var ret = CGDOME.call.gdome_t_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText hasChildNodes method
 * C header: GdomeBoolean gdome_t_hasChildNodes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_t_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText cloneNode method
 * C header: GdomeNode* gdome_t_cloneNode(GdomeText*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.cloneNode";
	var ret = CGDOME.call.gdome_t_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeText normalize method
 * C header: void gdome_t_normalize(GdomeText*, GdomeException*)
 */
GdomeText.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.normalize";
	CGDOME.call.gdome_t_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText isSupported method
 * C header: GdomeBoolean gdome_t_isSupported(GdomeText*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.isSupported";
	var ret = CGDOME.call.gdome_t_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText namespaceURI method
 * C header: GdomeDOMString* gdome_t_namespaceURI(GdomeText*, GdomeException*)
 */
GdomeText.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_t_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText prefix method
 * C header: GdomeDOMString* gdome_t_prefix(GdomeText*, GdomeException*)
 */
GdomeText.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.prefix";
	var ret = CGDOME.call.gdome_t_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText set_prefix method
 * C header: void gdome_t_set_prefix(GdomeText*, GdomeDOMString*, GdomeException*)
 */
GdomeText.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeText.prototype.set_prefix";
	CGDOME.call.gdome_t_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText localName method
 * C header: GdomeDOMString* gdome_t_localName(GdomeText*, GdomeException*)
 */
GdomeText.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.localName";
	var ret = CGDOME.call.gdome_t_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeText hasAttributes method
 * C header: GdomeBoolean gdome_t_hasAttributes(GdomeText*, GdomeException*)
 */
GdomeText.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_t_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText addEventListener method
 * C header: void gdome_t_addEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.addEventListener";
	CGDOME.call.gdome_t_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText removeEventListener method
 * C header: void gdome_t_removeEventListener(GdomeText*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeText.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeText.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.removeEventListener";
	CGDOME.call.gdome_t_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText dispatchEvent method
 * C header: GdomeBoolean gdome_t_dispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_t_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeText subTreeDispatchEvent method
 * C header: void gdome_t_subTreeDispatchEvent(GdomeText*, GdomeEvent*, GdomeException*)
 */
GdomeText.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_t_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeText canAppend method
 * C header: GdomeBoolean gdome_t_canAppend(GdomeText*, GdomeNode*, GdomeException*)
 */
GdomeText.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeText.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeText.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeText.prototype.canAppend";
	var ret = CGDOME.call.gdome_t_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeComment(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeComment) {
			return arg1;
		} else if(arg1.toGdomeComment !== undefined) {
			return arg1.toGdomeComment();
		} else {
			throw "Could not convert object to GdomeComment!";
		}
	}
}

/** GdomeComment data method
 * C header: GdomeDOMString* gdome_c_data(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.data";
	var ret = CGDOME.call.gdome_c_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_data method
 * C header: void gdome_c_set_data(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_data";
	CGDOME.call.gdome_c_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment length method
 * C header: gulong gdome_c_length(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.length";
	var ret = CGDOME.call.gdome_c_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment substringData method
 * C header: GdomeDOMString* gdome_c_substringData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.substringData";
	var ret = CGDOME.call.gdome_c_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment appendData method
 * C header: void gdome_c_appendData(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendData";
	CGDOME.call.gdome_c_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment insertData method
 * C header: void gdome_c_insertData(GdomeComment*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertData";
	CGDOME.call.gdome_c_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment deleteData method
 * C header: void gdome_c_deleteData(GdomeComment*, gulong, gulong, GdomeException*)
 */
GdomeComment.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.deleteData";
	CGDOME.call.gdome_c_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment replaceData method
 * C header: void gdome_c_replaceData(GdomeComment*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceData";
	CGDOME.call.gdome_c_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment ref method
 * C header: void gdome_c_ref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ref";
	CGDOME.call.gdome_c_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment unref method
 * C header: void gdome_c_unref(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.unref";
	CGDOME.call.gdome_c_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment query_interface method
 * C header: gpointer gdome_c_query_interface(GdomeComment*, const char*, GdomeException*)
 */
GdomeComment.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.query_interface";
	var ret = CGDOME.call.gdome_c_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment nodeName method
 * C header: GdomeDOMString* gdome_c_nodeName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeName";
	var ret = CGDOME.call.gdome_c_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment nodeValue method
 * C header: GdomeDOMString* gdome_c_nodeValue(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeValue";
	var ret = CGDOME.call.gdome_c_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_nodeValue method
 * C header: void gdome_c_set_nodeValue(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_nodeValue";
	CGDOME.call.gdome_c_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment nodeType method
 * C header: unsigned short gdome_c_nodeType(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nodeType";
	var ret = CGDOME.call.gdome_c_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeComment parentNode method
 * C header: GdomeNode* gdome_c_parentNode(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.parentNode";
	var ret = CGDOME.call.gdome_c_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment childNodes method
 * C header: GdomeNodeList* gdome_c_childNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.childNodes";
	var ret = CGDOME.call.gdome_c_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeComment firstChild method
 * C header: GdomeNode* gdome_c_firstChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.firstChild";
	var ret = CGDOME.call.gdome_c_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment lastChild method
 * C header: GdomeNode* gdome_c_lastChild(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.lastChild";
	var ret = CGDOME.call.gdome_c_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment previousSibling method
 * C header: GdomeNode* gdome_c_previousSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.previousSibling";
	var ret = CGDOME.call.gdome_c_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment nextSibling method
 * C header: GdomeNode* gdome_c_nextSibling(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.nextSibling";
	var ret = CGDOME.call.gdome_c_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment attributes method
 * C header: GdomeNamedNodeMap* gdome_c_attributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.attributes";
	var ret = CGDOME.call.gdome_c_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeComment ownerDocument method
 * C header: GdomeDocument* gdome_c_ownerDocument(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_c_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeComment insertBefore method
 * C header: GdomeNode* gdome_c_insertBefore(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.insertBefore";
	var ret = CGDOME.call.gdome_c_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment replaceChild method
 * C header: GdomeNode* gdome_c_replaceChild(GdomeComment*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.replaceChild";
	var ret = CGDOME.call.gdome_c_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment removeChild method
 * C header: GdomeNode* gdome_c_removeChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeChild";
	var ret = CGDOME.call.gdome_c_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment appendChild method
 * C header: GdomeNode* gdome_c_appendChild(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.appendChild";
	var ret = CGDOME.call.gdome_c_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment hasChildNodes method
 * C header: GdomeBoolean gdome_c_hasChildNodes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_c_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment cloneNode method
 * C header: GdomeNode* gdome_c_cloneNode(GdomeComment*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.cloneNode";
	var ret = CGDOME.call.gdome_c_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeComment normalize method
 * C header: void gdome_c_normalize(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.normalize";
	CGDOME.call.gdome_c_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment isSupported method
 * C header: GdomeBoolean gdome_c_isSupported(GdomeComment*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.isSupported";
	var ret = CGDOME.call.gdome_c_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment namespaceURI method
 * C header: GdomeDOMString* gdome_c_namespaceURI(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_c_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment prefix method
 * C header: GdomeDOMString* gdome_c_prefix(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.prefix";
	var ret = CGDOME.call.gdome_c_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment set_prefix method
 * C header: void gdome_c_set_prefix(GdomeComment*, GdomeDOMString*, GdomeException*)
 */
GdomeComment.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeComment.prototype.set_prefix";
	CGDOME.call.gdome_c_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment localName method
 * C header: GdomeDOMString* gdome_c_localName(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.localName";
	var ret = CGDOME.call.gdome_c_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeComment hasAttributes method
 * C header: GdomeBoolean gdome_c_hasAttributes(GdomeComment*, GdomeException*)
 */
GdomeComment.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_c_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment addEventListener method
 * C header: void gdome_c_addEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.addEventListener";
	CGDOME.call.gdome_c_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment removeEventListener method
 * C header: void gdome_c_removeEventListener(GdomeComment*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeComment.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.removeEventListener";
	CGDOME.call.gdome_c_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment dispatchEvent method
 * C header: GdomeBoolean gdome_c_dispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_c_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeComment subTreeDispatchEvent method
 * C header: void gdome_c_subTreeDispatchEvent(GdomeComment*, GdomeEvent*, GdomeException*)
 */
GdomeComment.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_c_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeComment canAppend method
 * C header: GdomeBoolean gdome_c_canAppend(GdomeComment*, GdomeNode*, GdomeException*)
 */
GdomeComment.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeComment.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeComment.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeComment.prototype.canAppend";
	var ret = CGDOME.call.gdome_c_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeCDATASection(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeCDATASection) {
			return arg1;
		} else if(arg1.toGdomeCDATASection !== undefined) {
			return arg1.toGdomeCDATASection();
		} else {
			throw "Could not convert object to GdomeCDATASection!";
		}
	}
}

/** GdomeCDATASection splitText method
 * C header: GdomeText* gdome_cds_splitText(GdomeCDATASection*, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.splitText = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.splitText";
	var ret = CGDOME.call.gdome_cds_splitText(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeText(ret, this.di); }
}

/** GdomeCDATASection data method
 * C header: GdomeDOMString* gdome_cds_data(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.data";
	var ret = CGDOME.call.gdome_cds_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_data method
 * C header: void gdome_cds_set_data(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_data";
	CGDOME.call.gdome_cds_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection length method
 * C header: gulong gdome_cds_length(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.length = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.length";
	var ret = CGDOME.call.gdome_cds_length(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection substringData method
 * C header: GdomeDOMString* gdome_cds_substringData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.substringData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.substringData";
	var ret = CGDOME.call.gdome_cds_substringData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection appendData method
 * C header: void gdome_cds_appendData(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.appendData = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendData: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendData";
	CGDOME.call.gdome_cds_appendData(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection insertData method
 * C header: void gdome_cds_insertData(GdomeCDATASection*, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.insertData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertData: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertData";
	CGDOME.call.gdome_cds_insertData(this.pointer, arg0, gstr1.pointer, GDOME.exception.pointer);
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection deleteData method
 * C header: void gdome_cds_deleteData(GdomeCDATASection*, gulong, gulong, GdomeException*)
 */
GdomeCDATASection.prototype.deleteData = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.deleteData";
	CGDOME.call.gdome_cds_deleteData(this.pointer, arg0, arg1, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection replaceData method
 * C header: void gdome_cds_replaceData(GdomeCDATASection*, gulong, gulong, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceData = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr2;
	if(arg2 instanceof GdomeDOMString) {
		gstr2 = arg2;
		if(gstr2.pointer.address !== 0) { gstr2.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData: GdomeDOMString.mkref";
		gstr2 = GdomeDOMString.mkref(String(arg2));
		if(gstr2.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceData";
	CGDOME.call.gdome_cds_replaceData(this.pointer, arg0, arg1, gstr2.pointer, GDOME.exception.pointer);
	if(gstr2.pointer.address !== 0) gstr2.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection ref method
 * C header: void gdome_cds_ref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ref";
	CGDOME.call.gdome_cds_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection unref method
 * C header: void gdome_cds_unref(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.unref";
	CGDOME.call.gdome_cds_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection query_interface method
 * C header: gpointer gdome_cds_query_interface(GdomeCDATASection*, const char*, GdomeException*)
 */
GdomeCDATASection.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.query_interface";
	var ret = CGDOME.call.gdome_cds_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection nodeName method
 * C header: GdomeDOMString* gdome_cds_nodeName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeName";
	var ret = CGDOME.call.gdome_cds_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection nodeValue method
 * C header: GdomeDOMString* gdome_cds_nodeValue(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeValue";
	var ret = CGDOME.call.gdome_cds_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_nodeValue method
 * C header: void gdome_cds_set_nodeValue(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_nodeValue";
	CGDOME.call.gdome_cds_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection nodeType method
 * C header: unsigned short gdome_cds_nodeType(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nodeType";
	var ret = CGDOME.call.gdome_cds_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeCDATASection parentNode method
 * C header: GdomeNode* gdome_cds_parentNode(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.parentNode";
	var ret = CGDOME.call.gdome_cds_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection childNodes method
 * C header: GdomeNodeList* gdome_cds_childNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.childNodes";
	var ret = CGDOME.call.gdome_cds_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeCDATASection firstChild method
 * C header: GdomeNode* gdome_cds_firstChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.firstChild";
	var ret = CGDOME.call.gdome_cds_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection lastChild method
 * C header: GdomeNode* gdome_cds_lastChild(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.lastChild";
	var ret = CGDOME.call.gdome_cds_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection previousSibling method
 * C header: GdomeNode* gdome_cds_previousSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.previousSibling";
	var ret = CGDOME.call.gdome_cds_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection nextSibling method
 * C header: GdomeNode* gdome_cds_nextSibling(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.nextSibling";
	var ret = CGDOME.call.gdome_cds_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection attributes method
 * C header: GdomeNamedNodeMap* gdome_cds_attributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.attributes";
	var ret = CGDOME.call.gdome_cds_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeCDATASection ownerDocument method
 * C header: GdomeDocument* gdome_cds_ownerDocument(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_cds_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeCDATASection insertBefore method
 * C header: GdomeNode* gdome_cds_insertBefore(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.insertBefore";
	var ret = CGDOME.call.gdome_cds_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection replaceChild method
 * C header: GdomeNode* gdome_cds_replaceChild(GdomeCDATASection*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.replaceChild";
	var ret = CGDOME.call.gdome_cds_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection removeChild method
 * C header: GdomeNode* gdome_cds_removeChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeChild";
	var ret = CGDOME.call.gdome_cds_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection appendChild method
 * C header: GdomeNode* gdome_cds_appendChild(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.appendChild";
	var ret = CGDOME.call.gdome_cds_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection hasChildNodes method
 * C header: GdomeBoolean gdome_cds_hasChildNodes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_cds_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection cloneNode method
 * C header: GdomeNode* gdome_cds_cloneNode(GdomeCDATASection*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.cloneNode";
	var ret = CGDOME.call.gdome_cds_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeCDATASection normalize method
 * C header: void gdome_cds_normalize(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.normalize";
	CGDOME.call.gdome_cds_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection isSupported method
 * C header: GdomeBoolean gdome_cds_isSupported(GdomeCDATASection*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.isSupported";
	var ret = CGDOME.call.gdome_cds_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection namespaceURI method
 * C header: GdomeDOMString* gdome_cds_namespaceURI(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_cds_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection prefix method
 * C header: GdomeDOMString* gdome_cds_prefix(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.prefix";
	var ret = CGDOME.call.gdome_cds_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection set_prefix method
 * C header: void gdome_cds_set_prefix(GdomeCDATASection*, GdomeDOMString*, GdomeException*)
 */
GdomeCDATASection.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.set_prefix";
	CGDOME.call.gdome_cds_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection localName method
 * C header: GdomeDOMString* gdome_cds_localName(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.localName";
	var ret = CGDOME.call.gdome_cds_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeCDATASection hasAttributes method
 * C header: GdomeBoolean gdome_cds_hasAttributes(GdomeCDATASection*, GdomeException*)
 */
GdomeCDATASection.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_cds_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection addEventListener method
 * C header: void gdome_cds_addEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.addEventListener";
	CGDOME.call.gdome_cds_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection removeEventListener method
 * C header: void gdome_cds_removeEventListener(GdomeCDATASection*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeCDATASection.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.removeEventListener";
	CGDOME.call.gdome_cds_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection dispatchEvent method
 * C header: GdomeBoolean gdome_cds_dispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_cds_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeCDATASection subTreeDispatchEvent method
 * C header: void gdome_cds_subTreeDispatchEvent(GdomeCDATASection*, GdomeEvent*, GdomeException*)
 */
GdomeCDATASection.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_cds_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeCDATASection canAppend method
 * C header: GdomeBoolean gdome_cds_canAppend(GdomeCDATASection*, GdomeNode*, GdomeException*)
 */
GdomeCDATASection.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeCDATASection.prototype.canAppend";
	var ret = CGDOME.call.gdome_cds_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeNotation(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeNotation) {
			return arg1;
		} else if(arg1.toGdomeNotation !== undefined) {
			return arg1.toGdomeNotation();
		} else {
			throw "Could not convert object to GdomeNotation!";
		}
	}
}

/** GdomeNotation publicId method
 * C header: GdomeDOMString* gdome_not_publicId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.publicId";
	var ret = CGDOME.call.gdome_not_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation systemId method
 * C header: GdomeDOMString* gdome_not_systemId(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.systemId";
	var ret = CGDOME.call.gdome_not_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation ref method
 * C header: void gdome_not_ref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ref";
	CGDOME.call.gdome_not_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation unref method
 * C header: void gdome_not_unref(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.unref";
	CGDOME.call.gdome_not_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation query_interface method
 * C header: gpointer gdome_not_query_interface(GdomeNotation*, const char*, GdomeException*)
 */
GdomeNotation.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.query_interface";
	var ret = CGDOME.call.gdome_not_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation nodeName method
 * C header: GdomeDOMString* gdome_not_nodeName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeName";
	var ret = CGDOME.call.gdome_not_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation nodeValue method
 * C header: GdomeDOMString* gdome_not_nodeValue(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeValue";
	var ret = CGDOME.call.gdome_not_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_nodeValue method
 * C header: void gdome_not_set_nodeValue(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_nodeValue";
	CGDOME.call.gdome_not_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation nodeType method
 * C header: unsigned short gdome_not_nodeType(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nodeType";
	var ret = CGDOME.call.gdome_not_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeNotation parentNode method
 * C header: GdomeNode* gdome_not_parentNode(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.parentNode";
	var ret = CGDOME.call.gdome_not_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation childNodes method
 * C header: GdomeNodeList* gdome_not_childNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.childNodes";
	var ret = CGDOME.call.gdome_not_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeNotation firstChild method
 * C header: GdomeNode* gdome_not_firstChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.firstChild";
	var ret = CGDOME.call.gdome_not_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation lastChild method
 * C header: GdomeNode* gdome_not_lastChild(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.lastChild";
	var ret = CGDOME.call.gdome_not_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation previousSibling method
 * C header: GdomeNode* gdome_not_previousSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.previousSibling";
	var ret = CGDOME.call.gdome_not_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation nextSibling method
 * C header: GdomeNode* gdome_not_nextSibling(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.nextSibling";
	var ret = CGDOME.call.gdome_not_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation attributes method
 * C header: GdomeNamedNodeMap* gdome_not_attributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.attributes";
	var ret = CGDOME.call.gdome_not_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeNotation ownerDocument method
 * C header: GdomeDocument* gdome_not_ownerDocument(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_not_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeNotation insertBefore method
 * C header: GdomeNode* gdome_not_insertBefore(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.insertBefore";
	var ret = CGDOME.call.gdome_not_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation replaceChild method
 * C header: GdomeNode* gdome_not_replaceChild(GdomeNotation*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.replaceChild";
	var ret = CGDOME.call.gdome_not_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation removeChild method
 * C header: GdomeNode* gdome_not_removeChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeChild";
	var ret = CGDOME.call.gdome_not_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation appendChild method
 * C header: GdomeNode* gdome_not_appendChild(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.appendChild";
	var ret = CGDOME.call.gdome_not_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation hasChildNodes method
 * C header: GdomeBoolean gdome_not_hasChildNodes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_not_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation cloneNode method
 * C header: GdomeNode* gdome_not_cloneNode(GdomeNotation*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.cloneNode";
	var ret = CGDOME.call.gdome_not_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeNotation normalize method
 * C header: void gdome_not_normalize(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.normalize";
	CGDOME.call.gdome_not_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation isSupported method
 * C header: GdomeBoolean gdome_not_isSupported(GdomeNotation*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.isSupported";
	var ret = CGDOME.call.gdome_not_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation namespaceURI method
 * C header: GdomeDOMString* gdome_not_namespaceURI(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_not_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation prefix method
 * C header: GdomeDOMString* gdome_not_prefix(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.prefix";
	var ret = CGDOME.call.gdome_not_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation set_prefix method
 * C header: void gdome_not_set_prefix(GdomeNotation*, GdomeDOMString*, GdomeException*)
 */
GdomeNotation.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeNotation.prototype.set_prefix";
	CGDOME.call.gdome_not_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation localName method
 * C header: GdomeDOMString* gdome_not_localName(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.localName";
	var ret = CGDOME.call.gdome_not_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeNotation hasAttributes method
 * C header: GdomeBoolean gdome_not_hasAttributes(GdomeNotation*, GdomeException*)
 */
GdomeNotation.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_not_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation addEventListener method
 * C header: void gdome_not_addEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.addEventListener";
	CGDOME.call.gdome_not_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation removeEventListener method
 * C header: void gdome_not_removeEventListener(GdomeNotation*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeNotation.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.removeEventListener";
	CGDOME.call.gdome_not_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation dispatchEvent method
 * C header: GdomeBoolean gdome_not_dispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_not_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeNotation subTreeDispatchEvent method
 * C header: void gdome_not_subTreeDispatchEvent(GdomeNotation*, GdomeEvent*, GdomeException*)
 */
GdomeNotation.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_not_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeNotation canAppend method
 * C header: GdomeBoolean gdome_not_canAppend(GdomeNotation*, GdomeNode*, GdomeException*)
 */
GdomeNotation.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeNotation.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeNotation.prototype.canAppend";
	var ret = CGDOME.call.gdome_not_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntity(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntity) {
			return arg1;
		} else if(arg1.toGdomeEntity !== undefined) {
			return arg1.toGdomeEntity();
		} else {
			throw "Could not convert object to GdomeEntity!";
		}
	}
}

/** GdomeEntity publicId method
 * C header: GdomeDOMString* gdome_ent_publicId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.publicId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.publicId";
	var ret = CGDOME.call.gdome_ent_publicId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity systemId method
 * C header: GdomeDOMString* gdome_ent_systemId(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.systemId = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.systemId";
	var ret = CGDOME.call.gdome_ent_systemId(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity notationName method
 * C header: GdomeDOMString* gdome_ent_notationName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.notationName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.notationName";
	var ret = CGDOME.call.gdome_ent_notationName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity ref method
 * C header: void gdome_ent_ref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ref";
	CGDOME.call.gdome_ent_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity unref method
 * C header: void gdome_ent_unref(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.unref";
	CGDOME.call.gdome_ent_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity query_interface method
 * C header: gpointer gdome_ent_query_interface(GdomeEntity*, const char*, GdomeException*)
 */
GdomeEntity.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.query_interface";
	var ret = CGDOME.call.gdome_ent_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity nodeName method
 * C header: GdomeDOMString* gdome_ent_nodeName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeName";
	var ret = CGDOME.call.gdome_ent_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity nodeValue method
 * C header: GdomeDOMString* gdome_ent_nodeValue(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeValue";
	var ret = CGDOME.call.gdome_ent_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_nodeValue method
 * C header: void gdome_ent_set_nodeValue(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_nodeValue";
	CGDOME.call.gdome_ent_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity nodeType method
 * C header: unsigned short gdome_ent_nodeType(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nodeType";
	var ret = CGDOME.call.gdome_ent_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntity parentNode method
 * C header: GdomeNode* gdome_ent_parentNode(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.parentNode";
	var ret = CGDOME.call.gdome_ent_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity childNodes method
 * C header: GdomeNodeList* gdome_ent_childNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.childNodes";
	var ret = CGDOME.call.gdome_ent_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntity firstChild method
 * C header: GdomeNode* gdome_ent_firstChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.firstChild";
	var ret = CGDOME.call.gdome_ent_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity lastChild method
 * C header: GdomeNode* gdome_ent_lastChild(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.lastChild";
	var ret = CGDOME.call.gdome_ent_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity previousSibling method
 * C header: GdomeNode* gdome_ent_previousSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.previousSibling";
	var ret = CGDOME.call.gdome_ent_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity nextSibling method
 * C header: GdomeNode* gdome_ent_nextSibling(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.nextSibling";
	var ret = CGDOME.call.gdome_ent_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity attributes method
 * C header: GdomeNamedNodeMap* gdome_ent_attributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.attributes";
	var ret = CGDOME.call.gdome_ent_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntity ownerDocument method
 * C header: GdomeDocument* gdome_ent_ownerDocument(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_ent_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntity insertBefore method
 * C header: GdomeNode* gdome_ent_insertBefore(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.insertBefore";
	var ret = CGDOME.call.gdome_ent_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity replaceChild method
 * C header: GdomeNode* gdome_ent_replaceChild(GdomeEntity*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.replaceChild";
	var ret = CGDOME.call.gdome_ent_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity removeChild method
 * C header: GdomeNode* gdome_ent_removeChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeChild";
	var ret = CGDOME.call.gdome_ent_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity appendChild method
 * C header: GdomeNode* gdome_ent_appendChild(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.appendChild";
	var ret = CGDOME.call.gdome_ent_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity hasChildNodes method
 * C header: GdomeBoolean gdome_ent_hasChildNodes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_ent_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity cloneNode method
 * C header: GdomeNode* gdome_ent_cloneNode(GdomeEntity*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.cloneNode";
	var ret = CGDOME.call.gdome_ent_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntity normalize method
 * C header: void gdome_ent_normalize(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.normalize";
	CGDOME.call.gdome_ent_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity isSupported method
 * C header: GdomeBoolean gdome_ent_isSupported(GdomeEntity*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.isSupported";
	var ret = CGDOME.call.gdome_ent_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity namespaceURI method
 * C header: GdomeDOMString* gdome_ent_namespaceURI(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_ent_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity prefix method
 * C header: GdomeDOMString* gdome_ent_prefix(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.prefix";
	var ret = CGDOME.call.gdome_ent_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity set_prefix method
 * C header: void gdome_ent_set_prefix(GdomeEntity*, GdomeDOMString*, GdomeException*)
 */
GdomeEntity.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntity.prototype.set_prefix";
	CGDOME.call.gdome_ent_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity localName method
 * C header: GdomeDOMString* gdome_ent_localName(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.localName";
	var ret = CGDOME.call.gdome_ent_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntity hasAttributes method
 * C header: GdomeBoolean gdome_ent_hasAttributes(GdomeEntity*, GdomeException*)
 */
GdomeEntity.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_ent_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity addEventListener method
 * C header: void gdome_ent_addEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.addEventListener";
	CGDOME.call.gdome_ent_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity removeEventListener method
 * C header: void gdome_ent_removeEventListener(GdomeEntity*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntity.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.removeEventListener";
	CGDOME.call.gdome_ent_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity dispatchEvent method
 * C header: GdomeBoolean gdome_ent_dispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_ent_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntity subTreeDispatchEvent method
 * C header: void gdome_ent_subTreeDispatchEvent(GdomeEntity*, GdomeEvent*, GdomeException*)
 */
GdomeEntity.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_ent_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntity canAppend method
 * C header: GdomeBoolean gdome_ent_canAppend(GdomeEntity*, GdomeNode*, GdomeException*)
 */
GdomeEntity.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntity.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntity.prototype.canAppend";
	var ret = CGDOME.call.gdome_ent_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeEntityReference(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeEntityReference) {
			return arg1;
		} else if(arg1.toGdomeEntityReference !== undefined) {
			return arg1.toGdomeEntityReference();
		} else {
			throw "Could not convert object to GdomeEntityReference!";
		}
	}
}

/** GdomeEntityReference ref method
 * C header: void gdome_er_ref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ref";
	CGDOME.call.gdome_er_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference unref method
 * C header: void gdome_er_unref(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.unref";
	CGDOME.call.gdome_er_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference query_interface method
 * C header: gpointer gdome_er_query_interface(GdomeEntityReference*, const char*, GdomeException*)
 */
GdomeEntityReference.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.query_interface";
	var ret = CGDOME.call.gdome_er_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference nodeName method
 * C header: GdomeDOMString* gdome_er_nodeName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeName";
	var ret = CGDOME.call.gdome_er_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference nodeValue method
 * C header: GdomeDOMString* gdome_er_nodeValue(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeValue";
	var ret = CGDOME.call.gdome_er_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_nodeValue method
 * C header: void gdome_er_set_nodeValue(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_nodeValue";
	CGDOME.call.gdome_er_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference nodeType method
 * C header: unsigned short gdome_er_nodeType(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nodeType";
	var ret = CGDOME.call.gdome_er_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeEntityReference parentNode method
 * C header: GdomeNode* gdome_er_parentNode(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.parentNode";
	var ret = CGDOME.call.gdome_er_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference childNodes method
 * C header: GdomeNodeList* gdome_er_childNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.childNodes";
	var ret = CGDOME.call.gdome_er_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeEntityReference firstChild method
 * C header: GdomeNode* gdome_er_firstChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.firstChild";
	var ret = CGDOME.call.gdome_er_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference lastChild method
 * C header: GdomeNode* gdome_er_lastChild(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.lastChild";
	var ret = CGDOME.call.gdome_er_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference previousSibling method
 * C header: GdomeNode* gdome_er_previousSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.previousSibling";
	var ret = CGDOME.call.gdome_er_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference nextSibling method
 * C header: GdomeNode* gdome_er_nextSibling(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.nextSibling";
	var ret = CGDOME.call.gdome_er_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference attributes method
 * C header: GdomeNamedNodeMap* gdome_er_attributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.attributes";
	var ret = CGDOME.call.gdome_er_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeEntityReference ownerDocument method
 * C header: GdomeDocument* gdome_er_ownerDocument(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_er_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeEntityReference insertBefore method
 * C header: GdomeNode* gdome_er_insertBefore(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.insertBefore";
	var ret = CGDOME.call.gdome_er_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference replaceChild method
 * C header: GdomeNode* gdome_er_replaceChild(GdomeEntityReference*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.replaceChild";
	var ret = CGDOME.call.gdome_er_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference removeChild method
 * C header: GdomeNode* gdome_er_removeChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeChild";
	var ret = CGDOME.call.gdome_er_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference appendChild method
 * C header: GdomeNode* gdome_er_appendChild(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.appendChild";
	var ret = CGDOME.call.gdome_er_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference hasChildNodes method
 * C header: GdomeBoolean gdome_er_hasChildNodes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_er_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference cloneNode method
 * C header: GdomeNode* gdome_er_cloneNode(GdomeEntityReference*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.cloneNode";
	var ret = CGDOME.call.gdome_er_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeEntityReference normalize method
 * C header: void gdome_er_normalize(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.normalize";
	CGDOME.call.gdome_er_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference isSupported method
 * C header: GdomeBoolean gdome_er_isSupported(GdomeEntityReference*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.isSupported";
	var ret = CGDOME.call.gdome_er_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference namespaceURI method
 * C header: GdomeDOMString* gdome_er_namespaceURI(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_er_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference prefix method
 * C header: GdomeDOMString* gdome_er_prefix(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.prefix";
	var ret = CGDOME.call.gdome_er_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference set_prefix method
 * C header: void gdome_er_set_prefix(GdomeEntityReference*, GdomeDOMString*, GdomeException*)
 */
GdomeEntityReference.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.set_prefix";
	CGDOME.call.gdome_er_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference localName method
 * C header: GdomeDOMString* gdome_er_localName(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.localName";
	var ret = CGDOME.call.gdome_er_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeEntityReference hasAttributes method
 * C header: GdomeBoolean gdome_er_hasAttributes(GdomeEntityReference*, GdomeException*)
 */
GdomeEntityReference.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_er_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference addEventListener method
 * C header: void gdome_er_addEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.addEventListener";
	CGDOME.call.gdome_er_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference removeEventListener method
 * C header: void gdome_er_removeEventListener(GdomeEntityReference*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeEntityReference.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.removeEventListener";
	CGDOME.call.gdome_er_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference dispatchEvent method
 * C header: GdomeBoolean gdome_er_dispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_er_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeEntityReference subTreeDispatchEvent method
 * C header: void gdome_er_subTreeDispatchEvent(GdomeEntityReference*, GdomeEvent*, GdomeException*)
 */
GdomeEntityReference.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_er_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeEntityReference canAppend method
 * C header: GdomeBoolean gdome_er_canAppend(GdomeEntityReference*, GdomeNode*, GdomeException*)
 */
GdomeEntityReference.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeEntityReference.prototype.canAppend";
	var ret = CGDOME.call.gdome_er_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** Constructor (when called with new) or object builder otherwise */
function GdomeProcessingInstruction(arg1, arg2) {
	if(this instanceof arguments.callee) {
		this.pointer = arg1;
		this.di = arg2;
	} else {
		if(arg1 instanceof GdomeProcessingInstruction) {
			return arg1;
		} else if(arg1.toGdomeProcessingInstruction !== undefined) {
			return arg1.toGdomeProcessingInstruction();
		} else {
			throw "Could not convert object to GdomeProcessingInstruction!";
		}
	}
}

/** GdomeProcessingInstruction target method
 * C header: GdomeDOMString* gdome_pi_target(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.target = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.target";
	var ret = CGDOME.call.gdome_pi_target(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction data method
 * C header: GdomeDOMString* gdome_pi_data(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.data = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.data";
	var ret = CGDOME.call.gdome_pi_data(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_data method
 * C header: void gdome_pi_set_data(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_data = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_data";
	CGDOME.call.gdome_pi_set_data(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction ref method
 * C header: void gdome_pi_ref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ref";
	CGDOME.call.gdome_pi_ref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction unref method
 * C header: void gdome_pi_unref(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.unref = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.unref";
	CGDOME.call.gdome_pi_unref(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction query_interface method
 * C header: gpointer gdome_pi_query_interface(GdomeProcessingInstruction*, const char*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.query_interface = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.query_interface";
	var ret = CGDOME.call.gdome_pi_query_interface(this.pointer, arg0, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction nodeName method
 * C header: GdomeDOMString* gdome_pi_nodeName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeName";
	var ret = CGDOME.call.gdome_pi_nodeName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction nodeValue method
 * C header: GdomeDOMString* gdome_pi_nodeValue(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeValue = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeValue";
	var ret = CGDOME.call.gdome_pi_nodeValue(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_nodeValue method
 * C header: void gdome_pi_set_nodeValue(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_nodeValue = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_nodeValue";
	CGDOME.call.gdome_pi_set_nodeValue(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction nodeType method
 * C header: unsigned short gdome_pi_nodeType(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nodeType = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nodeType";
	var ret = CGDOME.call.gdome_pi_nodeType(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return ret;
}

/** GdomeProcessingInstruction parentNode method
 * C header: GdomeNode* gdome_pi_parentNode(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.parentNode = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.parentNode";
	var ret = CGDOME.call.gdome_pi_parentNode(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction childNodes method
 * C header: GdomeNodeList* gdome_pi_childNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.childNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.childNodes";
	var ret = CGDOME.call.gdome_pi_childNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNodeList(ret, this.di); }
}

/** GdomeProcessingInstruction firstChild method
 * C header: GdomeNode* gdome_pi_firstChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.firstChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.firstChild";
	var ret = CGDOME.call.gdome_pi_firstChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction lastChild method
 * C header: GdomeNode* gdome_pi_lastChild(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.lastChild = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.lastChild";
	var ret = CGDOME.call.gdome_pi_lastChild(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction previousSibling method
 * C header: GdomeNode* gdome_pi_previousSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.previousSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.previousSibling";
	var ret = CGDOME.call.gdome_pi_previousSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction nextSibling method
 * C header: GdomeNode* gdome_pi_nextSibling(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.nextSibling = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.nextSibling";
	var ret = CGDOME.call.gdome_pi_nextSibling(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction attributes method
 * C header: GdomeNamedNodeMap* gdome_pi_attributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.attributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.attributes";
	var ret = CGDOME.call.gdome_pi_attributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNamedNodeMap(ret, this.di); }
}

/** GdomeProcessingInstruction ownerDocument method
 * C header: GdomeDocument* gdome_pi_ownerDocument(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.ownerDocument = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.ownerDocument";
	var ret = CGDOME.call.gdome_pi_ownerDocument(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDocument(ret, this.di); }
}

/** GdomeProcessingInstruction insertBefore method
 * C header: GdomeNode* gdome_pi_insertBefore(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.insertBefore = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.insertBefore";
	var ret = CGDOME.call.gdome_pi_insertBefore(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction replaceChild method
 * C header: GdomeNode* gdome_pi_replaceChild(GdomeProcessingInstruction*, GdomeNode*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.replaceChild = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	if(!(arg1 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.replaceChild";
	var ret = CGDOME.call.gdome_pi_replaceChild(this.pointer, arg0.pointer, arg1.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction removeChild method
 * C header: GdomeNode* gdome_pi_removeChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeChild";
	var ret = CGDOME.call.gdome_pi_removeChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction appendChild method
 * C header: GdomeNode* gdome_pi_appendChild(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.appendChild = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.appendChild";
	var ret = CGDOME.call.gdome_pi_appendChild(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction hasChildNodes method
 * C header: GdomeBoolean gdome_pi_hasChildNodes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasChildNodes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasChildNodes";
	var ret = CGDOME.call.gdome_pi_hasChildNodes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction cloneNode method
 * C header: GdomeNode* gdome_pi_cloneNode(GdomeProcessingInstruction*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.cloneNode = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.cloneNode";
	var ret = CGDOME.call.gdome_pi_cloneNode(this.pointer, (arg0?1:0), GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeNode(ret, this.di); }
}

/** GdomeProcessingInstruction normalize method
 * C header: void gdome_pi_normalize(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.normalize = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.normalize";
	CGDOME.call.gdome_pi_normalize(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction isSupported method
 * C header: GdomeBoolean gdome_pi_isSupported(GdomeProcessingInstruction*, GdomeDOMString*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.isSupported = function(arg0, arg1) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	var gstr1;
	if(arg1 instanceof GdomeDOMString) {
		gstr1 = arg1;
		if(gstr1.pointer.address !== 0) { gstr1.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported: GdomeDOMString.mkref";
		gstr1 = GdomeDOMString.mkref(String(arg1));
		if(gstr1.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.isSupported";
	var ret = CGDOME.call.gdome_pi_isSupported(this.pointer, gstr0.pointer, gstr1.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(gstr1.pointer.address !== 0) gstr1.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction namespaceURI method
 * C header: GdomeDOMString* gdome_pi_namespaceURI(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.namespaceURI = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.namespaceURI";
	var ret = CGDOME.call.gdome_pi_namespaceURI(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction prefix method
 * C header: GdomeDOMString* gdome_pi_prefix(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.prefix = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.prefix";
	var ret = CGDOME.call.gdome_pi_prefix(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction set_prefix method
 * C header: void gdome_pi_set_prefix(GdomeProcessingInstruction*, GdomeDOMString*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.set_prefix = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.set_prefix";
	CGDOME.call.gdome_pi_set_prefix(this.pointer, gstr0.pointer, GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction localName method
 * C header: GdomeDOMString* gdome_pi_localName(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.localName = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.localName";
	var ret = CGDOME.call.gdome_pi_localName(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	if(ret.address !== 0) { return new GdomeDOMString(ret, this.di); }
}

/** GdomeProcessingInstruction hasAttributes method
 * C header: GdomeBoolean gdome_pi_hasAttributes(GdomeProcessingInstruction*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.hasAttributes = function() {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.hasAttributes";
	var ret = CGDOME.call.gdome_pi_hasAttributes(this.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction addEventListener method
 * C header: void gdome_pi_addEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.addEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.addEventListener";
	CGDOME.call.gdome_pi_addEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction removeEventListener method
 * C header: void gdome_pi_removeEventListener(GdomeProcessingInstruction*, GdomeDOMString*, GdomeEventListener*, GdomeBoolean, GdomeException*)
 */
GdomeProcessingInstruction.prototype.removeEventListener = function(arg0, arg1, arg2) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	var gstr0;
	if(arg0 instanceof GdomeDOMString) {
		gstr0 = arg0;
		if(gstr0.pointer.address !== 0) { gstr0.ref(); }
	} else {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: GdomeDOMString.mkref";
		gstr0 = GdomeDOMString.mkref(String(arg0));
		if(gstr0.pointer.address == 0) { throw GDOME.exception; }
	}
	if(!(arg1 instanceof GdomeEventListener)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: argument not instance of GdomeEventListener";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener: !arg1.pointer";
	if(arg1.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.removeEventListener";
	CGDOME.call.gdome_pi_removeEventListener(this.pointer, gstr0.pointer, arg1.pointer, (arg2?1:0), GDOME.exception.pointer);
	if(gstr0.pointer.address !== 0) gstr0.unref();
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction dispatchEvent method
 * C header: GdomeBoolean gdome_pi_dispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.dispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.dispatchEvent";
	var ret = CGDOME.call.gdome_pi_dispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}

/** GdomeProcessingInstruction subTreeDispatchEvent method
 * C header: void gdome_pi_subTreeDispatchEvent(GdomeProcessingInstruction*, GdomeEvent*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.subTreeDispatchEvent = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeEvent)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: argument not instance of GdomeEvent";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.subTreeDispatchEvent";
	CGDOME.call.gdome_pi_subTreeDispatchEvent(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
}

/** GdomeProcessingInstruction canAppend method
 * C header: GdomeBoolean gdome_pi_canAppend(GdomeProcessingInstruction*, GdomeNode*, GdomeException*)
 */
GdomeProcessingInstruction.prototype.canAppend = function(arg0) {
	GDOME.exception.msg = "!this.pointer";
	if(this.pointer == 0) { throw GDOME.exception; }
	if(!(arg0 instanceof GdomeNode)) {
		GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: argument not instance of GdomeNode";
		throw GDOME.exception;
	}
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend: !arg0.pointer";
	if(arg0.pointer.address == 0) { throw GDOME.exception; }
	GDOME.exception.msg = "GdomeProcessingInstruction.prototype.canAppend";
	var ret = CGDOME.call.gdome_pi_canAppend(this.pointer, arg0.pointer, GDOME.exception.pointer);
	if(GDOME.exception.value() !== 0) { throw GDOME.exception; }
	return (ret === 1) ? true : false;
}


'
0.40526600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:282: EOF#1064 do_ustring_convert_to_v8 at 0x806f7dd in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, Glib::ustring>(Glib::ustring const&) from js
0.40530000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:140: EOF#1063 convert<v8::Handle<v8::Value>,std::string> at 0xb42984f8 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.40560600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1068 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4298572 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.40582600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1069 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.40587200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1069 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.40589000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1068 convert<v8::Handle<v8::Value>,std::string> at 0xb4298572 in do_v8_load_js(v8::Arguments const&) from /usr/lib/openjs/loader.so
0.55194000 0104 [funct] mod_cgdome.cc:38: SOF#1070 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.55199700 0105 [debug] mod_cgdome.cc:44: 1
0.55232400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1071 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.55264600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1072 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.55269400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_new'
0.55271300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1072 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.55272900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1071 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.55274500 0105 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_new
0.55276000 0105 [debug] mod_cgdome.cc:52: 2
0.55277800 0105 [debug] mod_cgdome.cc:61: 3
0.55279400 0105 [debug] mod_cgdome.cc:63: 4
0.55307700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1073 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.55338100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1074 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.55342400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_new'
0.55344100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1074 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.55345700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1073 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.55348600 0105 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_new
0.55350300 0105 [debug] mod_cgdome.cc:68: 5
0.55379800 0105 [funct] mod_cgdome.cc:29: SOF#1075 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.55383300 0106 [debug] mod_cgdome.cc:30: 1
0.55394900 0105 [funct] mod_cgdome.cc:29: EOF#1075 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.55396700 0105 [debug] mod_cgdome.cc:74: 6
0.55410400 0105 [debug] mod_cgdome.cc:76: 7
0.55414600 0105 [debug] mod_cgdome.cc:78: 8
0.55416500 0104 [funct] mod_cgdome.cc:38: EOF#1070 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.55442500 0104 [funct] auto-wrappers.cc:10229: SOF#1076 do_gdome_extra_exc_new (args[0]) at 0xb74f574d from /usr/lib/libv8_g.so
0.55446500 0105 [debug] auto-wrappers.cc:10232: Calling cgate_gdome_extra_exc_new()
0.55448600 0105 [debug] auto-wrappers.cc:10234: ret = 135034336
0.55473500 0105 [funct] ../../core/pointer_helpers.h:28: SOF#1077 ptr_to_v8 (address=135034336, type='GdomeException*') at 0xb40078de in openjs::extensions::do_gdome_extra_exc_new(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.55505700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1078 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.55534900 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1079 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.55538800 0107 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1079 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.55540500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1078 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.55545000 0105 [funct] ../../core/pointer_helpers.h:28: EOF#1077 ptr_to_v8 at 0xb40078de in openjs::extensions::do_gdome_extra_exc_new(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.55549700 0104 [funct] auto-wrappers.cc:10229: EOF#1076 do_gdome_extra_exc_new at 0xb74f574d from /usr/lib/libv8_g.so
0.59323000 0006 [info ] loader.cc:201: /usr/lib/openjs/gdome.js: Source library loaded
0.59334700 0103 [funct] loader.cc:166: EOF#1060 do_v8_fs_load_js at 0xb74f574d from /usr/lib/libv8_g.so
0.59778400 0103 [funct] basicstream.cc:185: SOF#1080 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.59783100 0104 [debug] basicstream.cc:188: part 1
0.59802500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1081 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.59823800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1082 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.59828200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`file: example.html
'
0.59830000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1082 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.59833500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1081 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.59835100 0104 [debug] basicstream.cc:191: part 2
0.59839300 0104 [debug] basicstream.cc:193: part 3
0.59841100 0104 [debug] basicstream.cc:195: part 4
0.59861600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1083 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.59892900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1084 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.59914900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1085 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.59918500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.59920200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1085 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.59921800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1084 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.59929500 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.59931400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1083 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.59933000 0104 [debug] basicstream.cc:198: part 8
0.59936400 0104 [debug] basicstream.cc:200: part 9
0.59938700 0103 [funct] basicstream.cc:185: EOF#1080 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.59966700 0103 [funct] basicstream.cc:185: SOF#1086 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.59970200 0104 [debug] basicstream.cc:188: part 1
0.59988600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1087 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60009600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1088 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60013300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`id:   content
'
0.60014500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1088 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60015400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1087 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60016300 0104 [debug] basicstream.cc:191: part 2
0.60020000 0104 [debug] basicstream.cc:193: part 3
0.60021700 0104 [debug] basicstream.cc:195: part 4
0.60041700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1089 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60065800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1090 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60090000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1091 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60094200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.60096000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1091 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60097500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1090 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60103100 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.60105000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1089 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60106600 0104 [debug] basicstream.cc:198: part 8
0.60108500 0104 [debug] basicstream.cc:200: part 9
0.60110200 0103 [funct] basicstream.cc:185: EOF#1086 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.60131400 0103 [funct] basicstream.cc:185: SOF#1092 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.60134900 0104 [debug] basicstream.cc:188: part 1
0.60153100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1093 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60174200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1094 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60178500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`outfile: out.html
'
0.60180300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1094 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60181800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1093 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60183300 0104 [debug] basicstream.cc:191: part 2
0.60187000 0104 [debug] basicstream.cc:193: part 3
0.60188700 0104 [debug] basicstream.cc:195: part 4
0.60209100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1095 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60239200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1096 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60263100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1097 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60267500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.60270700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1097 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60272400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1096 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60278400 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.60280500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1095 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60282600 0104 [debug] basicstream.cc:198: part 8
0.60284500 0104 [debug] basicstream.cc:200: part 9
0.60286400 0103 [funct] basicstream.cc:185: EOF#1092 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.60307800 0103 [funct] basicstream.cc:185: SOF#1098 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.60310800 0104 [debug] basicstream.cc:188: part 1
0.60329100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1099 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60350100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1100 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60354100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`counts: 1
'
0.60355900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1100 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60357500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1099 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60359000 0104 [debug] basicstream.cc:191: part 2
0.60362600 0104 [debug] basicstream.cc:193: part 3
0.60364400 0104 [debug] basicstream.cc:195: part 4
0.60384300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1101 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60408300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1102 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60430500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1103 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60434600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.60436300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1103 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60437900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1102 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60443400 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.60445300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1101 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60448000 0104 [debug] basicstream.cc:198: part 8
0.60450000 0104 [debug] basicstream.cc:200: part 9
0.60451900 0103 [funct] basicstream.cc:185: EOF#1098 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.60718100 0103 [funct] basicstream.cc:185: SOF#1104 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.60721900 0104 [debug] basicstream.cc:188: part 1
0.60740600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1105 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60761800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1106 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60766000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Creating di
'
0.60767700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1106 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60769300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1105 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60770800 0104 [debug] basicstream.cc:191: part 2
0.60774400 0104 [debug] basicstream.cc:193: part 3
0.60776200 0104 [debug] basicstream.cc:195: part 4
0.60796200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1107 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60820400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1108 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60842700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1109 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60846800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.60848600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1109 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.60850100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1108 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.60855600 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.60857600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1107 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.60859200 0104 [debug] basicstream.cc:198: part 8
0.60861100 0104 [debug] basicstream.cc:200: part 9
0.60863100 0103 [funct] basicstream.cc:185: EOF#1104 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.60970500 0103 [funct] mod_cgdome.cc:38: SOF#1110 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.60974600 0104 [debug] mod_cgdome.cc:44: 1
0.60997400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1111 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.61024800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1112 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61029000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_mkref'
0.61030800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1112 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61032400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1111 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.61033800 0104 [debug] mod_cgdome.cc:49: name = gdome_di_mkref
0.61035400 0104 [debug] mod_cgdome.cc:52: 2
0.61036900 0104 [debug] mod_cgdome.cc:61: 3
0.61038400 0104 [debug] mod_cgdome.cc:63: 4
0.61061000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1113 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.61182600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1114 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61188100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_mkref'
0.61189900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1114 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61191400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1113 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.61193000 0104 [debug] mod_cgdome.cc:65: key=gdome_di_mkref
0.61194500 0104 [debug] mod_cgdome.cc:68: 5
0.61223200 0104 [funct] mod_cgdome.cc:29: SOF#1115 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.61226800 0105 [debug] mod_cgdome.cc:30: 1
0.61230400 0104 [funct] mod_cgdome.cc:29: EOF#1115 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.61232100 0104 [debug] mod_cgdome.cc:74: 6
0.61246700 0104 [debug] mod_cgdome.cc:76: 7
0.61251400 0104 [debug] mod_cgdome.cc:78: 8
0.61253200 0103 [funct] mod_cgdome.cc:38: EOF#1110 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.61276600 0103 [funct] auto-wrappers.cc:108: SOF#1116 do_gdome_di_mkref (args[0]) at 0xb74f574d from /usr/lib/libv8_g.so
0.61280400 0104 [debug] auto-wrappers.cc:111: Calling cgate_gdome_di_mkref()
0.61283500 0104 [debug] auto-wrappers.cc:113: ret = 135015648
0.61304600 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1117 ptr_to_v8 (address=135015648, type='GdomeDOMImplementation*') at 0xb41658f3 in openjs::extensions::do_gdome_di_mkref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.61331900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1118 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.61357800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1119 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.61361800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1119 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.61363500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1118 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.61367700 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1117 ptr_to_v8 at 0xb41658f3 in openjs::extensions::do_gdome_di_mkref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.61369900 0103 [funct] auto-wrappers.cc:108: EOF#1116 do_gdome_di_mkref at 0xb74f574d from /usr/lib/libv8_g.so
0.61769600 0103 [funct] basicstream.cc:185: SOF#1120 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.61773700 0104 [debug] basicstream.cc:188: part 1
0.61792300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1121 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.61813000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1122 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61816700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Creating doc
'
0.61817900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1122 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61818800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1121 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.61820300 0104 [debug] basicstream.cc:191: part 2
0.61824000 0104 [debug] basicstream.cc:193: part 3
0.61825800 0104 [debug] basicstream.cc:195: part 4
0.61845900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1123 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.61870200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1124 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.61899400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1125 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61903700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.61905400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1125 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.61907000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1124 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.61913500 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.61914900 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1123 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.61915900 0104 [debug] basicstream.cc:198: part 8
0.61917500 0104 [debug] basicstream.cc:200: part 9
0.61918900 0103 [funct] basicstream.cc:185: EOF#1120 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.62142200 0103 [funct] mod_cgdome.cc:38: SOF#1126 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.62146000 0104 [debug] mod_cgdome.cc:44: 1
0.62168700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1127 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.62194300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1128 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62198500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_createDocFromURI'
0.62200300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1128 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62201800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1127 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.62203400 0104 [debug] mod_cgdome.cc:49: name = gdome_di_createDocFromURI
0.62204900 0104 [debug] mod_cgdome.cc:52: 2
0.62206400 0104 [debug] mod_cgdome.cc:61: 3
0.62207900 0104 [debug] mod_cgdome.cc:63: 4
0.62239200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1129 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.62266700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1130 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62271200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_createDocFromURI'
0.62273100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1130 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62274700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1129 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.62276200 0104 [debug] mod_cgdome.cc:65: key=gdome_di_createDocFromURI
0.62278800 0104 [debug] mod_cgdome.cc:68: 5
0.62306300 0104 [funct] mod_cgdome.cc:29: SOF#1131 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.62310300 0105 [debug] mod_cgdome.cc:30: 1
0.62312900 0104 [funct] mod_cgdome.cc:29: EOF#1131 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.62314000 0104 [debug] mod_cgdome.cc:74: 6
0.62326900 0104 [debug] mod_cgdome.cc:76: 7
0.62332000 0104 [debug] mod_cgdome.cc:78: 8
0.62333800 0103 [funct] mod_cgdome.cc:38: EOF#1126 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.62355500 0103 [funct] auto-wrappers.cc:212: SOF#1132 do_gdome_di_createDocFromURI (args[4]) at 0xb74f574d from /usr/lib/libv8_g.so
0.62378200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1133 ptr_from_v8 (a, a_type='GdomeDOMImplementation*') at 0xb4162194 in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.62404600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1134 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.62428900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1135 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62433100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDOMImplementation*'
0.62434800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1135 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62436400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1134 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.62440800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDOMImplementation*', address='135015648'
0.62442700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1133 ptr_from_v8 at 0xb4162194 in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.62463300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1136 convert<std::string,v8::Local<v8::Value>> (value) at 0xb41621d9 in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.62486400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1137 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62490500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`example.html'
0.62492200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1137 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62493800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1136 convert<std::string,v8::Local<v8::Value>> at 0xb41621d9 in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.62513300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1138 ptr_from_v8 (a, a_type='GdomeException*') at 0xb416224d in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.62539300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1139 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.62569500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1140 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62573800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.62576800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1140 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.62578400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1139 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.62582900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.62584800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1138 ptr_from_v8 at 0xb416224d in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.62586400 0104 [debug] auto-wrappers.cc:220: Calling cgate_gdome_di_createDocFromURI(135015648, example.html, 8, 135034336)
0.70359200 0104 [debug] auto-wrappers.cc:222: ret = 135156896
0.70388600 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1141 ptr_to_v8 (address=135156896, type='GdomeDocument*') at 0xb416264d in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.70418600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1142 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.70442900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1143 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.70446800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1143 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.70448600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1142 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.70452800 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1141 ptr_to_v8 at 0xb416264d in openjs::extensions::do_gdome_di_createDocFromURI(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.70455000 0103 [funct] auto-wrappers.cc:212: EOF#1132 do_gdome_di_createDocFromURI at 0xb74f574d from /usr/lib/libv8_g.so
0.70543600 0103 [funct] mod_cgdome.cc:38: SOF#1144 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.70551900 0104 [debug] mod_cgdome.cc:44: 1
0.70578000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1145 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.70606300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1146 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.70610500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.70611800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1146 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.70612800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1145 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.70616500 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.70617600 0104 [debug] mod_cgdome.cc:52: 2
0.70618600 0104 [debug] mod_cgdome.cc:61: 3
0.70619500 0104 [debug] mod_cgdome.cc:63: 4
0.70642100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1147 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.70667700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1148 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.70671900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.70673700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1148 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.70675200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1147 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.70676700 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.70678200 0104 [debug] mod_cgdome.cc:68: 5
0.70702200 0104 [funct] mod_cgdome.cc:29: SOF#1149 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.70705700 0105 [debug] mod_cgdome.cc:30: 1
0.70714500 0104 [funct] mod_cgdome.cc:29: EOF#1149 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.70715700 0104 [debug] mod_cgdome.cc:74: 6
0.70729700 0104 [debug] mod_cgdome.cc:76: 7
0.70735700 0104 [debug] mod_cgdome.cc:78: 8
0.70737500 0103 [funct] mod_cgdome.cc:38: EOF#1144 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.70757900 0103 [funct] auto-wrappers.cc:10259: SOF#1150 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.70779500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1151 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.70805500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1152 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.70831500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1153 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.70835700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.70837600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1153 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.70839100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1152 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.70844000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.70847600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1151 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.70849800 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.70851400 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.70853200 0103 [funct] auto-wrappers.cc:10259: EOF#1150 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.71034300 0103 [funct] basicstream.cc:185: SOF#1154 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.71038400 0104 [debug] basicstream.cc:188: part 1
0.71057100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1155 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.71078200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1156 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71082600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`getElementById
'
0.71084400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1156 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71085900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1155 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.71087400 0104 [debug] basicstream.cc:191: part 2
0.71091100 0104 [debug] basicstream.cc:193: part 3
0.71092900 0104 [debug] basicstream.cc:195: part 4
0.71231000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1157 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.71258800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1158 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.71283300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1159 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71287800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.71289600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1159 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71291200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1158 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.71297500 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.71299400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1157 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.71301000 0104 [debug] basicstream.cc:198: part 8
0.71303600 0104 [debug] basicstream.cc:200: part 9
0.71305600 0103 [funct] basicstream.cc:185: EOF#1154 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.71638900 0103 [funct] mod_cgdome.cc:38: SOF#1160 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.71643000 0104 [debug] mod_cgdome.cc:44: 1
0.71668100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1161 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.71693800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1162 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71698100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_mkref_dup'
0.71699900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1162 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71701400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1161 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.71702900 0104 [debug] mod_cgdome.cc:49: name = gdome_str_mkref_dup
0.71704400 0104 [debug] mod_cgdome.cc:52: 2
0.71706000 0104 [debug] mod_cgdome.cc:61: 3
0.71707500 0104 [debug] mod_cgdome.cc:63: 4
0.71730000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1163 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.71755700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1164 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71759900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_mkref_dup'
0.71761700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1164 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71763200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1163 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.71764700 0104 [debug] mod_cgdome.cc:65: key=gdome_str_mkref_dup
0.71766200 0104 [debug] mod_cgdome.cc:68: 5
0.71790200 0104 [funct] mod_cgdome.cc:29: SOF#1165 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.71793700 0105 [debug] mod_cgdome.cc:30: 1
0.71796800 0104 [funct] mod_cgdome.cc:29: EOF#1165 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.71798500 0104 [debug] mod_cgdome.cc:74: 6
0.71811200 0104 [debug] mod_cgdome.cc:76: 7
0.71816900 0104 [debug] mod_cgdome.cc:78: 8
0.71818100 0103 [funct] mod_cgdome.cc:38: EOF#1160 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.71838300 0103 [funct] auto-wrappers.cc:5: SOF#1166 do_gdome_str_mkref_dup (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.71860400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1167 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4166443 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.71890400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1168 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71896100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`content'
0.71898000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1168 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.71899500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1167 convert<std::string,v8::Local<v8::Value>> at 0xb4166443 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.71901000 0104 [debug] auto-wrappers.cc:10: Calling cgate_gdome_str_mkref_dup(content)
0.71903800 0104 [debug] auto-wrappers.cc:12: ret = 134823840
0.71924000 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1169 ptr_to_v8 (address=134823840, type='GdomeDOMString*') at 0xb41667b7 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.71953500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1170 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.71978700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1171 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.71982700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1171 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.71984400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1170 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.71988600 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1169 ptr_to_v8 at 0xb41667b7 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.71990600 0103 [funct] auto-wrappers.cc:5: EOF#1166 do_gdome_str_mkref_dup at 0xb74f574d from /usr/lib/libv8_g.so
0.72159000 0103 [funct] mod_cgdome.cc:38: SOF#1172 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.72162700 0104 [debug] mod_cgdome.cc:44: 1
0.72185500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1173 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72210500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1174 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72217800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_doc_getElementById'
0.72219200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1174 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72220700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1173 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72222200 0104 [debug] mod_cgdome.cc:49: name = gdome_doc_getElementById
0.72223800 0104 [debug] mod_cgdome.cc:52: 2
0.72226700 0104 [debug] mod_cgdome.cc:61: 3
0.72228300 0104 [debug] mod_cgdome.cc:63: 4
0.72251000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1175 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72279500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1176 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72284400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_doc_getElementById'
0.72286200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1176 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72287700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1175 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72289200 0104 [debug] mod_cgdome.cc:65: key=gdome_doc_getElementById
0.72290700 0104 [debug] mod_cgdome.cc:68: 5
0.72313900 0104 [funct] mod_cgdome.cc:29: SOF#1177 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72316800 0105 [debug] mod_cgdome.cc:30: 1
0.72320600 0104 [funct] mod_cgdome.cc:29: EOF#1177 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72322300 0104 [debug] mod_cgdome.cc:74: 6
0.72335000 0104 [debug] mod_cgdome.cc:76: 7
0.72341700 0104 [debug] mod_cgdome.cc:78: 8
0.72343500 0103 [funct] mod_cgdome.cc:38: EOF#1172 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.72364000 0103 [funct] auto-wrappers.cc:1212: SOF#1178 do_gdome_doc_getElementById (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.72386100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1179 ptr_from_v8 (a, a_type='GdomeDocument*') at 0xb413cedd in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72411700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1180 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.72435800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1181 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72440000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDocument*'
0.72441800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1181 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72443300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1180 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.72447700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDocument*', address='135156896'
0.72449600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1179 ptr_from_v8 at 0xb413cedd in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72469500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1182 ptr_from_v8 (a, a_type='GdomeDOMString*') at 0xb413cf29 in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72496800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1183 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.72520900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1184 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72525100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDOMString*'
0.72526900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1184 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72528400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1183 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.72532800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDOMString*', address='134823840'
0.72534600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1182 ptr_from_v8 at 0xb413cf29 in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72559700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1185 ptr_from_v8 (a, a_type='GdomeException*') at 0xb413cf75 in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72585900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1186 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.72611400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1187 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72615700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.72616900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1187 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72617800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1186 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.72622200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.72624100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1185 ptr_from_v8 at 0xb413cf75 in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72625600 0104 [debug] auto-wrappers.cc:1218: Calling cgate_gdome_doc_getElementById(135156896, 134823840, 135034336)
0.72629200 0104 [debug] auto-wrappers.cc:1220: ret = 135576944
0.72649200 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1188 ptr_to_v8 (address=135576944, type='GdomeElement*') at 0xb413d3df in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72675700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1189 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.72701000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1190 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.72704900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1190 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.72706700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1189 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.72710800 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1188 ptr_to_v8 at 0xb413d3df in openjs::extensions::do_gdome_doc_getElementById(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.72712200 0103 [funct] auto-wrappers.cc:1212: EOF#1178 do_gdome_doc_getElementById at 0xb74f574d from /usr/lib/libv8_g.so
0.72806500 0103 [funct] mod_cgdome.cc:38: SOF#1191 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.72810200 0104 [debug] mod_cgdome.cc:44: 1
0.72833200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1192 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72858800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1193 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72863100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_unref'
0.72864900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1193 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72866400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1192 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72867900 0104 [debug] mod_cgdome.cc:49: name = gdome_str_unref
0.72869400 0104 [debug] mod_cgdome.cc:52: 2
0.72871000 0104 [debug] mod_cgdome.cc:61: 3
0.72872500 0104 [debug] mod_cgdome.cc:63: 4
0.72910700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1194 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72938300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1195 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72942400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_unref'
0.72944300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1195 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.72945500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1194 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72948700 0104 [debug] mod_cgdome.cc:65: key=gdome_str_unref
0.72950400 0104 [debug] mod_cgdome.cc:68: 5
0.72976200 0104 [funct] mod_cgdome.cc:29: SOF#1196 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72979900 0105 [debug] mod_cgdome.cc:30: 1
0.72983200 0104 [funct] mod_cgdome.cc:29: EOF#1196 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.72984900 0104 [debug] mod_cgdome.cc:74: 6
0.72998800 0104 [debug] mod_cgdome.cc:76: 7
0.73006800 0104 [debug] mod_cgdome.cc:78: 8
0.73008700 0103 [funct] mod_cgdome.cc:38: EOF#1191 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.73030700 0103 [funct] auto-wrappers.cc:37: SOF#1197 do_gdome_str_unref (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.73054600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1198 ptr_from_v8 (a, a_type='GdomeDOMString*') at 0xb4003294 in openjs::extensions::do_gdome_str_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.73083300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1199 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.73109000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1200 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73112900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDOMString*'
0.73114200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1200 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73115200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1199 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.73119300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDOMString*', address='134823840'
0.73121300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1198 ptr_from_v8 at 0xb4003294 in openjs::extensions::do_gdome_str_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.73122900 0104 [debug] auto-wrappers.cc:41: Calling cgate_gdome_str_unref(134823840)
0.73125700 0103 [funct] auto-wrappers.cc:37: EOF#1197 do_gdome_str_unref at 0xb74f574d from /usr/lib/libv8_g.so
0.73171200 0103 [funct] mod_cgdome.cc:38: SOF#1201 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.73175000 0104 [debug] mod_cgdome.cc:44: 1
0.73199500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1202 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.73231300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1203 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73236100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.73238000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1203 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73239600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1202 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.73242700 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.73244500 0104 [debug] mod_cgdome.cc:52: 2
0.73246100 0104 [debug] mod_cgdome.cc:61: 3
0.73247600 0104 [debug] mod_cgdome.cc:63: 4
0.73271700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1204 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.73299000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1205 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73303500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.73305400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1205 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73307000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1204 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.73308500 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.73310200 0104 [debug] mod_cgdome.cc:68: 5
0.73335700 0104 [funct] mod_cgdome.cc:29: SOF#1206 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.73339400 0105 [debug] mod_cgdome.cc:30: 1
0.73348900 0104 [funct] mod_cgdome.cc:29: EOF#1206 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.73350700 0104 [debug] mod_cgdome.cc:74: 6
0.73364200 0104 [debug] mod_cgdome.cc:76: 7
0.73372200 0104 [debug] mod_cgdome.cc:78: 8
0.73374100 0103 [funct] mod_cgdome.cc:38: EOF#1201 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.73395400 0103 [funct] auto-wrappers.cc:10259: SOF#1207 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.73417700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1208 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.73445400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1209 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.73471000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1210 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73475400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.73477300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1210 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73478900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1209 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.73485800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.73487800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1208 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.73489500 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.73491100 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.73493100 0103 [funct] auto-wrappers.cc:10259: EOF#1207 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.73728000 0103 [funct] basicstream.cc:185: SOF#1211 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.73731700 0104 [debug] basicstream.cc:188: part 1
0.73752300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1212 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.73775000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1213 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73779700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Removing all existing child nodes...
'
0.73781500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1213 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73783100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1212 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.73784700 0104 [debug] basicstream.cc:191: part 2
0.73789000 0104 [debug] basicstream.cc:193: part 3
0.73790800 0104 [debug] basicstream.cc:195: part 4
0.73811600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1214 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.73837500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1215 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.73861200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1216 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73865800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.73867700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1216 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.73869300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1215 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.73875400 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.73877400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1214 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.73879100 0104 [debug] basicstream.cc:198: part 8
0.73888900 0104 [debug] basicstream.cc:200: part 9
0.73891300 0103 [funct] basicstream.cc:185: EOF#1211 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.74088800 0103 [funct] mod_cgdome.cc:38: SOF#1217 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.74094300 0104 [debug] mod_cgdome.cc:44: 1
0.74118200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1218 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74145500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1219 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74150100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.74151500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1219 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74152500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1218 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74153500 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.74155700 0104 [debug] mod_cgdome.cc:52: 2
0.74157300 0104 [debug] mod_cgdome.cc:61: 3
0.74158900 0104 [debug] mod_cgdome.cc:63: 4
0.74182800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1220 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74210000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1221 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74213800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.74219100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1221 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74220800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1220 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74222400 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.74224000 0104 [debug] mod_cgdome.cc:68: 5
0.74249500 0104 [funct] mod_cgdome.cc:29: SOF#1222 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74253300 0105 [debug] mod_cgdome.cc:30: 1
0.74259400 0104 [funct] mod_cgdome.cc:29: EOF#1222 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74261200 0104 [debug] mod_cgdome.cc:74: 6
0.74275000 0104 [debug] mod_cgdome.cc:76: 7
0.74283600 0104 [debug] mod_cgdome.cc:78: 8
0.74285500 0103 [funct] mod_cgdome.cc:38: EOF#1217 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.74307100 0103 [funct] auto-wrappers.cc:4677: SOF#1223 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.74330400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1224 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.74358200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1225 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.74385200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1226 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74389600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.74391500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1226 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74393100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1225 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.74397800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.74399800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1224 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.74420400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1227 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.74447900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1228 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.74473100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1229 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74477600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.74479500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1229 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74481100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1228 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.74486300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.74488200 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1227 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.74489800 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.74492800 0104 [debug] auto-wrappers.cc:4684: ret = 1
0.74494700 0103 [funct] auto-wrappers.cc:4677: EOF#1223 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.74529200 0103 [funct] mod_cgdome.cc:38: SOF#1230 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.74532900 0104 [debug] mod_cgdome.cc:44: 1
0.74561700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1231 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74587700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1232 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74595100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.74596900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1232 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74598500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1231 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74600100 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.74601700 0104 [debug] mod_cgdome.cc:52: 2
0.74603300 0104 [debug] mod_cgdome.cc:61: 3
0.74604800 0104 [debug] mod_cgdome.cc:63: 4
0.74628700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1233 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74654300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1234 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74658400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.74660200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1234 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74661700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1233 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74663200 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.74664700 0104 [debug] mod_cgdome.cc:68: 5
0.74688700 0104 [funct] mod_cgdome.cc:29: SOF#1235 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74692100 0105 [debug] mod_cgdome.cc:30: 1
0.74701000 0104 [funct] mod_cgdome.cc:29: EOF#1235 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.74702700 0104 [debug] mod_cgdome.cc:74: 6
0.74714800 0104 [debug] mod_cgdome.cc:76: 7
0.74722500 0104 [debug] mod_cgdome.cc:78: 8
0.74724300 0103 [funct] mod_cgdome.cc:38: EOF#1230 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.74744100 0103 [funct] auto-wrappers.cc:10259: SOF#1236 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.74765700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1237 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.74793700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1238 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.74818700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1239 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74823100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.74826200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1239 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.74827900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1238 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.74832400 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.74834300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1237 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.74835800 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.74837400 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.74839200 0103 [funct] auto-wrappers.cc:10259: EOF#1236 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.75044500 0103 [funct] mod_cgdome.cc:38: SOF#1240 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.75048400 0104 [debug] mod_cgdome.cc:44: 1
0.75071300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1241 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75096900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1242 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75101100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.75102900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1242 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75104500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1241 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75105900 0104 [debug] mod_cgdome.cc:49: name = gdome_el_lastChild
0.75107500 0104 [debug] mod_cgdome.cc:52: 2
0.75109000 0104 [debug] mod_cgdome.cc:61: 3
0.75110500 0104 [debug] mod_cgdome.cc:63: 4
0.75133000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1243 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75158600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1244 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75162700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.75164500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1244 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75166000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1243 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75167500 0104 [debug] mod_cgdome.cc:65: key=gdome_el_lastChild
0.75170300 0104 [debug] mod_cgdome.cc:68: 5
0.75194300 0104 [funct] mod_cgdome.cc:29: SOF#1245 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75197700 0105 [debug] mod_cgdome.cc:30: 1
0.75203300 0104 [funct] mod_cgdome.cc:29: EOF#1245 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75205000 0104 [debug] mod_cgdome.cc:74: 6
0.75221900 0104 [debug] mod_cgdome.cc:76: 7
0.75225700 0104 [debug] mod_cgdome.cc:78: 8
0.75227500 0103 [funct] mod_cgdome.cc:38: EOF#1240 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.75248100 0103 [funct] auto-wrappers.cc:4518: SOF#1246 do_gdome_el_lastChild (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.75271900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1247 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75299000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1248 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.75323200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1249 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75327400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.75329200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1249 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75330700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1248 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.75335100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.75337000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1247 ptr_from_v8 at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75357000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1250 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75383000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1251 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.75407100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1252 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75410600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.75411800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1252 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75412800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1251 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.75417800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.75419100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1250 ptr_from_v8 at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75420700 0104 [debug] auto-wrappers.cc:4523: Calling cgate_gdome_el_lastChild(135576944, 135034336)
0.75423200 0104 [debug] auto-wrappers.cc:4525: ret = 135810352
0.75443300 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1253 ptr_to_v8 (address=135810352, type='GdomeNode*') at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75471800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1254 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.75497600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1255 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.75501900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1255 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.75503700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1254 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.75508100 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1253 ptr_to_v8 at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75510300 0103 [funct] auto-wrappers.cc:4518: EOF#1246 do_gdome_el_lastChild at 0xb74f574d from /usr/lib/libv8_g.so
0.75544600 0103 [funct] mod_cgdome.cc:38: SOF#1256 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.75554800 0104 [debug] mod_cgdome.cc:44: 1
0.75579800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1257 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75607300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1258 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75611400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.75612700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1258 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75613700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1257 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75614600 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.75615700 0104 [debug] mod_cgdome.cc:52: 2
0.75616700 0104 [debug] mod_cgdome.cc:61: 3
0.75617700 0104 [debug] mod_cgdome.cc:63: 4
0.75652000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1259 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75679800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1260 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75686000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.75687900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1260 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75689500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1259 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75691000 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.75692600 0104 [debug] mod_cgdome.cc:68: 5
0.75717500 0104 [funct] mod_cgdome.cc:29: SOF#1261 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75721200 0105 [debug] mod_cgdome.cc:30: 1
0.75730800 0104 [funct] mod_cgdome.cc:29: EOF#1261 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.75732600 0104 [debug] mod_cgdome.cc:74: 6
0.75746300 0104 [debug] mod_cgdome.cc:76: 7
0.75750200 0104 [debug] mod_cgdome.cc:78: 8
0.75752000 0103 [funct] mod_cgdome.cc:38: EOF#1256 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.75778100 0103 [funct] auto-wrappers.cc:10259: SOF#1262 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.75801300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1263 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75829300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1264 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.75862800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1265 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75867500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.75869400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1265 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.75871000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1264 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.75875700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.75877700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1263 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.75879300 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.75884800 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.75890800 0103 [funct] auto-wrappers.cc:10259: EOF#1262 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.76462900 0103 [funct] mod_cgdome.cc:38: SOF#1266 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.76468600 0104 [debug] mod_cgdome.cc:44: 1
0.76493600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1267 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.76523700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1268 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76527900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.76529800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1268 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76531300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1267 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.76532300 0104 [debug] mod_cgdome.cc:49: name = gdome_el_removeChild
0.76533900 0104 [debug] mod_cgdome.cc:52: 2
0.76535500 0104 [debug] mod_cgdome.cc:61: 3
0.76537100 0104 [debug] mod_cgdome.cc:63: 4
0.76567400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1269 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.76594900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1270 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76599400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.76601300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1270 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76602900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1269 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.76604500 0104 [debug] mod_cgdome.cc:65: key=gdome_el_removeChild
0.76606000 0104 [debug] mod_cgdome.cc:68: 5
0.76631400 0104 [funct] mod_cgdome.cc:29: SOF#1271 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.76635100 0105 [debug] mod_cgdome.cc:30: 1
0.76641500 0104 [funct] mod_cgdome.cc:29: EOF#1271 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.76643300 0104 [debug] mod_cgdome.cc:74: 6
0.76657700 0104 [debug] mod_cgdome.cc:76: 7
0.76661900 0104 [debug] mod_cgdome.cc:78: 8
0.76663800 0103 [funct] mod_cgdome.cc:38: EOF#1266 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.76685800 0103 [funct] auto-wrappers.cc:4641: SOF#1272 do_gdome_el_removeChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.76709500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1273 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.76737900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1274 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.76763800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1275 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76769600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.76771500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1275 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76773100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1274 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.76777800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.76779800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1273 ptr_from_v8 at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.76801100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1276 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.76828700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1277 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.76853800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1278 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76858200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.76860000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1278 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76861600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1277 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.76866400 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135810352'
0.76868400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1276 ptr_from_v8 at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.76896700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1279 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.76924900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1280 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.76951000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1281 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76955200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.76957000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1281 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.76959900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1280 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.76964400 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.76966300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1279 ptr_from_v8 at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.76967900 0104 [debug] auto-wrappers.cc:4647: Calling cgate_gdome_el_removeChild(135576944, 135810352, 135034336)
0.76976700 0104 [debug] auto-wrappers.cc:4649: ret = 135810352
0.76997000 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1282 ptr_to_v8 (address=135810352, type='GdomeNode*') at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77024000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1283 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.77048300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1284 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.77052200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1284 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.77053900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1283 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.77058100 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1282 ptr_to_v8 at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77060200 0103 [funct] auto-wrappers.cc:4641: EOF#1272 do_gdome_el_removeChild at 0xb74f574d from /usr/lib/libv8_g.so
0.77085000 0103 [funct] mod_cgdome.cc:38: SOF#1285 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.77088600 0104 [debug] mod_cgdome.cc:44: 1
0.77109900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1286 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77134100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1287 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77138100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.77139900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1287 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77141400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1286 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77142900 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.77144400 0104 [debug] mod_cgdome.cc:52: 2
0.77146000 0104 [debug] mod_cgdome.cc:61: 3
0.77148700 0104 [debug] mod_cgdome.cc:63: 4
0.77170000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1288 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77194200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1289 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77198200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.77199900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1289 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77201400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1288 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77203000 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.77204500 0104 [debug] mod_cgdome.cc:68: 5
0.77230800 0104 [funct] mod_cgdome.cc:29: SOF#1290 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77234500 0105 [debug] mod_cgdome.cc:30: 1
0.77243400 0104 [funct] mod_cgdome.cc:29: EOF#1290 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77245200 0104 [debug] mod_cgdome.cc:74: 6
0.77258700 0104 [debug] mod_cgdome.cc:76: 7
0.77262400 0104 [debug] mod_cgdome.cc:78: 8
0.77264200 0103 [funct] mod_cgdome.cc:38: EOF#1285 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.77285100 0103 [funct] auto-wrappers.cc:10259: SOF#1291 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.77306700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1292 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77332800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1293 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.77356700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1294 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77360900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.77362700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1294 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77364200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1293 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.77368600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.77370500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1292 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77372100 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.77374900 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.77376800 0103 [funct] auto-wrappers.cc:10259: EOF#1291 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.77444900 0103 [funct] mod_cgdome.cc:38: SOF#1295 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.77448600 0104 [debug] mod_cgdome.cc:44: 1
0.77471200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1296 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77496700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1297 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77501000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.77502700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1297 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77504300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1296 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77505800 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.77507300 0104 [debug] mod_cgdome.cc:52: 2
0.77508900 0104 [debug] mod_cgdome.cc:61: 3
0.77510300 0104 [debug] mod_cgdome.cc:63: 4
0.77532800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1298 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77563500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1299 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77568000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.77569800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1299 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77571300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1298 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77572800 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.77574400 0104 [debug] mod_cgdome.cc:68: 5
0.77600100 0104 [funct] mod_cgdome.cc:29: SOF#1300 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77603700 0105 [debug] mod_cgdome.cc:30: 1
0.77609500 0104 [funct] mod_cgdome.cc:29: EOF#1300 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77611100 0104 [debug] mod_cgdome.cc:74: 6
0.77624100 0104 [debug] mod_cgdome.cc:76: 7
0.77627700 0104 [debug] mod_cgdome.cc:78: 8
0.77629500 0103 [funct] mod_cgdome.cc:38: EOF#1295 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.77649300 0103 [funct] auto-wrappers.cc:4677: SOF#1301 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.77670700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1302 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77697900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1303 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.77721800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1304 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77725900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.77727700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1304 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77729200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1303 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.77733600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.77735500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1302 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77755100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1305 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77780800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1306 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.77804500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1307 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77808700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.77810400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1307 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77811400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1306 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.77815200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.77816500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1305 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.77817400 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.77818500 0104 [debug] auto-wrappers.cc:4684: ret = 1
0.77819800 0103 [funct] auto-wrappers.cc:4677: EOF#1301 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.77850400 0103 [funct] mod_cgdome.cc:38: SOF#1308 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.77854100 0104 [debug] mod_cgdome.cc:44: 1
0.77875400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1309 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77909000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1310 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77912600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.77913800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1310 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77914700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1309 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77915600 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.77916600 0104 [debug] mod_cgdome.cc:52: 2
0.77917500 0104 [debug] mod_cgdome.cc:61: 3
0.77918400 0104 [debug] mod_cgdome.cc:63: 4
0.77941400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1311 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77966500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1312 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77970400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.77972200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1312 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.77973700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1311 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.77975200 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.77976700 0104 [debug] mod_cgdome.cc:68: 5
0.77999000 0104 [funct] mod_cgdome.cc:29: SOF#1313 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78002500 0105 [debug] mod_cgdome.cc:30: 1
0.78011100 0104 [funct] mod_cgdome.cc:29: EOF#1313 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78012200 0104 [debug] mod_cgdome.cc:74: 6
0.78024600 0104 [debug] mod_cgdome.cc:76: 7
0.78028100 0104 [debug] mod_cgdome.cc:78: 8
0.78029900 0103 [funct] mod_cgdome.cc:38: EOF#1308 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.78049100 0103 [funct] auto-wrappers.cc:10259: SOF#1314 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.78070600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1315 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78096400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1316 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78119700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1317 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78125200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.78127000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1317 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78128500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1316 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78132900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.78134800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1315 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78136400 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.78137900 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.78139800 0103 [funct] auto-wrappers.cc:10259: EOF#1314 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.78189200 0103 [funct] mod_cgdome.cc:38: SOF#1318 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.78192800 0104 [debug] mod_cgdome.cc:44: 1
0.78218000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1319 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78243700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1320 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78248000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.78249700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1320 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78251300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1319 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78252800 0104 [debug] mod_cgdome.cc:49: name = gdome_el_lastChild
0.78254300 0104 [debug] mod_cgdome.cc:52: 2
0.78255800 0104 [debug] mod_cgdome.cc:61: 3
0.78259000 0104 [debug] mod_cgdome.cc:63: 4
0.78283300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1321 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78308800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1322 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78312400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.78313500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1322 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78314500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1321 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78316700 0104 [debug] mod_cgdome.cc:65: key=gdome_el_lastChild
0.78317700 0104 [debug] mod_cgdome.cc:68: 5
0.78341600 0104 [funct] mod_cgdome.cc:29: SOF#1323 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78345100 0105 [debug] mod_cgdome.cc:30: 1
0.78350500 0104 [funct] mod_cgdome.cc:29: EOF#1323 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78352200 0104 [debug] mod_cgdome.cc:74: 6
0.78364400 0104 [debug] mod_cgdome.cc:76: 7
0.78367900 0104 [debug] mod_cgdome.cc:78: 8
0.78369700 0103 [funct] mod_cgdome.cc:38: EOF#1318 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.78389600 0103 [funct] auto-wrappers.cc:4518: SOF#1324 do_gdome_el_lastChild (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.78411100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1325 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78437200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1326 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78461400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1327 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78465600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.78467300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1327 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78468900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1326 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78473300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.78475100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1325 ptr_from_v8 at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78495100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1328 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78520900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1329 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78545000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1330 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78554100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.78556000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1330 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78557600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1329 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78564000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.78566000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1328 ptr_from_v8 at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78567500 0104 [debug] auto-wrappers.cc:4523: Calling cgate_gdome_el_lastChild(135576944, 135034336)
0.78569300 0104 [debug] auto-wrappers.cc:4525: ret = 135791936
0.78589300 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1331 ptr_to_v8 (address=135791936, type='GdomeNode*') at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78618000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1332 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.78642000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1333 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.78646000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1333 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.78647700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1332 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.78651900 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1331 ptr_to_v8 at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78653900 0103 [funct] auto-wrappers.cc:4518: EOF#1324 do_gdome_el_lastChild at 0xb74f574d from /usr/lib/libv8_g.so
0.78679300 0103 [funct] mod_cgdome.cc:38: SOF#1334 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.78682900 0104 [debug] mod_cgdome.cc:44: 1
0.78704200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1335 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78728400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1336 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78732300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.78734100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1336 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78735600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1335 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78737100 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.78738700 0104 [debug] mod_cgdome.cc:52: 2
0.78740200 0104 [debug] mod_cgdome.cc:61: 3
0.78741700 0104 [debug] mod_cgdome.cc:63: 4
0.78762800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1337 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78788200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1338 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78792100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.78793900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1338 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78795400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1337 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78796900 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.78798400 0104 [debug] mod_cgdome.cc:68: 5
0.78823600 0104 [funct] mod_cgdome.cc:29: SOF#1339 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78827200 0105 [debug] mod_cgdome.cc:30: 1
0.78836400 0104 [funct] mod_cgdome.cc:29: EOF#1339 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.78838200 0104 [debug] mod_cgdome.cc:74: 6
0.78850400 0104 [debug] mod_cgdome.cc:76: 7
0.78854000 0104 [debug] mod_cgdome.cc:78: 8
0.78855700 0103 [funct] mod_cgdome.cc:38: EOF#1334 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.78876300 0103 [funct] auto-wrappers.cc:10259: SOF#1340 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.78905300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1341 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78933500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1342 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78958900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1343 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78963200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.78965000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1343 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.78966500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1342 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.78970900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.78972800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1341 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.78974300 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.78975900 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.78977700 0103 [funct] auto-wrappers.cc:10259: EOF#1340 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.79045600 0103 [funct] mod_cgdome.cc:38: SOF#1344 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.79049200 0104 [debug] mod_cgdome.cc:44: 1
0.79071800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1345 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79097200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1346 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79101400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.79103200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1346 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79104700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1345 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79106200 0104 [debug] mod_cgdome.cc:49: name = gdome_el_removeChild
0.79107800 0104 [debug] mod_cgdome.cc:52: 2
0.79109300 0104 [debug] mod_cgdome.cc:61: 3
0.79110800 0104 [debug] mod_cgdome.cc:63: 4
0.79133300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1347 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79158700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1348 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79162800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.79164600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1348 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79166100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1347 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79167600 0104 [debug] mod_cgdome.cc:65: key=gdome_el_removeChild
0.79169100 0104 [debug] mod_cgdome.cc:68: 5
0.79192700 0104 [funct] mod_cgdome.cc:29: SOF#1349 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79196200 0105 [debug] mod_cgdome.cc:30: 1
0.79201700 0104 [funct] mod_cgdome.cc:29: EOF#1349 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79203400 0104 [debug] mod_cgdome.cc:74: 6
0.79221300 0104 [debug] mod_cgdome.cc:76: 7
0.79225000 0104 [debug] mod_cgdome.cc:78: 8
0.79226800 0103 [funct] mod_cgdome.cc:38: EOF#1344 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.79246700 0103 [funct] auto-wrappers.cc:4641: SOF#1350 do_gdome_el_removeChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.79269900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1351 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79297100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1352 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79322500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1353 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79326700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.79328500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1353 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79330000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1352 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79334500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.79336300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1351 ptr_from_v8 at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79356300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1354 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79382100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1355 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79406100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1356 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79410200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.79411400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1356 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79412400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1355 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79416200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135791936'
0.79417400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1354 ptr_from_v8 at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79437300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1357 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79463100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1358 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79487200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1359 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79491400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.79494500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1359 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79496100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1358 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79500600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.79502500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1357 ptr_from_v8 at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79504000 0104 [debug] auto-wrappers.cc:4647: Calling cgate_gdome_el_removeChild(135576944, 135791936, 135034336)
0.79510900 0104 [debug] auto-wrappers.cc:4649: ret = 135791936
0.79531000 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1360 ptr_to_v8 (address=135791936, type='GdomeNode*') at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79562600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1361 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.79586900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1362 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.79592900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1362 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.79594100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1361 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.79598600 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1360 ptr_to_v8 at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79600700 0103 [funct] auto-wrappers.cc:4641: EOF#1350 do_gdome_el_removeChild at 0xb74f574d from /usr/lib/libv8_g.so
0.79627500 0103 [funct] mod_cgdome.cc:38: SOF#1363 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.79631100 0104 [debug] mod_cgdome.cc:44: 1
0.79652300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1364 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79676300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1365 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79680300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.79682100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1365 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79683600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1364 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79686300 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.79687900 0104 [debug] mod_cgdome.cc:52: 2
0.79689500 0104 [debug] mod_cgdome.cc:61: 3
0.79691000 0104 [debug] mod_cgdome.cc:63: 4
0.79711500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1366 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79735500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1367 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79739500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.79741200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1367 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79742700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1366 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79744200 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.79745700 0104 [debug] mod_cgdome.cc:68: 5
0.79768100 0104 [funct] mod_cgdome.cc:29: SOF#1368 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79771600 0105 [debug] mod_cgdome.cc:30: 1
0.79780300 0104 [funct] mod_cgdome.cc:29: EOF#1368 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79782100 0104 [debug] mod_cgdome.cc:74: 6
0.79794300 0104 [debug] mod_cgdome.cc:76: 7
0.79797900 0104 [debug] mod_cgdome.cc:78: 8
0.79799600 0103 [funct] mod_cgdome.cc:38: EOF#1363 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.79818200 0103 [funct] auto-wrappers.cc:10259: SOF#1369 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.79839600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1370 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79865400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1371 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79896500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1372 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79900800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.79902600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1372 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.79904100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1371 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.79908600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.79910500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1370 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.79912700 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.79913800 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.79915000 0103 [funct] auto-wrappers.cc:10259: EOF#1369 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.79948900 0103 [funct] mod_cgdome.cc:38: SOF#1373 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.79952500 0104 [debug] mod_cgdome.cc:44: 1
0.79973600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1374 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.79997400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1375 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80001400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.80003100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1375 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80004600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1374 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80006100 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.80007700 0104 [debug] mod_cgdome.cc:52: 2
0.80009200 0104 [debug] mod_cgdome.cc:61: 3
0.80010700 0104 [debug] mod_cgdome.cc:63: 4
0.80031700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1376 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80055400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1377 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80059300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.80061100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1377 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80062700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1376 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80064200 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.80065700 0104 [debug] mod_cgdome.cc:68: 5
0.80087800 0104 [funct] mod_cgdome.cc:29: SOF#1378 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80091200 0105 [debug] mod_cgdome.cc:30: 1
0.80096700 0104 [funct] mod_cgdome.cc:29: EOF#1378 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80098500 0104 [debug] mod_cgdome.cc:74: 6
0.80110700 0104 [debug] mod_cgdome.cc:76: 7
0.80113700 0104 [debug] mod_cgdome.cc:78: 8
0.80114800 0103 [funct] mod_cgdome.cc:38: EOF#1373 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.80135500 0103 [funct] auto-wrappers.cc:4677: SOF#1379 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.80157000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1380 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80182700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1381 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80206300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1382 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80210400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.80211600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1382 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80212600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1381 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80219700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.80221700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1380 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80241500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1383 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80269300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1384 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80294400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1385 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80298500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.80300300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1385 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80301800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1384 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80306200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.80308100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1383 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80309600 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.80310800 0104 [debug] auto-wrappers.cc:4684: ret = 1
0.80312100 0103 [funct] auto-wrappers.cc:4677: EOF#1379 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.80332300 0103 [funct] mod_cgdome.cc:38: SOF#1386 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.80337000 0104 [debug] mod_cgdome.cc:44: 1
0.80358400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1387 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80382400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1388 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80386300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.80388100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1388 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80389600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1387 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80391100 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.80392600 0104 [debug] mod_cgdome.cc:52: 2
0.80394200 0104 [debug] mod_cgdome.cc:61: 3
0.80395700 0104 [debug] mod_cgdome.cc:63: 4
0.80416200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1389 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80440100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1390 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80444100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.80445800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1390 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80447400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1389 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80448900 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.80450400 0104 [debug] mod_cgdome.cc:68: 5
0.80472700 0104 [funct] mod_cgdome.cc:29: SOF#1391 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80476100 0105 [debug] mod_cgdome.cc:30: 1
0.80484800 0104 [funct] mod_cgdome.cc:29: EOF#1391 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80486500 0104 [debug] mod_cgdome.cc:74: 6
0.80498700 0104 [debug] mod_cgdome.cc:76: 7
0.80502300 0104 [debug] mod_cgdome.cc:78: 8
0.80504000 0103 [funct] mod_cgdome.cc:38: EOF#1386 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.80523200 0103 [funct] auto-wrappers.cc:10259: SOF#1392 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.80544600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1393 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80575500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1394 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80602200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1395 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80606700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.80608500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1395 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80610100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1394 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80614700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.80616100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1393 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80617000 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.80618000 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.80619300 0103 [funct] auto-wrappers.cc:10259: EOF#1392 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.80640300 0103 [funct] mod_cgdome.cc:38: SOF#1396 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.80643700 0104 [debug] mod_cgdome.cc:44: 1
0.80664800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1397 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80688500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1398 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80692400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.80694200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1398 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80695700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1397 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80697200 0104 [debug] mod_cgdome.cc:49: name = gdome_el_lastChild
0.80698700 0104 [debug] mod_cgdome.cc:52: 2
0.80700300 0104 [debug] mod_cgdome.cc:61: 3
0.80701800 0104 [debug] mod_cgdome.cc:63: 4
0.80722600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1399 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80746300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1400 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80750200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.80752000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1400 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80754700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1399 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80756300 0104 [debug] mod_cgdome.cc:65: key=gdome_el_lastChild
0.80757800 0104 [debug] mod_cgdome.cc:68: 5
0.80780000 0104 [funct] mod_cgdome.cc:29: SOF#1401 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80783400 0105 [debug] mod_cgdome.cc:30: 1
0.80788900 0104 [funct] mod_cgdome.cc:29: EOF#1401 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.80790600 0104 [debug] mod_cgdome.cc:74: 6
0.80802800 0104 [debug] mod_cgdome.cc:76: 7
0.80806400 0104 [debug] mod_cgdome.cc:78: 8
0.80808100 0103 [funct] mod_cgdome.cc:38: EOF#1396 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.80827500 0103 [funct] auto-wrappers.cc:4518: SOF#1402 do_gdome_el_lastChild (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.80849200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1403 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80875200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1404 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80905600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1405 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80910000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.80911200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1405 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80912100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1404 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80916000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.80917300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1403 ptr_from_v8 at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80939800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1406 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.80966600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1407 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.80990600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1408 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80994700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.80996500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1408 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.80999300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1407 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81003800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.81005700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1406 ptr_from_v8 at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81007300 0104 [debug] auto-wrappers.cc:4523: Calling cgate_gdome_el_lastChild(135576944, 135034336)
0.81009000 0104 [debug] auto-wrappers.cc:4525: ret = 135837368
0.81028800 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1409 ptr_to_v8 (address=135837368, type='GdomeNode*') at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81055100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1410 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.81079100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1411 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.81082900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1411 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.81084700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1410 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.81088900 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1409 ptr_to_v8 at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81091000 0103 [funct] auto-wrappers.cc:4518: EOF#1402 do_gdome_el_lastChild at 0xb74f574d from /usr/lib/libv8_g.so
0.81110800 0103 [funct] mod_cgdome.cc:38: SOF#1412 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.81113700 0104 [debug] mod_cgdome.cc:44: 1
0.81231800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1413 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81259300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1414 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81263900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.81265800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1414 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81267400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1413 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81268900 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.81272200 0104 [debug] mod_cgdome.cc:52: 2
0.81274000 0104 [debug] mod_cgdome.cc:61: 3
0.81275500 0104 [debug] mod_cgdome.cc:63: 4
0.81297700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1415 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81321700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1416 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81325700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.81327500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1416 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81329000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1415 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81330500 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.81332000 0104 [debug] mod_cgdome.cc:68: 5
0.81354400 0104 [funct] mod_cgdome.cc:29: SOF#1417 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81357900 0105 [debug] mod_cgdome.cc:30: 1
0.81367100 0104 [funct] mod_cgdome.cc:29: EOF#1417 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81368900 0104 [debug] mod_cgdome.cc:74: 6
0.81382700 0104 [debug] mod_cgdome.cc:76: 7
0.81386500 0104 [debug] mod_cgdome.cc:78: 8
0.81388200 0103 [funct] mod_cgdome.cc:38: EOF#1412 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.81407700 0103 [funct] auto-wrappers.cc:10259: SOF#1418 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.81429200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1419 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81455300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1420 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81479300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1421 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81483500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.81485300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1421 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81486800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1420 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81491300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.81493200 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1419 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81494700 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.81497600 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.81499600 0103 [funct] auto-wrappers.cc:10259: EOF#1418 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.81521400 0103 [funct] mod_cgdome.cc:38: SOF#1422 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.81524800 0104 [debug] mod_cgdome.cc:44: 1
0.81545900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1423 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81575600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1424 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81579900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.81581600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1424 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81583100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1423 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81584600 0104 [debug] mod_cgdome.cc:49: name = gdome_el_removeChild
0.81586200 0104 [debug] mod_cgdome.cc:52: 2
0.81587700 0104 [debug] mod_cgdome.cc:61: 3
0.81589200 0104 [debug] mod_cgdome.cc:63: 4
0.81612700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1425 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81637100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1426 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81641000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.81642700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1426 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81644200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1425 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81645700 0104 [debug] mod_cgdome.cc:65: key=gdome_el_removeChild
0.81647200 0104 [debug] mod_cgdome.cc:68: 5
0.81669400 0104 [funct] mod_cgdome.cc:29: SOF#1427 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81672800 0105 [debug] mod_cgdome.cc:30: 1
0.81678400 0104 [funct] mod_cgdome.cc:29: EOF#1427 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.81680100 0104 [debug] mod_cgdome.cc:74: 6
0.81692400 0104 [debug] mod_cgdome.cc:76: 7
0.81696000 0104 [debug] mod_cgdome.cc:78: 8
0.81697700 0103 [funct] mod_cgdome.cc:38: EOF#1422 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.81716600 0103 [funct] auto-wrappers.cc:4641: SOF#1428 do_gdome_el_removeChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.81738400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1429 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81765800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1430 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81790000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1431 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81794200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.81796000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1431 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81797500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1430 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81801900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.81803800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1429 ptr_from_v8 at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81823700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1432 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81849400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1433 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81873500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1434 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81877700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.81879400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1434 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81884000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1433 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81892200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135837368'
0.81901000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1432 ptr_from_v8 at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81921200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1435 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81950000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1436 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81974100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1437 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81979700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.81981500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1437 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.81983100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1436 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.81987500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.81989400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1435 ptr_from_v8 at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.81990900 0104 [debug] auto-wrappers.cc:4647: Calling cgate_gdome_el_removeChild(135576944, 135837368, 135034336)
0.81994900 0104 [debug] auto-wrappers.cc:4649: ret = 135837368
0.82015000 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1438 ptr_to_v8 (address=135837368, type='GdomeNode*') at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82041600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1439 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.82065600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1440 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.82069500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1440 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.82071300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1439 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.82075400 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1438 ptr_to_v8 at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82077500 0103 [funct] auto-wrappers.cc:4641: EOF#1428 do_gdome_el_removeChild at 0xb74f574d from /usr/lib/libv8_g.so
0.82097800 0103 [funct] mod_cgdome.cc:38: SOF#1441 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.82101300 0104 [debug] mod_cgdome.cc:44: 1
0.82122500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1442 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82146700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1443 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82150700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.82152400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1443 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82155200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1442 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82156800 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.82158300 0104 [debug] mod_cgdome.cc:52: 2
0.82159900 0104 [debug] mod_cgdome.cc:61: 3
0.82161400 0104 [debug] mod_cgdome.cc:63: 4
0.82182500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1444 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82206600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1445 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82210600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.82211700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1445 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82212700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1444 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82213600 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.82217900 0104 [debug] mod_cgdome.cc:68: 5
0.82240700 0104 [funct] mod_cgdome.cc:29: SOF#1446 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82244200 0105 [debug] mod_cgdome.cc:30: 1
0.82253000 0104 [funct] mod_cgdome.cc:29: EOF#1446 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82254800 0104 [debug] mod_cgdome.cc:74: 6
0.82269500 0104 [debug] mod_cgdome.cc:76: 7
0.82273300 0104 [debug] mod_cgdome.cc:78: 8
0.82275100 0103 [funct] mod_cgdome.cc:38: EOF#1441 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.82295400 0103 [funct] auto-wrappers.cc:10259: SOF#1447 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.82316300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1448 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82342000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1449 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.82365900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1450 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82370100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.82371900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1450 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82373400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1449 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.82379500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.82381400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1448 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82383000 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.82384600 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.82386400 0103 [funct] auto-wrappers.cc:10259: EOF#1447 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.82407600 0103 [funct] mod_cgdome.cc:38: SOF#1451 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.82411100 0104 [debug] mod_cgdome.cc:44: 1
0.82432200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1452 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82456100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1453 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82460000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.82461700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1453 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82463300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1452 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82464700 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.82466300 0104 [debug] mod_cgdome.cc:52: 2
0.82467800 0104 [debug] mod_cgdome.cc:61: 3
0.82469300 0104 [debug] mod_cgdome.cc:63: 4
0.82490200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1454 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82513300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1455 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82516700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.82517800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1455 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82518800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1454 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82519700 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.82521200 0104 [debug] mod_cgdome.cc:68: 5
0.82543300 0104 [funct] mod_cgdome.cc:29: SOF#1456 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82546700 0105 [debug] mod_cgdome.cc:30: 1
0.82557900 0104 [funct] mod_cgdome.cc:29: EOF#1456 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82561000 0104 [debug] mod_cgdome.cc:74: 6
0.82573300 0104 [debug] mod_cgdome.cc:76: 7
0.82576900 0104 [debug] mod_cgdome.cc:78: 8
0.82578600 0103 [funct] mod_cgdome.cc:38: EOF#1451 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.82599100 0103 [funct] auto-wrappers.cc:4677: SOF#1457 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.82622000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1458 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82647700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1459 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.82671500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1460 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82675600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.82677400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1460 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82678900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1459 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.82683300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.82685200 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1458 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82704900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1461 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82730500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1462 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.82754300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1463 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82758400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.82760200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1463 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82761700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1462 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.82766100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.82768000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1461 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.82769500 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.82771200 0104 [debug] auto-wrappers.cc:4684: ret = 1
0.82774200 0103 [funct] auto-wrappers.cc:4677: EOF#1457 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.82794500 0103 [funct] mod_cgdome.cc:38: SOF#1464 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.82798000 0104 [debug] mod_cgdome.cc:44: 1
0.82818600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1465 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82842600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1466 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82846500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.82848300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1466 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82849800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1465 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82851300 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.82852800 0104 [debug] mod_cgdome.cc:52: 2
0.82854400 0104 [debug] mod_cgdome.cc:61: 3
0.82855900 0104 [debug] mod_cgdome.cc:63: 4
0.82876900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1467 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82907600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1468 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82911400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.82912600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1468 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.82913500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1467 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82914400 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.82915300 0104 [debug] mod_cgdome.cc:68: 5
0.82940300 0104 [funct] mod_cgdome.cc:29: SOF#1469 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82944100 0105 [debug] mod_cgdome.cc:30: 1
0.82953600 0104 [funct] mod_cgdome.cc:29: EOF#1469 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.82955400 0104 [debug] mod_cgdome.cc:74: 6
0.82967500 0104 [debug] mod_cgdome.cc:76: 7
0.82971100 0104 [debug] mod_cgdome.cc:78: 8
0.82972900 0103 [funct] mod_cgdome.cc:38: EOF#1464 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.82992100 0103 [funct] auto-wrappers.cc:10259: SOF#1470 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.83012900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1471 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83040200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1472 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83064200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1473 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83068400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.83070200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1473 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83071700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1472 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83076100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.83078000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1471 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83079600 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.83081100 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.83083000 0103 [funct] auto-wrappers.cc:10259: EOF#1470 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.83104100 0103 [funct] mod_cgdome.cc:38: SOF#1474 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.83107500 0104 [debug] mod_cgdome.cc:44: 1
0.83128600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1475 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83152400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1476 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83156300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.83158100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1476 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83159600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1475 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83161100 0104 [debug] mod_cgdome.cc:49: name = gdome_el_lastChild
0.83162600 0104 [debug] mod_cgdome.cc:52: 2
0.83164200 0104 [debug] mod_cgdome.cc:61: 3
0.83165700 0104 [debug] mod_cgdome.cc:63: 4
0.83186500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1477 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83210300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1478 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83218100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.83219400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1478 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83221000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1477 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83222500 0104 [debug] mod_cgdome.cc:65: key=gdome_el_lastChild
0.83224000 0104 [debug] mod_cgdome.cc:68: 5
0.83246300 0104 [funct] mod_cgdome.cc:29: SOF#1479 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83249700 0105 [debug] mod_cgdome.cc:30: 1
0.83255200 0104 [funct] mod_cgdome.cc:29: EOF#1479 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83256900 0104 [debug] mod_cgdome.cc:74: 6
0.83271000 0104 [debug] mod_cgdome.cc:76: 7
0.83274800 0104 [debug] mod_cgdome.cc:78: 8
0.83276600 0103 [funct] mod_cgdome.cc:38: EOF#1474 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.83296800 0103 [funct] auto-wrappers.cc:4518: SOF#1480 do_gdome_el_lastChild (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.83318000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1481 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83343900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1482 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83368000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1483 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83372200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.83374000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1483 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83375500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1482 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83379900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.83381800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1481 ptr_from_v8 at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83401800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1484 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83427600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1485 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83451700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1486 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83457100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.83458900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1486 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83460400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1485 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83464800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.83466700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1484 ptr_from_v8 at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83468300 0104 [debug] auto-wrappers.cc:4523: Calling cgate_gdome_el_lastChild(135576944, 135034336)
0.83470000 0104 [debug] auto-wrappers.cc:4525: ret = 135811128
0.83489800 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1487 ptr_to_v8 (address=135811128, type='GdomeNode*') at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83515500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1488 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.83539400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1489 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.83543300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1489 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.83545100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1488 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.83554800 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1487 ptr_to_v8 at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83557000 0103 [funct] auto-wrappers.cc:4518: EOF#1480 do_gdome_el_lastChild at 0xb74f574d from /usr/lib/libv8_g.so
0.83577300 0103 [funct] mod_cgdome.cc:38: SOF#1490 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.83580800 0104 [debug] mod_cgdome.cc:44: 1
0.83604400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1491 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83629700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1492 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83633700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.83635400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1492 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83637000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1491 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83639600 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.83641300 0104 [debug] mod_cgdome.cc:52: 2
0.83642800 0104 [debug] mod_cgdome.cc:61: 3
0.83644300 0104 [debug] mod_cgdome.cc:63: 4
0.83665400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1493 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83689400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1494 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83693300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.83695100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1494 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83696600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1493 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83698100 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.83699700 0104 [debug] mod_cgdome.cc:68: 5
0.83722000 0104 [funct] mod_cgdome.cc:29: SOF#1495 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83725400 0105 [debug] mod_cgdome.cc:30: 1
0.83734100 0104 [funct] mod_cgdome.cc:29: EOF#1495 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83735900 0104 [debug] mod_cgdome.cc:74: 6
0.83748000 0104 [debug] mod_cgdome.cc:76: 7
0.83751600 0104 [debug] mod_cgdome.cc:78: 8
0.83753400 0103 [funct] mod_cgdome.cc:38: EOF#1490 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.83772500 0103 [funct] auto-wrappers.cc:10259: SOF#1496 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.83794000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1497 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83819100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1498 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83842900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1499 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83847000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.83848800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1499 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83850300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1498 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.83854700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.83857800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1497 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.83859400 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.83861000 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.83862900 0103 [funct] auto-wrappers.cc:10259: EOF#1496 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.83890800 0103 [funct] mod_cgdome.cc:38: SOF#1500 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.83894400 0104 [debug] mod_cgdome.cc:44: 1
0.83915000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1501 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83940500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1502 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83944600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.83946500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1502 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.83948600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1501 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83950200 0104 [debug] mod_cgdome.cc:49: name = gdome_el_removeChild
0.83951800 0104 [debug] mod_cgdome.cc:52: 2
0.83953300 0104 [debug] mod_cgdome.cc:61: 3
0.83954800 0104 [debug] mod_cgdome.cc:63: 4
0.83975600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1503 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.83999300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1504 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84003200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.84005000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1504 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84006500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1503 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84008000 0104 [debug] mod_cgdome.cc:65: key=gdome_el_removeChild
0.84009500 0104 [debug] mod_cgdome.cc:68: 5
0.84031500 0104 [funct] mod_cgdome.cc:29: SOF#1505 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84034900 0105 [debug] mod_cgdome.cc:30: 1
0.84040500 0104 [funct] mod_cgdome.cc:29: EOF#1505 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84042200 0104 [debug] mod_cgdome.cc:74: 6
0.84054400 0104 [debug] mod_cgdome.cc:76: 7
0.84058000 0104 [debug] mod_cgdome.cc:78: 8
0.84059800 0103 [funct] mod_cgdome.cc:38: EOF#1500 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.84080500 0103 [funct] auto-wrappers.cc:4641: SOF#1506 do_gdome_el_removeChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.84102100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1507 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84128100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1508 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84152200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1509 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84156400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.84158200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1509 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84159800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1508 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84164200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.84166100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1507 ptr_from_v8 at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84186000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1510 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84211600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1511 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84239100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1512 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84243400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.84245200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1512 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84246700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1511 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84251200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135811128'
0.84253000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1510 ptr_from_v8 at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84275500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1513 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84302200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1514 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84329400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1515 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84333800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.84335700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1515 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84337300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1514 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84342300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.84344100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1513 ptr_from_v8 at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84345700 0104 [debug] auto-wrappers.cc:4647: Calling cgate_gdome_el_removeChild(135576944, 135811128, 135034336)
0.84350200 0104 [debug] auto-wrappers.cc:4649: ret = 135811128
0.84370800 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1516 ptr_to_v8 (address=135811128, type='GdomeNode*') at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84397300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1517 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.84421200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1518 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.84425100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1518 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.84426800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1517 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.84431000 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1516 ptr_to_v8 at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84433000 0103 [funct] auto-wrappers.cc:4641: EOF#1506 do_gdome_el_removeChild at 0xb74f574d from /usr/lib/libv8_g.so
0.84453200 0103 [funct] mod_cgdome.cc:38: SOF#1519 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.84456600 0104 [debug] mod_cgdome.cc:44: 1
0.84477800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1520 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84501800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1521 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84505700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.84508800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1521 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84510500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1520 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84511400 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.84512300 0104 [debug] mod_cgdome.cc:52: 2
0.84513300 0104 [debug] mod_cgdome.cc:61: 3
0.84514200 0104 [debug] mod_cgdome.cc:63: 4
0.84535300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1522 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84564600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1523 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84568800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.84570600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1523 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84572100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1522 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84573600 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.84575100 0104 [debug] mod_cgdome.cc:68: 5
0.84599600 0104 [funct] mod_cgdome.cc:29: SOF#1524 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84603300 0105 [debug] mod_cgdome.cc:30: 1
0.84611900 0104 [funct] mod_cgdome.cc:29: EOF#1524 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84613100 0104 [debug] mod_cgdome.cc:74: 6
0.84625900 0104 [debug] mod_cgdome.cc:76: 7
0.84629500 0104 [debug] mod_cgdome.cc:78: 8
0.84631200 0103 [funct] mod_cgdome.cc:38: EOF#1519 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.84650400 0103 [funct] auto-wrappers.cc:10259: SOF#1525 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.84671800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1526 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84697500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1527 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84721400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1528 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84725500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.84727300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1528 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84730200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1527 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.84734700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.84736600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1526 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.84738200 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.84739800 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.84741600 0103 [funct] auto-wrappers.cc:10259: EOF#1525 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.84762700 0103 [funct] mod_cgdome.cc:38: SOF#1529 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.84766100 0104 [debug] mod_cgdome.cc:44: 1
0.84788800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1530 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84814200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1531 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84817600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.84818800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1531 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84819700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1530 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84821200 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.84822700 0104 [debug] mod_cgdome.cc:52: 2
0.84824200 0104 [debug] mod_cgdome.cc:61: 3
0.84825700 0104 [debug] mod_cgdome.cc:63: 4
0.84846500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1532 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84870200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1533 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84874100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.84875900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1533 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.84877400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1532 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84878900 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.84880400 0104 [debug] mod_cgdome.cc:68: 5
0.84909000 0104 [funct] mod_cgdome.cc:29: SOF#1534 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84913300 0105 [debug] mod_cgdome.cc:30: 1
0.84918300 0104 [funct] mod_cgdome.cc:29: EOF#1534 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.84919500 0104 [debug] mod_cgdome.cc:74: 6
0.84934000 0104 [debug] mod_cgdome.cc:76: 7
0.84937700 0104 [debug] mod_cgdome.cc:78: 8
0.84939600 0103 [funct] mod_cgdome.cc:38: EOF#1529 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.84959800 0103 [funct] auto-wrappers.cc:4677: SOF#1535 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.84981200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1536 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85007000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1537 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85030700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1538 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85034900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.85036700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1538 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85038200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1537 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85042700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.85044500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1536 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85064100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1539 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85089600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1540 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85112700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1541 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85116300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.85117500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1541 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85118400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1540 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85122800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.85124700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1539 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85127400 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.85129200 0104 [debug] auto-wrappers.cc:4684: ret = 1
0.85131000 0103 [funct] auto-wrappers.cc:4677: EOF#1535 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.85151300 0103 [funct] mod_cgdome.cc:38: SOF#1542 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.85154800 0104 [debug] mod_cgdome.cc:44: 1
0.85176000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1543 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85200000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1544 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85203900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.85205700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1544 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85207200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1543 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85208700 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.85210300 0104 [debug] mod_cgdome.cc:52: 2
0.85211200 0104 [debug] mod_cgdome.cc:61: 3
0.85212100 0104 [debug] mod_cgdome.cc:63: 4
0.85236700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1545 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85261700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1546 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85265800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.85267700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1546 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85269300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1545 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85270800 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.85272400 0104 [debug] mod_cgdome.cc:68: 5
0.85295800 0104 [funct] mod_cgdome.cc:29: SOF#1547 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85299200 0105 [debug] mod_cgdome.cc:30: 1
0.85307900 0104 [funct] mod_cgdome.cc:29: EOF#1547 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85309700 0104 [debug] mod_cgdome.cc:74: 6
0.85322200 0104 [debug] mod_cgdome.cc:76: 7
0.85325800 0104 [debug] mod_cgdome.cc:78: 8
0.85327500 0103 [funct] mod_cgdome.cc:38: EOF#1542 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.85346700 0103 [funct] auto-wrappers.cc:10259: SOF#1548 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.85369400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1549 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85395200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1550 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85418400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1551 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85422500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.85424300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1551 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85425800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1550 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85430200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.85432100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1549 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85433700 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.85435200 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.85437100 0103 [funct] auto-wrappers.cc:10259: EOF#1548 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.85458100 0103 [funct] mod_cgdome.cc:38: SOF#1552 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.85461600 0104 [debug] mod_cgdome.cc:44: 1
0.85482600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1553 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85506300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1554 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85510200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.85511300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1554 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85512300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1553 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85513200 0104 [debug] mod_cgdome.cc:49: name = gdome_el_lastChild
0.85514100 0104 [debug] mod_cgdome.cc:52: 2
0.85515000 0104 [debug] mod_cgdome.cc:61: 3
0.85516000 0104 [debug] mod_cgdome.cc:63: 4
0.85536800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1555 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85565900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1556 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85571200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.85573000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1556 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85574500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1555 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85576000 0104 [debug] mod_cgdome.cc:65: key=gdome_el_lastChild
0.85577600 0104 [debug] mod_cgdome.cc:68: 5
0.85602000 0104 [funct] mod_cgdome.cc:29: SOF#1557 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85605700 0105 [debug] mod_cgdome.cc:30: 1
0.85611100 0104 [funct] mod_cgdome.cc:29: EOF#1557 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85612300 0104 [debug] mod_cgdome.cc:74: 6
0.85625200 0104 [debug] mod_cgdome.cc:76: 7
0.85628800 0104 [debug] mod_cgdome.cc:78: 8
0.85630500 0103 [funct] mod_cgdome.cc:38: EOF#1552 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.85649900 0103 [funct] auto-wrappers.cc:4518: SOF#1558 do_gdome_el_lastChild (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.85671600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1559 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85697600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1560 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85721700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1561 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85725900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.85727700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1561 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85729200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1560 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85733600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.85735500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1559 ptr_from_v8 at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85755300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1562 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85781100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1563 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85805200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1564 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85810600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.85811800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1564 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85812800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1563 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.85816600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.85817900 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1562 ptr_from_v8 at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85818800 0104 [debug] auto-wrappers.cc:4523: Calling cgate_gdome_el_lastChild(135576944, 135034336)
0.85820000 0104 [debug] auto-wrappers.cc:4525: ret = 135625056
0.85839900 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1565 ptr_to_v8 (address=135625056, type='GdomeNode*') at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85866300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1566 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.85896500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1567 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.85900600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1567 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.85902300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1566 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.85906500 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1565 ptr_to_v8 at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.85908500 0103 [funct] auto-wrappers.cc:4518: EOF#1558 do_gdome_el_lastChild at 0xb74f574d from /usr/lib/libv8_g.so
0.85929300 0103 [funct] mod_cgdome.cc:38: SOF#1568 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.85933600 0104 [debug] mod_cgdome.cc:44: 1
0.85956200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1569 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85980200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1570 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85984100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.85985900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1570 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.85989000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1569 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.85990700 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.85992200 0104 [debug] mod_cgdome.cc:52: 2
0.85993700 0104 [debug] mod_cgdome.cc:61: 3
0.85995200 0104 [debug] mod_cgdome.cc:63: 4
0.86019800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1571 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86127200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1572 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86132600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.86134400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1572 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86136000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1571 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86137500 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.86139100 0104 [debug] mod_cgdome.cc:68: 5
0.86162000 0104 [funct] mod_cgdome.cc:29: SOF#1573 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86165500 0105 [debug] mod_cgdome.cc:30: 1
0.86174600 0104 [funct] mod_cgdome.cc:29: EOF#1573 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86176300 0104 [debug] mod_cgdome.cc:74: 6
0.86189900 0104 [debug] mod_cgdome.cc:76: 7
0.86193600 0104 [debug] mod_cgdome.cc:78: 8
0.86195400 0103 [funct] mod_cgdome.cc:38: EOF#1568 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.86218100 0103 [funct] auto-wrappers.cc:10259: SOF#1574 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.86240000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1575 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86268700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1576 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86293800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1577 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86298000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.86299800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1577 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86301300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1576 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86307500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.86309400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1575 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86311000 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.86311900 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.86313200 0103 [funct] auto-wrappers.cc:10259: EOF#1574 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.86336700 0103 [funct] mod_cgdome.cc:38: SOF#1578 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.86340300 0104 [debug] mod_cgdome.cc:44: 1
0.86362300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1579 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86386100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1580 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86390100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.86391900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1580 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86393400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1579 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86394900 0104 [debug] mod_cgdome.cc:49: name = gdome_el_removeChild
0.86396400 0104 [debug] mod_cgdome.cc:52: 2
0.86398000 0104 [debug] mod_cgdome.cc:61: 3
0.86399500 0104 [debug] mod_cgdome.cc:63: 4
0.86419800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1581 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86443600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1582 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86447500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.86449200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1582 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86450800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1581 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86452300 0104 [debug] mod_cgdome.cc:65: key=gdome_el_removeChild
0.86453800 0104 [debug] mod_cgdome.cc:68: 5
0.86480300 0104 [funct] mod_cgdome.cc:29: SOF#1583 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86483800 0105 [debug] mod_cgdome.cc:30: 1
0.86489400 0104 [funct] mod_cgdome.cc:29: EOF#1583 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86492400 0104 [debug] mod_cgdome.cc:74: 6
0.86504900 0104 [debug] mod_cgdome.cc:76: 7
0.86508500 0104 [debug] mod_cgdome.cc:78: 8
0.86510300 0103 [funct] mod_cgdome.cc:38: EOF#1578 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.86529900 0103 [funct] auto-wrappers.cc:4641: SOF#1584 do_gdome_el_removeChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.86556700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1585 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86582900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1586 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86609900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1587 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86613800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.86615500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1587 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86616500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1586 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86620900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.86622800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1585 ptr_from_v8 at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86642700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1588 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86668500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1589 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86692600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1590 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86696800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.86698600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1590 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86700100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1589 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86704500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135625056'
0.86706400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1588 ptr_from_v8 at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86726400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1591 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86753500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1592 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86777600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1593 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86781800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.86783600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1593 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86785100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1592 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.86789500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.86791400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1591 ptr_from_v8 at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86792900 0104 [debug] auto-wrappers.cc:4647: Calling cgate_gdome_el_removeChild(135576944, 135625056, 135034336)
0.86797000 0104 [debug] auto-wrappers.cc:4649: ret = 135625056
0.86817000 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1594 ptr_to_v8 (address=135625056, type='GdomeNode*') at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86843600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1595 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.86867600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1596 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.86871500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1596 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.86873300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1595 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.86877400 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1594 ptr_to_v8 at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.86879400 0103 [funct] auto-wrappers.cc:4641: EOF#1584 do_gdome_el_removeChild at 0xb74f574d from /usr/lib/libv8_g.so
0.86906200 0103 [funct] mod_cgdome.cc:38: SOF#1597 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.86909800 0104 [debug] mod_cgdome.cc:44: 1
0.86932400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1598 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86957900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1599 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86963100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.86964900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1599 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.86966500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1598 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.86968000 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.86969600 0104 [debug] mod_cgdome.cc:52: 2
0.86971100 0104 [debug] mod_cgdome.cc:61: 3
0.86972600 0104 [debug] mod_cgdome.cc:63: 4
0.86993700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1600 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87017000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1601 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87021000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.87022800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1601 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87024300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1600 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87025800 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.87027300 0104 [debug] mod_cgdome.cc:68: 5
0.87049700 0104 [funct] mod_cgdome.cc:29: SOF#1602 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87053100 0105 [debug] mod_cgdome.cc:30: 1
0.87061800 0104 [funct] mod_cgdome.cc:29: EOF#1602 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87063500 0104 [debug] mod_cgdome.cc:74: 6
0.87076200 0104 [debug] mod_cgdome.cc:76: 7
0.87079900 0104 [debug] mod_cgdome.cc:78: 8
0.87081700 0103 [funct] mod_cgdome.cc:38: EOF#1597 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.87101000 0103 [funct] auto-wrappers.cc:10259: SOF#1603 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.87122300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1604 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87148100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1605 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87172100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1606 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87176300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.87179300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1606 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87180900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1605 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87185700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.87187600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1604 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87189100 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.87190700 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.87192600 0103 [funct] auto-wrappers.cc:10259: EOF#1603 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.87213100 0103 [funct] mod_cgdome.cc:38: SOF#1607 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.87219300 0104 [debug] mod_cgdome.cc:44: 1
0.87240700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1608 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87266700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1609 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87270800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.87272700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1609 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87274300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1608 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87275800 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.87277400 0104 [debug] mod_cgdome.cc:52: 2
0.87279000 0104 [debug] mod_cgdome.cc:61: 3
0.87280500 0104 [debug] mod_cgdome.cc:63: 4
0.87302000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1610 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87325800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1611 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87329700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.87331500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1611 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87333000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1610 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87334500 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.87337200 0104 [debug] mod_cgdome.cc:68: 5
0.87359500 0104 [funct] mod_cgdome.cc:29: SOF#1612 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87362900 0105 [debug] mod_cgdome.cc:30: 1
0.87368400 0104 [funct] mod_cgdome.cc:29: EOF#1612 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87370100 0104 [debug] mod_cgdome.cc:74: 6
0.87382400 0104 [debug] mod_cgdome.cc:76: 7
0.87386000 0104 [debug] mod_cgdome.cc:78: 8
0.87387700 0103 [funct] mod_cgdome.cc:38: EOF#1607 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.87406900 0103 [funct] auto-wrappers.cc:4677: SOF#1613 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.87428300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1614 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87453900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1615 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87477800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1616 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87481900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.87483600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1616 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87485200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1615 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87489500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.87491400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1614 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87514800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1617 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87540500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1618 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87570200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1619 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87574700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.87576500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1619 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87578000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1618 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87583600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.87585600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1617 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87587100 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.87588800 0104 [debug] auto-wrappers.cc:4684: ret = 1
0.87590700 0103 [funct] auto-wrappers.cc:4677: EOF#1613 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.87612300 0103 [funct] mod_cgdome.cc:38: SOF#1620 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.87615700 0104 [debug] mod_cgdome.cc:44: 1
0.87637000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1621 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87661100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1622 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87665000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.87666800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1622 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87668300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1621 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87669800 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.87671300 0104 [debug] mod_cgdome.cc:52: 2
0.87672800 0104 [debug] mod_cgdome.cc:61: 3
0.87674300 0104 [debug] mod_cgdome.cc:63: 4
0.87695400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1623 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87718800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1624 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87722700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.87724400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1624 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87726000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1623 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87727400 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.87729000 0104 [debug] mod_cgdome.cc:68: 5
0.87751300 0104 [funct] mod_cgdome.cc:29: SOF#1625 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87754700 0105 [debug] mod_cgdome.cc:30: 1
0.87763400 0104 [funct] mod_cgdome.cc:29: EOF#1625 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87765200 0104 [debug] mod_cgdome.cc:74: 6
0.87777500 0104 [debug] mod_cgdome.cc:76: 7
0.87782400 0104 [debug] mod_cgdome.cc:78: 8
0.87784300 0103 [funct] mod_cgdome.cc:38: EOF#1620 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.87803500 0103 [funct] auto-wrappers.cc:10259: SOF#1626 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.87827600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1627 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87854400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1628 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87878200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1629 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87888700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.87890700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1629 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87892200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1628 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.87896700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.87898500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1627 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.87900100 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.87901700 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.87903500 0103 [funct] auto-wrappers.cc:10259: EOF#1626 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.87925300 0103 [funct] mod_cgdome.cc:38: SOF#1630 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.87928600 0104 [debug] mod_cgdome.cc:44: 1
0.87951400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1631 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87975200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1632 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87979100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.87980900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1632 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.87982400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1631 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.87983900 0104 [debug] mod_cgdome.cc:49: name = gdome_el_lastChild
0.87985400 0104 [debug] mod_cgdome.cc:52: 2
0.87986900 0104 [debug] mod_cgdome.cc:61: 3
0.87988400 0104 [debug] mod_cgdome.cc:63: 4
0.88009300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1633 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88034500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1634 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88038500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.88040200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1634 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88041700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1633 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88043200 0104 [debug] mod_cgdome.cc:65: key=gdome_el_lastChild
0.88044800 0104 [debug] mod_cgdome.cc:68: 5
0.88067000 0104 [funct] mod_cgdome.cc:29: SOF#1635 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88070400 0105 [debug] mod_cgdome.cc:30: 1
0.88075800 0104 [funct] mod_cgdome.cc:29: EOF#1635 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88077500 0104 [debug] mod_cgdome.cc:74: 6
0.88089900 0104 [debug] mod_cgdome.cc:76: 7
0.88093500 0104 [debug] mod_cgdome.cc:78: 8
0.88095200 0103 [funct] mod_cgdome.cc:38: EOF#1630 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.88114000 0103 [funct] auto-wrappers.cc:4518: SOF#1636 do_gdome_el_lastChild (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.88135800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1637 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88161800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1638 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88185900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1639 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88190100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.88191900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1639 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88193400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1638 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88197800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.88199700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1637 ptr_from_v8 at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88222800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1640 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88248900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1641 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88277200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1642 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88281500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.88283900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1642 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88285400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1641 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88289900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.88291800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1640 ptr_from_v8 at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88293300 0104 [debug] auto-wrappers.cc:4523: Calling cgate_gdome_el_lastChild(135576944, 135034336)
0.88295000 0104 [debug] auto-wrappers.cc:4525: ret = 135829688
0.88314300 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1643 ptr_to_v8 (address=135829688, type='GdomeNode*') at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88340800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1644 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.88364900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1645 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.88368800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1645 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.88370500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1644 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.88374700 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1643 ptr_to_v8 at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88376700 0103 [funct] auto-wrappers.cc:4518: EOF#1636 do_gdome_el_lastChild at 0xb74f574d from /usr/lib/libv8_g.so
0.88396900 0103 [funct] mod_cgdome.cc:38: SOF#1646 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.88400400 0104 [debug] mod_cgdome.cc:44: 1
0.88421600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1647 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88445600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1648 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88449500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.88452400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1648 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88454100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1647 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88455600 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.88457100 0104 [debug] mod_cgdome.cc:52: 2
0.88458700 0104 [debug] mod_cgdome.cc:61: 3
0.88460200 0104 [debug] mod_cgdome.cc:63: 4
0.88481300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1649 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88505200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1650 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88509300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.88511000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1650 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88512000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1649 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88512900 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.88513800 0104 [debug] mod_cgdome.cc:68: 5
0.88536200 0104 [funct] mod_cgdome.cc:29: SOF#1651 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88539600 0105 [debug] mod_cgdome.cc:30: 1
0.88553500 0104 [funct] mod_cgdome.cc:29: EOF#1651 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88555300 0104 [debug] mod_cgdome.cc:74: 6
0.88567600 0104 [debug] mod_cgdome.cc:76: 7
0.88571100 0104 [debug] mod_cgdome.cc:78: 8
0.88572900 0103 [funct] mod_cgdome.cc:38: EOF#1646 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.88592900 0103 [funct] auto-wrappers.cc:10259: SOF#1652 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.88615600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1653 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88641400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1654 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88665200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1655 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88669300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.88671100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1655 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88673800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1654 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88678300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.88680200 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1653 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88681800 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.88683300 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.88685200 0103 [funct] auto-wrappers.cc:10259: EOF#1652 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.88706400 0103 [funct] mod_cgdome.cc:38: SOF#1656 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.88709800 0104 [debug] mod_cgdome.cc:44: 1
0.88730900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1657 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88754600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1658 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88758500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.88760300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1658 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88761800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1657 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88763300 0104 [debug] mod_cgdome.cc:49: name = gdome_el_removeChild
0.88764900 0104 [debug] mod_cgdome.cc:52: 2
0.88766400 0104 [debug] mod_cgdome.cc:61: 3
0.88767900 0104 [debug] mod_cgdome.cc:63: 4
0.88788800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1659 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88812000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1660 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88815300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.88816500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1660 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88817400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1659 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88818300 0104 [debug] mod_cgdome.cc:65: key=gdome_el_removeChild
0.88819300 0104 [debug] mod_cgdome.cc:68: 5
0.88841400 0104 [funct] mod_cgdome.cc:29: SOF#1661 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88846100 0105 [debug] mod_cgdome.cc:30: 1
0.88851600 0104 [funct] mod_cgdome.cc:29: EOF#1661 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.88853400 0104 [debug] mod_cgdome.cc:74: 6
0.88865600 0104 [debug] mod_cgdome.cc:76: 7
0.88869200 0104 [debug] mod_cgdome.cc:78: 8
0.88871000 0103 [funct] mod_cgdome.cc:38: EOF#1656 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.88896700 0103 [funct] auto-wrappers.cc:4641: SOF#1662 do_gdome_el_removeChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.88917900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1663 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.88947100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1664 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88971700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1665 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88976000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.88977800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1665 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.88979300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1664 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.88983700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.88985600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1663 ptr_from_v8 at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89005500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1666 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89031300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1667 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89055400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1668 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89059500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.89061300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1668 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89062800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1667 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89067200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135829688'
0.89069100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1666 ptr_from_v8 at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89090200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1669 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89115400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1670 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89139600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1671 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89143700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.89145500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1671 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89147000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1670 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89151400 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.89153300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1669 ptr_from_v8 at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89154900 0104 [debug] auto-wrappers.cc:4647: Calling cgate_gdome_el_removeChild(135576944, 135829688, 135034336)
0.89159400 0104 [debug] auto-wrappers.cc:4649: ret = 135829688
0.89179300 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1672 ptr_to_v8 (address=135829688, type='GdomeNode*') at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89205800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1673 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.89233200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1674 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.89237300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1674 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.89239000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1673 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.89243200 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1672 ptr_to_v8 at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89245300 0103 [funct] auto-wrappers.cc:4641: EOF#1662 do_gdome_el_removeChild at 0xb74f574d from /usr/lib/libv8_g.so
0.89266800 0103 [funct] mod_cgdome.cc:38: SOF#1675 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.89270500 0104 [debug] mod_cgdome.cc:44: 1
0.89292800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1676 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89317600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1677 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89321500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.89323300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1677 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89324800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1676 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89326300 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.89327800 0104 [debug] mod_cgdome.cc:52: 2
0.89329400 0104 [debug] mod_cgdome.cc:61: 3
0.89330900 0104 [debug] mod_cgdome.cc:63: 4
0.89352000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1678 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89375900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1679 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89379800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.89381500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1679 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89383100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1678 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89384500 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.89386100 0104 [debug] mod_cgdome.cc:68: 5
0.89408300 0104 [funct] mod_cgdome.cc:29: SOF#1680 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89411700 0105 [debug] mod_cgdome.cc:30: 1
0.89419800 0104 [funct] mod_cgdome.cc:29: EOF#1680 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89421500 0104 [debug] mod_cgdome.cc:74: 6
0.89433700 0104 [debug] mod_cgdome.cc:76: 7
0.89437300 0104 [debug] mod_cgdome.cc:78: 8
0.89439100 0103 [funct] mod_cgdome.cc:38: EOF#1675 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.89458300 0103 [funct] auto-wrappers.cc:10259: SOF#1681 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.89479600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1682 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89505300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1683 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89529200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1684 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89534600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.89536400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1684 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89538000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1683 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89542300 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.89544200 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1682 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89545800 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.89549600 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.89554700 0103 [funct] auto-wrappers.cc:10259: EOF#1681 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.89575900 0103 [funct] mod_cgdome.cc:38: SOF#1685 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.89579400 0104 [debug] mod_cgdome.cc:44: 1
0.89602100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1686 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89627100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1687 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89631000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.89632800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1687 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89634300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1686 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89635800 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.89637300 0104 [debug] mod_cgdome.cc:52: 2
0.89638900 0104 [debug] mod_cgdome.cc:61: 3
0.89640400 0104 [debug] mod_cgdome.cc:63: 4
0.89661200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1688 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89684900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1689 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89688800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.89690500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1689 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89692100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1688 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89695300 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.89697000 0104 [debug] mod_cgdome.cc:68: 5
0.89718600 0104 [funct] mod_cgdome.cc:29: SOF#1690 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89722100 0105 [debug] mod_cgdome.cc:30: 1
0.89727600 0104 [funct] mod_cgdome.cc:29: EOF#1690 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.89729300 0104 [debug] mod_cgdome.cc:74: 6
0.89741400 0104 [debug] mod_cgdome.cc:76: 7
0.89745000 0104 [debug] mod_cgdome.cc:78: 8
0.89746800 0103 [funct] mod_cgdome.cc:38: EOF#1685 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.89765900 0103 [funct] auto-wrappers.cc:4677: SOF#1691 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.89787200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1692 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89812200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1693 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89835900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1694 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89840000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.89841800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1694 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89843300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1693 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89847700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.89849600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1692 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89869200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1695 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89901600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1696 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89926200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1697 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89930100 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.89931900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1697 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.89933500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1696 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.89939600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.89941600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1695 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.89943200 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.89944900 0104 [debug] auto-wrappers.cc:4684: ret = 1
0.89946900 0103 [funct] auto-wrappers.cc:4677: EOF#1691 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.89967700 0103 [funct] mod_cgdome.cc:38: SOF#1698 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.89971100 0104 [debug] mod_cgdome.cc:44: 1
0.89992300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1699 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90015800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1700 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90019100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.90020300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1700 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90022500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1699 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90024000 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.90025500 0104 [debug] mod_cgdome.cc:52: 2
0.90027000 0104 [debug] mod_cgdome.cc:61: 3
0.90028500 0104 [debug] mod_cgdome.cc:63: 4
0.90049600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1701 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90073500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1702 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90077400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.90079200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1702 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90080700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1701 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90082200 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.90083700 0104 [debug] mod_cgdome.cc:68: 5
0.90106000 0104 [funct] mod_cgdome.cc:29: SOF#1703 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90109400 0105 [debug] mod_cgdome.cc:30: 1
0.90117500 0104 [funct] mod_cgdome.cc:29: EOF#1703 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90119500 0104 [debug] mod_cgdome.cc:74: 6
0.90131800 0104 [debug] mod_cgdome.cc:76: 7
0.90135400 0104 [debug] mod_cgdome.cc:78: 8
0.90137100 0103 [funct] mod_cgdome.cc:38: EOF#1698 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.90156400 0103 [funct] auto-wrappers.cc:10259: SOF#1704 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.90177800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1705 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90203500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1706 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.90230900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1707 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90235300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.90237100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1707 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90238600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1706 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.90243000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.90244900 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1705 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90246500 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.90248100 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.90249900 0103 [funct] auto-wrappers.cc:10259: EOF#1704 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.90273500 0103 [funct] mod_cgdome.cc:38: SOF#1708 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.90277100 0104 [debug] mod_cgdome.cc:44: 1
0.90298900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1709 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90322700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1710 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90326600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.90328400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1710 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90329900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1709 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90331400 0104 [debug] mod_cgdome.cc:49: name = gdome_el_lastChild
0.90334100 0104 [debug] mod_cgdome.cc:52: 2
0.90335700 0104 [debug] mod_cgdome.cc:61: 3
0.90337200 0104 [debug] mod_cgdome.cc:63: 4
0.90358100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1711 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90381900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1712 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90385700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_lastChild'
0.90387500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1712 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90389000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1711 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90390500 0104 [debug] mod_cgdome.cc:65: key=gdome_el_lastChild
0.90392000 0104 [debug] mod_cgdome.cc:68: 5
0.90413600 0104 [funct] mod_cgdome.cc:29: SOF#1713 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90416400 0105 [debug] mod_cgdome.cc:30: 1
0.90421800 0104 [funct] mod_cgdome.cc:29: EOF#1713 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90423500 0104 [debug] mod_cgdome.cc:74: 6
0.90435800 0104 [debug] mod_cgdome.cc:76: 7
0.90439400 0104 [debug] mod_cgdome.cc:78: 8
0.90441200 0103 [funct] mod_cgdome.cc:38: EOF#1708 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.90460500 0103 [funct] auto-wrappers.cc:4518: SOF#1714 do_gdome_el_lastChild (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.90482200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1715 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90508200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1716 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.90532200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1717 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90536400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.90538200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1717 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90539700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1716 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.90544100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.90546000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1715 ptr_from_v8 at 0xb40c76e4 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90571600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1718 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90600400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1719 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.90625800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1720 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90630000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.90631700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1720 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90633300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1719 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.90637700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.90639500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1718 ptr_from_v8 at 0xb40c7730 in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90641100 0104 [debug] auto-wrappers.cc:4523: Calling cgate_gdome_el_lastChild(135576944, 135034336)
0.90642800 0104 [debug] auto-wrappers.cc:4525: ret = 135605808
0.90662600 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1721 ptr_to_v8 (address=135605808, type='GdomeNode*') at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90688800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1722 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.90712200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1723 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.90715500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1723 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.90716700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1722 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.90720200 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1721 ptr_to_v8 at 0xb40c7ada in openjs::extensions::do_gdome_el_lastChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90722200 0103 [funct] auto-wrappers.cc:4518: EOF#1714 do_gdome_el_lastChild at 0xb74f574d from /usr/lib/libv8_g.so
0.90742400 0103 [funct] mod_cgdome.cc:38: SOF#1724 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.90745900 0104 [debug] mod_cgdome.cc:44: 1
0.90767100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1725 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90791100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1726 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90796400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.90798200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1726 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90799800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1725 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90801300 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.90802800 0104 [debug] mod_cgdome.cc:52: 2
0.90804400 0104 [debug] mod_cgdome.cc:61: 3
0.90805900 0104 [debug] mod_cgdome.cc:63: 4
0.90826900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1727 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90850900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1728 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90854800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.90856500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1728 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.90858100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1727 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90859600 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.90861100 0104 [debug] mod_cgdome.cc:68: 5
0.90889900 0104 [funct] mod_cgdome.cc:29: SOF#1729 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90893500 0105 [debug] mod_cgdome.cc:30: 1
0.90902300 0104 [funct] mod_cgdome.cc:29: EOF#1729 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.90904100 0104 [debug] mod_cgdome.cc:74: 6
0.90916300 0104 [debug] mod_cgdome.cc:76: 7
0.90919300 0104 [debug] mod_cgdome.cc:78: 8
0.90921100 0103 [funct] mod_cgdome.cc:38: EOF#1724 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.90943000 0103 [funct] auto-wrappers.cc:10259: SOF#1730 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.90965200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1731 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.90990900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1732 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91014200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1733 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91017700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.91020100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1733 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91021700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1732 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91026200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.91028100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1731 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91029600 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.91031200 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.91033000 0103 [funct] auto-wrappers.cc:10259: EOF#1730 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.91054200 0103 [funct] mod_cgdome.cc:38: SOF#1734 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.91057700 0104 [debug] mod_cgdome.cc:44: 1
0.91078800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1735 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91102500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1736 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91106400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.91108200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1736 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91109700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1735 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91111200 0104 [debug] mod_cgdome.cc:49: name = gdome_el_removeChild
0.91112200 0104 [debug] mod_cgdome.cc:52: 2
0.91113100 0104 [debug] mod_cgdome.cc:61: 3
0.91114000 0104 [debug] mod_cgdome.cc:63: 4
0.91210700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1737 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91240200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1738 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91244500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_removeChild'
0.91246300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1738 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91247800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1737 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91250700 0104 [debug] mod_cgdome.cc:65: key=gdome_el_removeChild
0.91252400 0104 [debug] mod_cgdome.cc:68: 5
0.91276600 0104 [funct] mod_cgdome.cc:29: SOF#1739 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91280400 0105 [debug] mod_cgdome.cc:30: 1
0.91287100 0104 [funct] mod_cgdome.cc:29: EOF#1739 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91288800 0104 [debug] mod_cgdome.cc:74: 6
0.91302000 0104 [debug] mod_cgdome.cc:76: 7
0.91305700 0104 [debug] mod_cgdome.cc:78: 8
0.91307400 0103 [funct] mod_cgdome.cc:38: EOF#1734 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.91327000 0103 [funct] auto-wrappers.cc:4641: SOF#1740 do_gdome_el_removeChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.91348700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1741 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91375000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1742 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91399200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1743 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91403500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.91405200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1743 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91406800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1742 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91411200 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.91412500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1741 ptr_from_v8 at 0xb40bf0b1 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91432300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1744 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91458100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1745 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91482200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1746 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91486400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.91488200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1746 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91489700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1745 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91495600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135605808'
0.91497500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1744 ptr_from_v8 at 0xb40bf103 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91516900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1747 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91542800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1748 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91572000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1749 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91576400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.91578200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1749 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91579700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1748 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91584100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.91586000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1747 ptr_from_v8 at 0xb40bf14f in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91587600 0104 [debug] auto-wrappers.cc:4647: Calling cgate_gdome_el_removeChild(135576944, 135605808, 135034336)
0.91593500 0104 [debug] auto-wrappers.cc:4649: ret = 135605808
0.91614300 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1750 ptr_to_v8 (address=135605808, type='GdomeNode*') at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91641600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1751 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.91665600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1752 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.91669500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1752 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.91671200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1751 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.91675400 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1750 ptr_to_v8 at 0xb40bf521 in openjs::extensions::do_gdome_el_removeChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91677500 0103 [funct] auto-wrappers.cc:4641: EOF#1740 do_gdome_el_removeChild at 0xb74f574d from /usr/lib/libv8_g.so
0.91697800 0103 [funct] mod_cgdome.cc:38: SOF#1753 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.91701300 0104 [debug] mod_cgdome.cc:44: 1
0.91723800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1754 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91748000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1755 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91751900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.91753700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1755 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91755200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1754 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91756700 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.91758200 0104 [debug] mod_cgdome.cc:52: 2
0.91759800 0104 [debug] mod_cgdome.cc:61: 3
0.91761300 0104 [debug] mod_cgdome.cc:63: 4
0.91782300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1756 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91806300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1757 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91810200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.91811700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1757 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91812600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1756 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91813500 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.91814500 0104 [debug] mod_cgdome.cc:68: 5
0.91836800 0104 [funct] mod_cgdome.cc:29: SOF#1758 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91840300 0105 [debug] mod_cgdome.cc:30: 1
0.91849100 0104 [funct] mod_cgdome.cc:29: EOF#1758 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.91850800 0104 [debug] mod_cgdome.cc:74: 6
0.91863100 0104 [debug] mod_cgdome.cc:76: 7
0.91866700 0104 [debug] mod_cgdome.cc:78: 8
0.91868500 0103 [funct] mod_cgdome.cc:38: EOF#1753 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.91894300 0103 [funct] auto-wrappers.cc:10259: SOF#1759 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.91915500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1760 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91943100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1761 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91969100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1762 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91973400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.91975100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1762 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.91976700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1761 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.91981100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.91983000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1760 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.91984600 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.91986100 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.91988000 0103 [funct] auto-wrappers.cc:10259: EOF#1759 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.92009400 0103 [funct] mod_cgdome.cc:38: SOF#1763 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.92012200 0104 [debug] mod_cgdome.cc:44: 1
0.92033300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1764 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92059500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1765 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92063700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.92065500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1765 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92067100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1764 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92069200 0104 [debug] mod_cgdome.cc:49: name = gdome_el_hasChildNodes
0.92070800 0104 [debug] mod_cgdome.cc:52: 2
0.92072300 0104 [debug] mod_cgdome.cc:61: 3
0.92073800 0104 [debug] mod_cgdome.cc:63: 4
0.92094600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1766 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92117800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1767 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92121700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_hasChildNodes'
0.92123400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1767 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92126100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1766 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92127700 0104 [debug] mod_cgdome.cc:65: key=gdome_el_hasChildNodes
0.92129300 0104 [debug] mod_cgdome.cc:68: 5
0.92151500 0104 [funct] mod_cgdome.cc:29: SOF#1768 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92154900 0105 [debug] mod_cgdome.cc:30: 1
0.92160400 0104 [funct] mod_cgdome.cc:29: EOF#1768 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92162200 0104 [debug] mod_cgdome.cc:74: 6
0.92174500 0104 [debug] mod_cgdome.cc:76: 7
0.92178100 0104 [debug] mod_cgdome.cc:78: 8
0.92179800 0103 [funct] mod_cgdome.cc:38: EOF#1763 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.92199000 0103 [funct] auto-wrappers.cc:4677: SOF#1769 do_gdome_el_hasChildNodes (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.92223700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1770 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.92249600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1771 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92275200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1772 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92279500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.92282000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1772 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92283500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1771 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92287900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.92289800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1770 ptr_from_v8 at 0xb3fa70d4 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.92309400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1773 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.92334800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1774 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92358600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1775 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92362700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.92364500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1775 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92367200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1774 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92371700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.92373600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1773 ptr_from_v8 at 0xb3fa7120 in openjs::extensions::do_gdome_el_hasChildNodes(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.92375200 0104 [debug] auto-wrappers.cc:4682: Calling cgate_gdome_el_hasChildNodes(135576944, 135034336)
0.92376800 0104 [debug] auto-wrappers.cc:4684: ret = 0
0.92378700 0103 [funct] auto-wrappers.cc:4677: EOF#1769 do_gdome_el_hasChildNodes at 0xb74f574d from /usr/lib/libv8_g.so
0.92398900 0103 [funct] mod_cgdome.cc:38: SOF#1776 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.92402300 0104 [debug] mod_cgdome.cc:44: 1
0.92423500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1777 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92447600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1778 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92451600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.92453400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1778 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92454900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1777 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92456400 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.92457900 0104 [debug] mod_cgdome.cc:52: 2
0.92459500 0104 [debug] mod_cgdome.cc:61: 3
0.92460900 0104 [debug] mod_cgdome.cc:63: 4
0.92481900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1779 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92505900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1780 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92509900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.92511400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1780 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92512400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1779 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92513300 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.92514200 0104 [debug] mod_cgdome.cc:68: 5
0.92536500 0104 [funct] mod_cgdome.cc:29: SOF#1781 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92541300 0105 [debug] mod_cgdome.cc:30: 1
0.92555200 0104 [funct] mod_cgdome.cc:29: EOF#1781 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.92557100 0104 [debug] mod_cgdome.cc:74: 6
0.92569200 0104 [debug] mod_cgdome.cc:76: 7
0.92572800 0104 [debug] mod_cgdome.cc:78: 8
0.92574600 0103 [funct] mod_cgdome.cc:38: EOF#1776 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.92595900 0103 [funct] auto-wrappers.cc:10259: SOF#1782 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.92618500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1783 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.92644200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1784 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92668000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1785 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92672200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.92674000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1785 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92675500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1784 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92679900 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.92681800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1783 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.92683300 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.92684900 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.92686800 0103 [funct] auto-wrappers.cc:10259: EOF#1782 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.92708700 0103 [funct] basicstream.cc:185: SOF#1786 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.92711900 0104 [debug] basicstream.cc:188: part 1
0.92730300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1787 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.92751300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1788 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92755600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Creating new text node
'
0.92757400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1788 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92758900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1787 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.92761700 0104 [debug] basicstream.cc:191: part 2
0.92765500 0104 [debug] basicstream.cc:193: part 3
0.92767200 0104 [debug] basicstream.cc:195: part 4
0.92787300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1789 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.92811300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1790 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92833500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1791 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92837600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.92839400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1791 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92841100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1790 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.92846800 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.92848800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1789 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.92850300 0104 [debug] basicstream.cc:198: part 8
0.92852900 0104 [debug] basicstream.cc:200: part 9
0.92854900 0103 [funct] basicstream.cc:185: EOF#1786 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.92876100 0103 [funct] basicstream.cc:185: SOF#1792 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.92879700 0104 [debug] basicstream.cc:188: part 1
0.92906700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1793 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.92929800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1794 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92934200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`1/2
'
0.92936000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1794 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.92937600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1793 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.92939200 0104 [debug] basicstream.cc:191: part 2
0.92943000 0104 [debug] basicstream.cc:193: part 3
0.92944800 0104 [debug] basicstream.cc:195: part 4
0.92965500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1795 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.92989500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1796 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.93012400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1797 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93016000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.93017200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1797 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93018100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1796 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.93023700 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.93025700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1795 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.93027300 0104 [debug] basicstream.cc:198: part 8
0.93029200 0104 [debug] basicstream.cc:200: part 9
0.93031200 0103 [funct] basicstream.cc:185: EOF#1792 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.93324200 0103 [funct] mod_cgdome.cc:38: SOF#1798 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.93328300 0104 [debug] mod_cgdome.cc:44: 1
0.93351400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1799 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93377100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1800 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93381400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_mkref_dup'
0.93383200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1800 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93384800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1799 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93386300 0104 [debug] mod_cgdome.cc:49: name = gdome_str_mkref_dup
0.93387800 0104 [debug] mod_cgdome.cc:52: 2
0.93389400 0104 [debug] mod_cgdome.cc:61: 3
0.93390900 0104 [debug] mod_cgdome.cc:63: 4
0.93412800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1801 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93438300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1802 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93442500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_mkref_dup'
0.93444300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1802 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93447100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1801 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93448800 0104 [debug] mod_cgdome.cc:65: key=gdome_str_mkref_dup
0.93450300 0104 [debug] mod_cgdome.cc:68: 5
0.93474200 0104 [funct] mod_cgdome.cc:29: SOF#1803 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93477700 0105 [debug] mod_cgdome.cc:30: 1
0.93480800 0104 [funct] mod_cgdome.cc:29: EOF#1803 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93482400 0104 [debug] mod_cgdome.cc:74: 6
0.93495200 0104 [debug] mod_cgdome.cc:76: 7
0.93498900 0104 [debug] mod_cgdome.cc:78: 8
0.93500700 0103 [funct] mod_cgdome.cc:38: EOF#1798 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.93520000 0103 [funct] auto-wrappers.cc:5: SOF#1804 do_gdome_str_mkref_dup (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.93542100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1805 convert<std::string,v8::Local<v8::Value>> (value) at 0xb4166443 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.93570700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1806 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93575000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Input'
0.93576800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1806 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93578300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1805 convert<std::string,v8::Local<v8::Value>> at 0xb4166443 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.93579800 0104 [debug] auto-wrappers.cc:10: Calling cgate_gdome_str_mkref_dup(Input)
0.93581600 0104 [debug] auto-wrappers.cc:12: ret = 135157272
0.93602900 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1807 ptr_to_v8 (address=135157272, type='GdomeDOMString*') at 0xb41667b7 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.93631000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1808 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.93655100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1809 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.93659100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1809 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.93660800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1808 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.93665000 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1807 ptr_to_v8 at 0xb41667b7 in openjs::extensions::do_gdome_str_mkref_dup(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.93668900 0103 [funct] auto-wrappers.cc:5: EOF#1804 do_gdome_str_mkref_dup at 0xb74f574d from /usr/lib/libv8_g.so
0.93723700 0103 [funct] mod_cgdome.cc:38: SOF#1810 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.93727300 0104 [debug] mod_cgdome.cc:44: 1
0.93749900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1811 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93775500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1812 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93779700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_doc_createTextNode'
0.93781500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1812 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93783100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1811 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93784600 0104 [debug] mod_cgdome.cc:49: name = gdome_doc_createTextNode
0.93786100 0104 [debug] mod_cgdome.cc:52: 2
0.93787700 0104 [debug] mod_cgdome.cc:61: 3
0.93789200 0104 [debug] mod_cgdome.cc:63: 4
0.93811500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1813 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93836900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1814 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93841000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_doc_createTextNode'
0.93842800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1814 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.93844400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1813 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93845900 0104 [debug] mod_cgdome.cc:65: key=gdome_doc_createTextNode
0.93847400 0104 [debug] mod_cgdome.cc:68: 5
0.93871000 0104 [funct] mod_cgdome.cc:29: SOF#1815 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93874400 0105 [debug] mod_cgdome.cc:30: 1
0.93877900 0104 [funct] mod_cgdome.cc:29: EOF#1815 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.93879600 0104 [debug] mod_cgdome.cc:74: 6
0.93899100 0104 [debug] mod_cgdome.cc:76: 7
0.93902700 0104 [debug] mod_cgdome.cc:78: 8
0.93904500 0103 [funct] mod_cgdome.cc:38: EOF#1810 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.93925800 0103 [funct] auto-wrappers.cc:1009: SOF#1816 do_gdome_doc_createTextNode (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.93950300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1817 ptr_from_v8 (a, a_type='GdomeDocument*') at 0xb414a04d in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.93978200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1818 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94002400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1819 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94006600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDocument*'
0.94008400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1819 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94009900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1818 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94013700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDocument*', address='135156896'
0.94015000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1817 ptr_from_v8 at 0xb414a04d in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94034900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1820 ptr_from_v8 (a, a_type='GdomeDOMString*') at 0xb414a099 in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94060800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1821 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94084800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1822 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94088900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDOMString*'
0.94090700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1822 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94092200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1821 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94096600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDOMString*', address='135157272'
0.94098500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1820 ptr_from_v8 at 0xb414a099 in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94117800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1823 ptr_from_v8 (a, a_type='GdomeException*') at 0xb414a0e5 in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94143600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1824 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94167600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1825 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94173000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.94174800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1825 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94176400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1824 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94181100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.94183000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1823 ptr_from_v8 at 0xb414a0e5 in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94184600 0104 [debug] auto-wrappers.cc:1015: Calling cgate_gdome_doc_createTextNode(135156896, 135157272, 135034336)
0.94187200 0104 [debug] auto-wrappers.cc:1017: ret = 135792432
0.94207300 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1826 ptr_to_v8 (address=135792432, type='GdomeText*') at 0xb414a54f in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94237200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1827 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.94263700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1828 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.94267900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1828 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.94269800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1827 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.94274300 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1826 ptr_to_v8 at 0xb414a54f in openjs::extensions::do_gdome_doc_createTextNode(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94276500 0103 [funct] auto-wrappers.cc:1009: EOF#1816 do_gdome_doc_createTextNode at 0xb74f574d from /usr/lib/libv8_g.so
0.94319400 0103 [funct] mod_cgdome.cc:38: SOF#1829 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.94323400 0104 [debug] mod_cgdome.cc:44: 1
0.94347800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1830 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94375300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1831 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94379900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_unref'
0.94381800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1831 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94385000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1830 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94386700 0104 [debug] mod_cgdome.cc:49: name = gdome_str_unref
0.94388400 0104 [debug] mod_cgdome.cc:52: 2
0.94390000 0104 [debug] mod_cgdome.cc:61: 3
0.94391500 0104 [debug] mod_cgdome.cc:63: 4
0.94415000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1832 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94442300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1833 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94446800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_str_unref'
0.94448600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1833 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94449600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1832 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94450600 0104 [debug] mod_cgdome.cc:65: key=gdome_str_unref
0.94452200 0104 [debug] mod_cgdome.cc:68: 5
0.94477600 0104 [funct] mod_cgdome.cc:29: SOF#1834 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94481200 0105 [debug] mod_cgdome.cc:30: 1
0.94484500 0104 [funct] mod_cgdome.cc:29: EOF#1834 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94486200 0104 [debug] mod_cgdome.cc:74: 6
0.94499800 0104 [debug] mod_cgdome.cc:76: 7
0.94503700 0104 [debug] mod_cgdome.cc:78: 8
0.94505500 0103 [funct] mod_cgdome.cc:38: EOF#1829 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.94526900 0103 [funct] auto-wrappers.cc:37: SOF#1835 do_gdome_str_unref (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.94556400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1836 ptr_from_v8 (a, a_type='GdomeDOMString*') at 0xb4003294 in openjs::extensions::do_gdome_str_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94584800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1837 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94610400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1838 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94614300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDOMString*'
0.94615500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1838 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94616600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1837 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94622600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDOMString*', address='135157272'
0.94624600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1836 ptr_from_v8 at 0xb4003294 in openjs::extensions::do_gdome_str_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94626200 0104 [debug] auto-wrappers.cc:41: Calling cgate_gdome_str_unref(135157272)
0.94627800 0103 [funct] auto-wrappers.cc:37: EOF#1835 do_gdome_str_unref at 0xb74f574d from /usr/lib/libv8_g.so
0.94654100 0103 [funct] mod_cgdome.cc:38: SOF#1839 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.94657800 0104 [debug] mod_cgdome.cc:44: 1
0.94680500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1840 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94706100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1841 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94709900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.94711700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1841 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94712700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1840 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94713700 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.94714700 0104 [debug] mod_cgdome.cc:52: 2
0.94715700 0104 [debug] mod_cgdome.cc:61: 3
0.94716700 0104 [debug] mod_cgdome.cc:63: 4
0.94739200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1842 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94764700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1843 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94768900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.94770700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1843 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94772300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1842 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94773900 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.94774900 0104 [debug] mod_cgdome.cc:68: 5
0.94798800 0104 [funct] mod_cgdome.cc:29: SOF#1844 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94801800 0105 [debug] mod_cgdome.cc:30: 1
0.94811800 0104 [funct] mod_cgdome.cc:29: EOF#1844 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.94813000 0104 [debug] mod_cgdome.cc:74: 6
0.94826300 0104 [debug] mod_cgdome.cc:76: 7
0.94830100 0104 [debug] mod_cgdome.cc:78: 8
0.94831900 0103 [funct] mod_cgdome.cc:38: EOF#1839 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.94853900 0103 [funct] auto-wrappers.cc:10259: SOF#1845 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.94876800 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1846 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94911500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1847 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94937200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1848 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94941700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.94943600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1848 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.94945200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1847 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.94949800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.94951800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1846 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.94953400 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.94955000 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.94957000 0103 [funct] auto-wrappers.cc:10259: EOF#1845 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.95170700 0103 [funct] basicstream.cc:185: SOF#1849 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.95175000 0104 [debug] basicstream.cc:188: part 1
0.95194900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1850 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.95220400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1851 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95224600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`2/2
'
0.95226500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1851 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95228100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1850 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.95229700 0104 [debug] basicstream.cc:191: part 2
0.95233300 0104 [debug] basicstream.cc:193: part 3
0.95235100 0104 [debug] basicstream.cc:195: part 4
0.95256500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1852 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.95282200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1853 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.95307500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1854 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95311400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.95312700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1854 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95313700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1853 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.95319200 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.95321200 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1852 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.95322800 0104 [debug] basicstream.cc:198: part 8
0.95325200 0104 [debug] basicstream.cc:200: part 9
0.95327300 0103 [funct] basicstream.cc:185: EOF#1849 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.95427100 0103 [funct] mod_cgdome.cc:38: SOF#1855 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.95431100 0104 [debug] mod_cgdome.cc:44: 1
0.95455600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1856 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.95483000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1857 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95486900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_cast_text_to_node'
0.95488800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1857 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95490400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1856 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.95491900 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_cast_text_to_node
0.95493500 0104 [debug] mod_cgdome.cc:52: 2
0.95495200 0104 [debug] mod_cgdome.cc:61: 3
0.95496700 0104 [debug] mod_cgdome.cc:63: 4
0.95520200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1858 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.95551200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1859 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95559500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_cast_text_to_node'
0.95561300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1859 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95564500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1858 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.95566200 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_cast_text_to_node
0.95567900 0104 [debug] mod_cgdome.cc:68: 5
0.95593800 0104 [funct] mod_cgdome.cc:29: SOF#1860 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.95597500 0105 [debug] mod_cgdome.cc:30: 1
0.95607000 0104 [funct] mod_cgdome.cc:29: EOF#1860 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.95608700 0104 [debug] mod_cgdome.cc:74: 6
0.95622700 0104 [debug] mod_cgdome.cc:76: 7
0.95626100 0104 [debug] mod_cgdome.cc:78: 8
0.95628000 0103 [funct] mod_cgdome.cc:38: EOF#1855 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.95650000 0103 [funct] auto-wrappers.cc:10307: SOF#1861 do_gdome_extra_cast_text_to_node (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.95673200 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1862 ptr_from_v8 (a, a_type='GdomeText*') at 0xb40057a4 in openjs::extensions::do_gdome_extra_cast_text_to_node(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.95702400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1863 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.95726700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1864 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95731000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeText*'
0.95732800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1864 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.95734300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1863 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.95738700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeText*', address='135792432'
0.95740600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1862 ptr_from_v8 at 0xb40057a4 in openjs::extensions::do_gdome_extra_cast_text_to_node(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.95742200 0104 [debug] auto-wrappers.cc:10311: Calling cgate_gdome_extra_cast_text_to_node(135792432)
0.95743800 0104 [debug] auto-wrappers.cc:10313: ret = 135792432
0.95763700 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1865 ptr_to_v8 (address=135792432, type='GdomeNode*') at 0xb4005b0c in openjs::extensions::do_gdome_extra_cast_text_to_node(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.95790500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1866 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.95814100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1867 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.95818900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1867 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.95820100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1866 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.95824300 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1865 ptr_to_v8 at 0xb4005b0c in openjs::extensions::do_gdome_extra_cast_text_to_node(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.95826300 0103 [funct] auto-wrappers.cc:10307: EOF#1861 do_gdome_extra_cast_text_to_node at 0xb74f574d from /usr/lib/libv8_g.so
0.96113200 0103 [funct] mod_cgdome.cc:38: SOF#1868 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.96116500 0104 [debug] mod_cgdome.cc:44: 1
0.96139300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1869 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96164900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1870 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96169200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_appendChild'
0.96171000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1870 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96172500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1869 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96174000 0104 [debug] mod_cgdome.cc:49: name = gdome_el_appendChild
0.96175500 0104 [debug] mod_cgdome.cc:52: 2
0.96177100 0104 [debug] mod_cgdome.cc:61: 3
0.96178600 0104 [debug] mod_cgdome.cc:63: 4
0.96311200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1871 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96338900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1872 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96343400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_appendChild'
0.96345300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1872 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96346800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1871 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96348300 0104 [debug] mod_cgdome.cc:65: key=gdome_el_appendChild
0.96349900 0104 [debug] mod_cgdome.cc:68: 5
0.96373800 0104 [funct] mod_cgdome.cc:29: SOF#1873 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96377300 0105 [debug] mod_cgdome.cc:30: 1
0.96385400 0104 [funct] mod_cgdome.cc:29: EOF#1873 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96387100 0104 [debug] mod_cgdome.cc:74: 6
0.96403800 0104 [debug] mod_cgdome.cc:76: 7
0.96407900 0104 [debug] mod_cgdome.cc:78: 8
0.96409700 0103 [funct] mod_cgdome.cc:38: EOF#1868 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.96430200 0103 [funct] auto-wrappers.cc:4659: SOF#1874 do_gdome_el_appendChild (args[3]) at 0xb74f574d from /usr/lib/libv8_g.so
0.96452300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1875 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb40bdd94 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96478900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1876 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.96503100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1877 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96507400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.96509200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1877 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96510700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1876 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.96514600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.96515900 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1875 ptr_from_v8 at 0xb40bdd94 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96535900 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1878 ptr_from_v8 (a, a_type='GdomeNode*') at 0xb40bdde6 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96567700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1879 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.96593900 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1880 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96598400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeNode*'
0.96600200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1880 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96601800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1879 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.96606500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeNode*', address='135792432'
0.96608500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1878 ptr_from_v8 at 0xb40bdde6 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96630700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1881 ptr_from_v8 (a, a_type='GdomeException*') at 0xb40bde32 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96656700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1882 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.96680800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1883 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96685800 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.96687700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1883 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96689300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1882 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.96694000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.96696000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1881 ptr_from_v8 at 0xb40bde32 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96697600 0104 [debug] auto-wrappers.cc:4665: Calling cgate_gdome_el_appendChild(135576944, 135792432, 135034336)
0.96703200 0104 [debug] auto-wrappers.cc:4667: ret = 135792432
0.96725400 0104 [funct] ../../core/pointer_helpers.h:28: SOF#1884 ptr_to_v8 (address=135792432, type='GdomeNode*') at 0xb40be247 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96754500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: SOF#1885 convert<v8::Handle<v8::Value>,std::string> (value) at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.96780300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: SOF#1886 do_string_convert_to_v8 (value) at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.96784600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:324: EOF#1886 do_string_convert_to_v8 at 0xb42afaeb in v8::Handle<v8::Value> sendanor::convert<v8::Handle<v8::Value>, std::string>(std::string const&) from /usr/lib/openjs/loader.so
0.96786400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:113: EOF#1885 convert<v8::Handle<v8::Value>,std::string> at 0xb4293354 in openjs::ptr_to_v8(unsigned int, std::string const&) from /usr/lib/openjs/loader.so
0.96791000 0104 [funct] ../../core/pointer_helpers.h:28: EOF#1884 ptr_to_v8 at 0xb40be247 in openjs::extensions::do_gdome_el_appendChild(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.96793200 0103 [funct] auto-wrappers.cc:4659: EOF#1874 do_gdome_el_appendChild at 0xb74f574d from /usr/lib/libv8_g.so
0.96819900 0103 [funct] mod_cgdome.cc:38: SOF#1887 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.96823100 0104 [debug] mod_cgdome.cc:44: 1
0.96845900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1888 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96871600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1889 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96877500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.96879400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1889 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96884900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1888 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96890900 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.96892600 0104 [debug] mod_cgdome.cc:52: 2
0.96894300 0104 [debug] mod_cgdome.cc:61: 3
0.96895800 0104 [debug] mod_cgdome.cc:63: 4
0.96918100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1890 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96943800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1891 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96948100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.96949900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1891 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.96951500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1890 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96953100 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.96954700 0104 [debug] mod_cgdome.cc:68: 5
0.96978800 0104 [funct] mod_cgdome.cc:29: SOF#1892 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96982600 0105 [debug] mod_cgdome.cc:30: 1
0.96992300 0104 [funct] mod_cgdome.cc:29: EOF#1892 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.96994100 0104 [debug] mod_cgdome.cc:74: 6
0.97008100 0104 [debug] mod_cgdome.cc:76: 7
0.97011700 0104 [debug] mod_cgdome.cc:78: 8
0.97013000 0103 [funct] mod_cgdome.cc:38: EOF#1887 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.97033700 0103 [funct] auto-wrappers.cc:10259: SOF#1893 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.97056300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1894 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.97083700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1895 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97109200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1896 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97114500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.97115800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1896 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97116900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1895 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97121600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.97123300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1894 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.97124900 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.97126600 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.97128500 0103 [funct] auto-wrappers.cc:10259: EOF#1893 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.97155300 0103 [funct] basicstream.cc:185: SOF#1897 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.97159300 0104 [debug] basicstream.cc:188: part 1
0.97178900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1898 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.97201400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1899 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97205900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Freeing
'
0.97207800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1899 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97209400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1898 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.97211000 0104 [debug] basicstream.cc:191: part 2
0.97217900 0104 [debug] basicstream.cc:193: part 3
0.97219300 0104 [debug] basicstream.cc:195: part 4
0.97241000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1900 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.97266700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1901 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97290400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1902 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97294900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.97296800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1902 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97298400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1901 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97305900 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.97307500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1900 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.97309200 0104 [debug] basicstream.cc:198: part 8
0.97311500 0104 [debug] basicstream.cc:200: part 9
0.97312900 0103 [funct] basicstream.cc:185: EOF#1897 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.97503200 0103 [funct] mod_cgdome.cc:38: SOF#1903 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.97507300 0104 [debug] mod_cgdome.cc:44: 1
0.97531700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1904 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.97566300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1905 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97571100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_t_unref'
0.97573000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1905 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97574600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1904 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.97576200 0104 [debug] mod_cgdome.cc:49: name = gdome_t_unref
0.97577800 0104 [debug] mod_cgdome.cc:52: 2
0.97579400 0104 [debug] mod_cgdome.cc:61: 3
0.97580900 0104 [debug] mod_cgdome.cc:63: 4
0.97604700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1906 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.97631900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1907 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97635900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_t_unref'
0.97637800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1907 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97639400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1906 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.97640900 0104 [debug] mod_cgdome.cc:65: key=gdome_t_unref
0.97642500 0104 [debug] mod_cgdome.cc:68: 5
0.97667700 0104 [funct] mod_cgdome.cc:29: SOF#1908 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.97671500 0105 [debug] mod_cgdome.cc:30: 1
0.97677700 0104 [funct] mod_cgdome.cc:29: EOF#1908 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.97679500 0104 [debug] mod_cgdome.cc:74: 6
0.97693500 0104 [debug] mod_cgdome.cc:76: 7
0.97699000 0104 [debug] mod_cgdome.cc:78: 8
0.97700900 0103 [funct] mod_cgdome.cc:38: EOF#1903 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.97722500 0103 [funct] auto-wrappers.cc:5099: SOF#1909 do_gdome_t_unref (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.97745500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1910 ptr_from_v8 (a, a_type='GdomeText*') at 0xb3f98ec4 in openjs::extensions::do_gdome_t_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.97773100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1911 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97798500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1912 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97802900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeText*'
0.97804300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1912 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97805300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1911 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97810000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeText*', address='135792432'
0.97811700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1910 ptr_from_v8 at 0xb3f98ec4 in openjs::extensions::do_gdome_t_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.97832700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1913 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f98f10 in openjs::extensions::do_gdome_t_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.97859900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1914 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97892800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1915 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97897500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.97899400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1915 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97901000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1914 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.97905700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.97907600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1913 ptr_from_v8 at 0xb3f98f10 in openjs::extensions::do_gdome_t_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.97909200 0104 [debug] auto-wrappers.cc:5104: Calling cgate_gdome_t_unref(135792432, 135034336)
0.97912000 0103 [funct] auto-wrappers.cc:5099: EOF#1909 do_gdome_t_unref at 0xb74f574d from /usr/lib/libv8_g.so
0.97938300 0103 [funct] mod_cgdome.cc:38: SOF#1916 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.97943700 0104 [debug] mod_cgdome.cc:44: 1
0.97966900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1917 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.97993500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1918 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.97997900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.97999600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1918 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98001200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1917 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98002700 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.98004200 0104 [debug] mod_cgdome.cc:52: 2
0.98005800 0104 [debug] mod_cgdome.cc:61: 3
0.98007300 0104 [debug] mod_cgdome.cc:63: 4
0.98028600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1919 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98052600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1920 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98056500 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.98058300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1920 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98059800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1919 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98061300 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.98062800 0104 [debug] mod_cgdome.cc:68: 5
0.98085400 0104 [funct] mod_cgdome.cc:29: SOF#1921 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98088900 0105 [debug] mod_cgdome.cc:30: 1
0.98097800 0104 [funct] mod_cgdome.cc:29: EOF#1921 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98099600 0104 [debug] mod_cgdome.cc:74: 6
0.98112100 0104 [debug] mod_cgdome.cc:76: 7
0.98115200 0104 [debug] mod_cgdome.cc:78: 8
0.98116400 0103 [funct] mod_cgdome.cc:38: EOF#1916 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.98135800 0103 [funct] auto-wrappers.cc:10259: SOF#1922 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.98157400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1923 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.98183300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1924 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.98208600 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1925 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98212200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.98213400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1925 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98214400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1924 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.98222600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.98224800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1923 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.98226300 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.98227900 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.98229800 0103 [funct] auto-wrappers.cc:10259: EOF#1922 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.98400500 0103 [funct] mod_cgdome.cc:38: SOF#1926 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.98404300 0104 [debug] mod_cgdome.cc:44: 1
0.98427000 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1927 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98452600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1928 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98456800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_unref'
0.98458600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1928 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98460200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1927 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98461700 0104 [debug] mod_cgdome.cc:49: name = gdome_el_unref
0.98463200 0104 [debug] mod_cgdome.cc:52: 2
0.98464800 0104 [debug] mod_cgdome.cc:61: 3
0.98466300 0104 [debug] mod_cgdome.cc:63: 4
0.98488800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1929 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98513600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1930 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98517200 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_el_unref'
0.98518400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1930 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98522300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1929 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98523900 0104 [debug] mod_cgdome.cc:65: key=gdome_el_unref
0.98525500 0104 [debug] mod_cgdome.cc:68: 5
0.98554600 0104 [funct] mod_cgdome.cc:29: SOF#1931 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98558200 0105 [debug] mod_cgdome.cc:30: 1
0.98563600 0104 [funct] mod_cgdome.cc:29: EOF#1931 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98565300 0104 [debug] mod_cgdome.cc:74: 6
0.98577900 0104 [debug] mod_cgdome.cc:76: 7
0.98581600 0104 [debug] mod_cgdome.cc:78: 8
0.98583300 0103 [funct] mod_cgdome.cc:38: EOF#1926 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.98604900 0103 [funct] auto-wrappers.cc:4364: SOF#1932 do_gdome_el_unref (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
0.98627600 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1933 ptr_from_v8 (a, a_type='GdomeElement*') at 0xb3faaa74 in openjs::extensions::do_gdome_el_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.98653500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1934 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.98677400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1935 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98681600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeElement*'
0.98683400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1935 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98684900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1934 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.98689500 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeElement*', address='135576944'
0.98691400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1933 ptr_from_v8 at 0xb3faaa74 in openjs::extensions::do_gdome_el_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.98711100 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1936 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3faaac0 in openjs::extensions::do_gdome_el_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.98736600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1937 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.98760300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1938 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98764500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.98766300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1938 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98769200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1937 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.98773700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.98775600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1936 ptr_from_v8 at 0xb3faaac0 in openjs::extensions::do_gdome_el_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.98777200 0104 [debug] auto-wrappers.cc:4369: Calling cgate_gdome_el_unref(135576944, 135034336)
0.98779600 0103 [funct] auto-wrappers.cc:4364: EOF#1932 do_gdome_el_unref at 0xb74f574d from /usr/lib/libv8_g.so
0.98804200 0103 [funct] mod_cgdome.cc:38: SOF#1939 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
0.98807700 0104 [debug] mod_cgdome.cc:44: 1
0.98828900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1940 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98852900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1941 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98856900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.98858600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1941 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98860200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1940 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98861700 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
0.98863200 0104 [debug] mod_cgdome.cc:52: 2
0.98864700 0104 [debug] mod_cgdome.cc:61: 3
0.98866200 0104 [debug] mod_cgdome.cc:63: 4
0.98894100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1942 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98917900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1943 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98922000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
0.98923700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1943 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.98926800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1942 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98927800 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
0.98928900 0104 [debug] mod_cgdome.cc:68: 5
0.98953200 0104 [funct] mod_cgdome.cc:29: SOF#1944 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98958000 0105 [debug] mod_cgdome.cc:30: 1
0.98966800 0104 [funct] mod_cgdome.cc:29: EOF#1944 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.98968500 0104 [debug] mod_cgdome.cc:74: 6
0.98981600 0104 [debug] mod_cgdome.cc:76: 7
0.98985500 0104 [debug] mod_cgdome.cc:78: 8
0.98987400 0103 [funct] mod_cgdome.cc:38: EOF#1939 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
0.99008200 0103 [funct] auto-wrappers.cc:10259: SOF#1945 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.99031400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1946 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.99059300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1947 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99085000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1948 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99089600 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
0.99091400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1948 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99093100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1947 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99097800 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
0.99099800 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1946 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.99101400 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
0.99103100 0104 [debug] auto-wrappers.cc:10265: ret = 0
0.99105000 0103 [funct] auto-wrappers.cc:10259: EOF#1945 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
0.99128600 0103 [funct] basicstream.cc:185: SOF#1949 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
0.99132600 0104 [debug] basicstream.cc:188: part 1
0.99152300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1950 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.99174700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1951 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99179400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Saving to file: out.html
'
0.99181200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1951 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99182800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1950 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.99185900 0104 [debug] basicstream.cc:191: part 2
0.99189900 0104 [debug] basicstream.cc:193: part 3
0.99191700 0104 [debug] basicstream.cc:195: part 4
0.99212500 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1952 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.99242400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1953 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99266300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1954 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99270900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
0.99272700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1954 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99274300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1953 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99280400 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
0.99282400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1952 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
0.99284100 0104 [debug] basicstream.cc:198: part 8
0.99286400 0104 [debug] basicstream.cc:200: part 9
0.99288500 0103 [funct] basicstream.cc:185: EOF#1949 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
0.99545100 0103 [funct] mod_cgdome.cc:38: SOF#1955 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
0.99556000 0104 [debug] mod_cgdome.cc:44: 1
0.99580900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1956 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.99608400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1957 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99612300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_saveDocToFile'
0.99613600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1957 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99614600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1956 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.99615600 0104 [debug] mod_cgdome.cc:49: name = gdome_di_saveDocToFile
0.99616600 0104 [debug] mod_cgdome.cc:52: 2
0.99617600 0104 [debug] mod_cgdome.cc:61: 3
0.99618600 0104 [debug] mod_cgdome.cc:63: 4
0.99642500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1958 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.99669600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1959 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99675800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_saveDocToFile'
0.99677700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1959 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99679300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1958 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.99680900 0104 [debug] mod_cgdome.cc:65: key=gdome_di_saveDocToFile
0.99682500 0104 [debug] mod_cgdome.cc:68: 5
0.99707800 0104 [funct] mod_cgdome.cc:29: SOF#1960 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.99711500 0105 [debug] mod_cgdome.cc:30: 1
0.99714400 0104 [funct] mod_cgdome.cc:29: EOF#1960 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
0.99715500 0104 [debug] mod_cgdome.cc:74: 6
0.99729600 0104 [debug] mod_cgdome.cc:76: 7
0.99733500 0104 [debug] mod_cgdome.cc:78: 8
0.99735300 0103 [funct] mod_cgdome.cc:38: EOF#1955 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
0.99756800 0103 [funct] auto-wrappers.cc:254: SOF#1961 do_gdome_di_saveDocToFile (args[5]) at 0xb74f574d from /usr/lib/libv8_g.so
0.99780000 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1962 ptr_from_v8 (a, a_type='GdomeDOMImplementation*') at 0xb3ffd234 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.99807900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1963 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99833400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1964 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99837500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDOMImplementation*'
0.99839400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1964 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99841000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1963 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99845700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDOMImplementation*', address='135015648'
0.99847600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1962 ptr_from_v8 at 0xb3ffd234 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.99868700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1965 ptr_from_v8 (a, a_type='GdomeDocument*') at 0xb3ffd280 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.99906200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1966 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99933400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1967 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99937900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDocument*'
0.99939800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1967 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99941400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1966 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
0.99946100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDocument*', address='135156896'
0.99948100 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1965 ptr_from_v8 at 0xb3ffd280 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.99969400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1968 convert<std::string,v8::Local<v8::Value>> (value) at 0xb3ffd2c5 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
0.99993800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1969 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
0.99998100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`out.html'
1.00000000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1969 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00001600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1968 convert<std::string,v8::Local<v8::Value>> at 0xb3ffd2c5 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.00022700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1970 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3ffd333 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.00050100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1971 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.00075500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1972 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00079900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
1.00081700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1972 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00083300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1971 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.00088100 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
1.00091400 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1970 ptr_from_v8 at 0xb3ffd333 in openjs::extensions::do_gdome_di_saveDocToFile(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.00093100 0104 [debug] auto-wrappers.cc:263: Calling cgate_gdome_di_saveDocToFile(135015648, 135156896, out.html, 0, 135034336)
1.00113000 0104 [debug] auto-wrappers.cc:265: ret = 1
1.00114800 0103 [funct] auto-wrappers.cc:254: EOF#1961 do_gdome_di_saveDocToFile at 0xb74f574d from /usr/lib/libv8_g.so
1.00141600 0103 [funct] mod_cgdome.cc:38: SOF#1973 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
1.00145400 0104 [debug] mod_cgdome.cc:44: 1
1.00168400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1974 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00194100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1975 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00198400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
1.00200300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1975 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00201900 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1974 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00203100 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
1.00204400 0104 [debug] mod_cgdome.cc:52: 2
1.00206000 0104 [debug] mod_cgdome.cc:61: 3
1.00207000 0104 [debug] mod_cgdome.cc:63: 4
1.00234800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1976 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00261700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1977 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00265900 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
1.00267800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1977 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00269300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1976 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00270900 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
1.00272400 0104 [debug] mod_cgdome.cc:68: 5
1.00295900 0104 [funct] mod_cgdome.cc:29: SOF#1978 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00299400 0105 [debug] mod_cgdome.cc:30: 1
1.00308600 0104 [funct] mod_cgdome.cc:29: EOF#1978 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00310300 0104 [debug] mod_cgdome.cc:74: 6
1.00323800 0104 [debug] mod_cgdome.cc:76: 7
1.00327600 0104 [debug] mod_cgdome.cc:78: 8
1.00330700 0103 [funct] mod_cgdome.cc:38: EOF#1973 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
1.00350100 0103 [funct] auto-wrappers.cc:10259: SOF#1979 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
1.00371700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1980 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.00397700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1981 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.00421800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1982 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00426000 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
1.00427800 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1982 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00429300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1981 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.00433700 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
1.00435600 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1980 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.00437100 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
1.00438700 0104 [debug] auto-wrappers.cc:10265: ret = 0
1.00440600 0103 [funct] auto-wrappers.cc:10259: EOF#1979 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
1.00462300 0103 [funct] basicstream.cc:185: SOF#1983 do_v8_s_write (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
1.00466000 0104 [debug] basicstream.cc:188: part 1
1.00484400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: SOF#1984 convert<std::string,v8::Local<v8::Value>> (value) at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
1.00505400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1985 do_v8_convert_to_string (value(v8)) at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00509700 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`Freeing more
'
1.00511500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1985 do_v8_convert_to_string at 0xb42aaf4d in std::string sendanor::convert<std::string, v8::Local<v8::Value> >(v8::Local<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00512400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:106: EOF#1984 convert<std::string,v8::Local<v8::Value>> at 0xb425a4c3 in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
1.00513300 0104 [debug] basicstream.cc:191: part 2
1.00516400 0104 [debug] basicstream.cc:193: part 3
1.00517500 0104 [debug] basicstream.cc:195: part 4
1.00537400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1986 ptr_from_v8 (a, a_type='std::ostream*') at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
1.00567100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1987 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.00590400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1988 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00595500 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`std::ostream*'
1.00597300 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1988 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00598800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1987 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.00604900 0105 [debug] ../../core/pointer_helpers.h:51: type='std::ostream*', address='3070680416'
1.00606900 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1986 ptr_from_v8 at 0xb425a9fa in do_v8_s_write(v8::Arguments const&) from /usr/lib/openjs/basicstream.so
1.00608500 0104 [debug] basicstream.cc:198: part 8
1.00610700 0104 [debug] basicstream.cc:200: part 9
1.00612100 0103 [funct] basicstream.cc:185: EOF#1983 do_v8_s_write at 0xb74f574d from /usr/lib/libv8_g.so
1.00757800 0103 [funct] mod_cgdome.cc:38: SOF#1989 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
1.00761500 0104 [debug] mod_cgdome.cc:44: 1
1.00784300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1990 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00809800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1991 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00813400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_doc_unref'
1.00814600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1991 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00815500 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1990 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00816400 0104 [debug] mod_cgdome.cc:49: name = gdome_doc_unref
1.00817300 0104 [debug] mod_cgdome.cc:52: 2
1.00818300 0104 [debug] mod_cgdome.cc:61: 3
1.00819200 0104 [debug] mod_cgdome.cc:63: 4
1.00841600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1992 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00866900 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1993 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00871000 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_doc_unref'
1.00872800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1993 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.00875700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1992 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00877300 0104 [debug] mod_cgdome.cc:65: key=gdome_doc_unref
1.00878800 0104 [debug] mod_cgdome.cc:68: 5
1.00912500 0104 [funct] mod_cgdome.cc:29: SOF#1994 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00915600 0105 [debug] mod_cgdome.cc:30: 1
1.00918700 0104 [funct] mod_cgdome.cc:29: EOF#1994 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.00919800 0104 [debug] mod_cgdome.cc:74: 6
1.00934600 0104 [debug] mod_cgdome.cc:76: 7
1.00938500 0104 [debug] mod_cgdome.cc:78: 8
1.00940300 0103 [funct] mod_cgdome.cc:38: EOF#1989 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
1.00961500 0103 [funct] auto-wrappers.cc:1264: SOF#1995 do_gdome_doc_unref (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
1.00983300 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1996 ptr_from_v8 (a, a_type='GdomeDocument*') at 0xb3feb654 in openjs::extensions::do_gdome_doc_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.01009200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#1997 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01033200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#1998 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01037400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDocument*'
1.01039100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#1998 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01040700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#1997 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01045000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDocument*', address='135156896'
1.01046900 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1996 ptr_from_v8 at 0xb3feb654 in openjs::extensions::do_gdome_doc_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.01066700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#1999 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3feb6a0 in openjs::extensions::do_gdome_doc_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.01092300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2000 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01115700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2001 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01119200 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
1.01120400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2001 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01123100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2000 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01127600 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
1.01129500 0104 [funct] ../../core/pointer_helpers.h:37: EOF#1999 ptr_from_v8 at 0xb3feb6a0 in openjs::extensions::do_gdome_doc_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.01131100 0104 [debug] auto-wrappers.cc:1269: Calling cgate_gdome_doc_unref(135156896, 135034336)
1.01133500 0103 [funct] auto-wrappers.cc:1264: EOF#1995 do_gdome_doc_unref at 0xb74f574d from /usr/lib/libv8_g.so
1.01157900 0103 [funct] mod_cgdome.cc:38: SOF#2002 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
1.01161400 0104 [debug] mod_cgdome.cc:44: 1
1.01182700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2003 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01206700 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2004 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01317600 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
1.01319500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2004 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01320400 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2003 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01322000 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
1.01323600 0104 [debug] mod_cgdome.cc:52: 2
1.01325200 0104 [debug] mod_cgdome.cc:61: 3
1.01326700 0104 [debug] mod_cgdome.cc:63: 4
1.01349700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2005 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01374200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2006 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01378300 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
1.01380100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2006 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01381600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2005 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01383000 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
1.01384600 0104 [debug] mod_cgdome.cc:68: 5
1.01407000 0104 [funct] mod_cgdome.cc:29: SOF#2007 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01411800 0105 [debug] mod_cgdome.cc:30: 1
1.01420700 0104 [funct] mod_cgdome.cc:29: EOF#2007 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01423100 0104 [debug] mod_cgdome.cc:74: 6
1.01437200 0104 [debug] mod_cgdome.cc:76: 7
1.01440900 0104 [debug] mod_cgdome.cc:78: 8
1.01442600 0103 [funct] mod_cgdome.cc:38: EOF#2002 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
1.01462100 0103 [funct] auto-wrappers.cc:10259: SOF#2008 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
1.01483700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#2009 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.01510000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2010 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01534000 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2011 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01538300 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
1.01540100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2011 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01541600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2010 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01546000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
1.01551700 0104 [funct] ../../core/pointer_helpers.h:37: EOF#2009 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.01557200 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
1.01558800 0104 [debug] auto-wrappers.cc:10265: ret = 0
1.01560700 0103 [funct] auto-wrappers.cc:10259: EOF#2008 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
1.01699000 0103 [funct] mod_cgdome.cc:38: SOF#2012 cgdome_call_get (name, info) at 0xb75fe523 from /usr/lib/libv8_g.so
1.01702700 0104 [debug] mod_cgdome.cc:44: 1
1.01725600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2013 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01751100 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2014 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01755400 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_unref'
1.01757200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2014 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01758700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2013 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01761700 0104 [debug] mod_cgdome.cc:49: name = gdome_di_unref
1.01763300 0104 [debug] mod_cgdome.cc:52: 2
1.01764800 0104 [debug] mod_cgdome.cc:61: 3
1.01766300 0104 [debug] mod_cgdome.cc:63: 4
1.01788800 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2015 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01813500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2016 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01817100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_di_unref'
1.01818300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2016 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01819200 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2015 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01820100 0104 [debug] mod_cgdome.cc:65: key=gdome_di_unref
1.01821600 0104 [debug] mod_cgdome.cc:68: 5
1.01845300 0104 [funct] mod_cgdome.cc:29: SOF#2017 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01848800 0105 [debug] mod_cgdome.cc:30: 1
1.01851800 0104 [funct] mod_cgdome.cc:29: EOF#2017 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.01853500 0104 [debug] mod_cgdome.cc:74: 6
1.01866000 0104 [debug] mod_cgdome.cc:76: 7
1.01869900 0104 [debug] mod_cgdome.cc:78: 8
1.01871600 0103 [funct] mod_cgdome.cc:38: EOF#2012 cgdome_call_get at 0xb75fe523 from /usr/lib/libv8_g.so
1.01898400 0103 [funct] auto-wrappers.cc:139: SOF#2018 do_gdome_di_unref (args[2]) at 0xb74f574d from /usr/lib/libv8_g.so
1.01919700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#2019 ptr_from_v8 (a, a_type='GdomeDOMImplementation*') at 0xb3ffef34 in openjs::extensions::do_gdome_di_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.01948500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2020 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01972500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2021 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01976700 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeDOMImplementation*'
1.01978500 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2021 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.01980000 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2020 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.01984400 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeDOMImplementation*', address='135015648'
1.01986300 0104 [funct] ../../core/pointer_helpers.h:37: EOF#2019 ptr_from_v8 at 0xb3ffef34 in openjs::extensions::do_gdome_di_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.02007400 0104 [funct] ../../core/pointer_helpers.h:37: SOF#2022 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3ffef80 in openjs::extensions::do_gdome_di_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.02033200 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2023 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.02057200 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2024 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02061400 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
1.02063100 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2024 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02064600 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2023 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.02069000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
1.02070900 0104 [funct] ../../core/pointer_helpers.h:37: EOF#2022 ptr_from_v8 at 0xb3ffef80 in openjs::extensions::do_gdome_di_unref(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.02072400 0104 [debug] auto-wrappers.cc:144: Calling cgate_gdome_di_unref(135015648, 135034336)
1.02075100 0103 [funct] auto-wrappers.cc:139: EOF#2018 do_gdome_di_unref at 0xb74f574d from /usr/lib/libv8_g.so
1.02099600 0103 [funct] mod_cgdome.cc:38: SOF#2025 cgdome_call_get (name, info) at 0xb768bb30 from /usr/lib/libv8_g.so
1.02103200 0104 [debug] mod_cgdome.cc:44: 1
1.02124600 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2026 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.02148800 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2027 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02152800 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
1.02154500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2027 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02156100 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2026 convert<std::string,v8::Handle<v8::Value>> at 0xb4173501 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.02157500 0104 [debug] mod_cgdome.cc:49: name = gdome_extra_exc_getvalue
1.02159100 0104 [debug] mod_cgdome.cc:52: 2
1.02160600 0104 [debug] mod_cgdome.cc:61: 3
1.02162100 0104 [debug] mod_cgdome.cc:63: 4
1.02183300 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2028 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.02207400 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2029 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02212100 0106 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`gdome_extra_exc_getvalue'
1.02213300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2029 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02217700 0104 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2028 convert<std::string,v8::Handle<v8::Value>> at 0xb41740a6 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.02218900 0104 [debug] mod_cgdome.cc:65: key=gdome_extra_exc_getvalue
1.02219800 0104 [debug] mod_cgdome.cc:68: 5
1.02242400 0104 [funct] mod_cgdome.cc:29: SOF#2030 cgdome_call_get (name, info) at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.02247100 0105 [debug] mod_cgdome.cc:30: 1
1.02256500 0104 [funct] mod_cgdome.cc:29: EOF#2030 cgdome_call_get at 0xb4174387 in cgdome_call_get(v8::Local<v8::String>, v8::AccessorInfo const&) from /usr/lib/openjs/mod_cgdome.so
1.02258200 0104 [debug] mod_cgdome.cc:74: 6
1.02271700 0104 [debug] mod_cgdome.cc:76: 7
1.02275600 0104 [debug] mod_cgdome.cc:78: 8
1.02277400 0103 [funct] mod_cgdome.cc:38: EOF#2025 cgdome_call_get at 0xb768bb30 from /usr/lib/libv8_g.so
1.02298300 0103 [funct] auto-wrappers.cc:10259: SOF#2031 do_gdome_extra_exc_getvalue (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
1.02320700 0104 [funct] ../../core/pointer_helpers.h:37: SOF#2032 ptr_from_v8 (a, a_type='GdomeException*') at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.02348500 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: SOF#2033 convert<std::string,v8::Handle<v8::Value>> (value) at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.02374400 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: SOF#2034 do_v8_convert_to_string (value(v8)) at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02378900 0107 [debug] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:318: strbuf=`GdomeException*'
1.02380700 0106 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:314: EOF#2034 do_v8_convert_to_string at 0xb42ab50d in std::string sendanor::convert<std::string, v8::Handle<v8::Value> >(v8::Handle<v8::Value> const&) from /usr/lib/openjs/loader.so
1.02382300 0105 [funct] /home/users/jhh/svn/svn.sendanor.fi/svn/openjs/trunk/src/sendanor/convert.h:99: EOF#2033 convert<std::string,v8::Handle<v8::Value>> at 0xb429245a in openjs::ptr_from_v8(v8::Handle<v8::Value>, std::string const&) from /usr/lib/openjs/loader.so
1.02387000 0105 [debug] ../../core/pointer_helpers.h:51: type='GdomeException*', address='135034336'
1.02389000 0104 [funct] ../../core/pointer_helpers.h:37: EOF#2032 ptr_from_v8 at 0xb3f30391 in openjs::extensions::do_gdome_extra_exc_getvalue(v8::Arguments const&) from /usr/lib/openjs/mod_cgdome.so
1.02390600 0104 [debug] auto-wrappers.cc:10263: Calling cgate_gdome_extra_exc_getvalue(135034336)
1.02392200 0104 [debug] auto-wrappers.cc:10265: ret = 0
1.02393600 0103 [funct] auto-wrappers.cc:10259: EOF#2031 do_gdome_extra_exc_getvalue at 0xb74f574d from /usr/lib/libv8_g.so
1.02415000 0103 [funct] basicsys.cc:71: SOF#2035 do_v8_exit (args[1]) at 0xb74f574d from /usr/lib/libv8_g.so
